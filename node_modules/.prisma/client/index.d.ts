
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Branch
 * 
 */
export type Branch = $Result.DefaultSelection<Prisma.$BranchPayload>
/**
 * Model Unit
 * 
 */
export type Unit = $Result.DefaultSelection<Prisma.$UnitPayload>
/**
 * Model Division
 * 
 */
export type Division = $Result.DefaultSelection<Prisma.$DivisionPayload>
/**
 * Model Education
 * 
 */
export type Education = $Result.DefaultSelection<Prisma.$EducationPayload>
/**
 * Model Position
 * 
 */
export type Position = $Result.DefaultSelection<Prisma.$PositionPayload>
/**
 * Model BaseSalary
 * 
 */
export type BaseSalary = $Result.DefaultSelection<Prisma.$BaseSalaryPayload>
/**
 * Model Grade
 * 
 */
export type Grade = $Result.DefaultSelection<Prisma.$GradePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model FamilyMember
 * 
 */
export type FamilyMember = $Result.DefaultSelection<Prisma.$FamilyMemberPayload>
/**
 * Model Infraction
 * 
 */
export type Infraction = $Result.DefaultSelection<Prisma.$InfractionPayload>
/**
 * Model SalaryHistory
 * 
 */
export type SalaryHistory = $Result.DefaultSelection<Prisma.$SalaryHistoryPayload>
/**
 * Model GradeHistory
 * 
 */
export type GradeHistory = $Result.DefaultSelection<Prisma.$GradeHistoryPayload>
/**
 * Model Placement
 * 
 */
export type Placement = $Result.DefaultSelection<Prisma.$PlacementPayload>
/**
 * Model Recommendation
 * 
 */
export type Recommendation = $Result.DefaultSelection<Prisma.$RecommendationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  admin: 'admin',
  manager: 'manager',
  director: 'director',
  employee: 'employee'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Gender: {
  male: 'male',
  female: 'female'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const EmployeeStatus: {
  sukan: 'sukan',
  contract: 'contract',
  honorary: 'honorary',
  trainee: 'trainee',
  permanent_honorer: 'permanent_honorer',
  permanent_employee: 'permanent_employee'
};

export type EmployeeStatus = (typeof EmployeeStatus)[keyof typeof EmployeeStatus]


export const FamilyStatus: {
  child: 'child',
  wife: 'wife',
  husband: 'husband'
};

export type FamilyStatus = (typeof FamilyStatus)[keyof typeof FamilyStatus]


export const PlacementType: {
  branch: 'branch',
  center: 'center',
  unit: 'unit'
};

export type PlacementType = (typeof PlacementType)[keyof typeof PlacementType]


export const RecommendationStatus: {
  received: 'received',
  delayed: 'delayed',
  approved: 'approved',
  completed: 'completed'
};

export type RecommendationStatus = (typeof RecommendationStatus)[keyof typeof RecommendationStatus]


export const RecommendationType: {
  salary: 'salary',
  rank: 'rank'
};

export type RecommendationType = (typeof RecommendationType)[keyof typeof RecommendationType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type EmployeeStatus = $Enums.EmployeeStatus

export const EmployeeStatus: typeof $Enums.EmployeeStatus

export type FamilyStatus = $Enums.FamilyStatus

export const FamilyStatus: typeof $Enums.FamilyStatus

export type PlacementType = $Enums.PlacementType

export const PlacementType: typeof $Enums.PlacementType

export type RecommendationStatus = $Enums.RecommendationStatus

export const RecommendationStatus: typeof $Enums.RecommendationStatus

export type RecommendationType = $Enums.RecommendationType

export const RecommendationType: typeof $Enums.RecommendationType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Branches
 * const branches = await prisma.branch.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Branches
   * const branches = await prisma.branch.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.branch`: Exposes CRUD operations for the **Branch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Branches
    * const branches = await prisma.branch.findMany()
    * ```
    */
  get branch(): Prisma.BranchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.unit`: Exposes CRUD operations for the **Unit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Units
    * const units = await prisma.unit.findMany()
    * ```
    */
  get unit(): Prisma.UnitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.division`: Exposes CRUD operations for the **Division** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Divisions
    * const divisions = await prisma.division.findMany()
    * ```
    */
  get division(): Prisma.DivisionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.position`: Exposes CRUD operations for the **Position** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Positions
    * const positions = await prisma.position.findMany()
    * ```
    */
  get position(): Prisma.PositionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.baseSalary`: Exposes CRUD operations for the **BaseSalary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BaseSalaries
    * const baseSalaries = await prisma.baseSalary.findMany()
    * ```
    */
  get baseSalary(): Prisma.BaseSalaryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.familyMember`: Exposes CRUD operations for the **FamilyMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FamilyMembers
    * const familyMembers = await prisma.familyMember.findMany()
    * ```
    */
  get familyMember(): Prisma.FamilyMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.infraction`: Exposes CRUD operations for the **Infraction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Infractions
    * const infractions = await prisma.infraction.findMany()
    * ```
    */
  get infraction(): Prisma.InfractionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.salaryHistory`: Exposes CRUD operations for the **SalaryHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SalaryHistories
    * const salaryHistories = await prisma.salaryHistory.findMany()
    * ```
    */
  get salaryHistory(): Prisma.SalaryHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gradeHistory`: Exposes CRUD operations for the **GradeHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GradeHistories
    * const gradeHistories = await prisma.gradeHistory.findMany()
    * ```
    */
  get gradeHistory(): Prisma.GradeHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.placement`: Exposes CRUD operations for the **Placement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Placements
    * const placements = await prisma.placement.findMany()
    * ```
    */
  get placement(): Prisma.PlacementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recommendation`: Exposes CRUD operations for the **Recommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendations
    * const recommendations = await prisma.recommendation.findMany()
    * ```
    */
  get recommendation(): Prisma.RecommendationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.1
   * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Branch: 'Branch',
    Unit: 'Unit',
    Division: 'Division',
    Education: 'Education',
    Position: 'Position',
    BaseSalary: 'BaseSalary',
    Grade: 'Grade',
    User: 'User',
    Employee: 'Employee',
    FamilyMember: 'FamilyMember',
    Infraction: 'Infraction',
    SalaryHistory: 'SalaryHistory',
    GradeHistory: 'GradeHistory',
    Placement: 'Placement',
    Recommendation: 'Recommendation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "branch" | "unit" | "division" | "education" | "position" | "baseSalary" | "grade" | "user" | "employee" | "familyMember" | "infraction" | "salaryHistory" | "gradeHistory" | "placement" | "recommendation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Branch: {
        payload: Prisma.$BranchPayload<ExtArgs>
        fields: Prisma.BranchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BranchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BranchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findFirst: {
            args: Prisma.BranchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BranchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          findMany: {
            args: Prisma.BranchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>[]
          }
          create: {
            args: Prisma.BranchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          createMany: {
            args: Prisma.BranchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BranchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          update: {
            args: Prisma.BranchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          deleteMany: {
            args: Prisma.BranchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BranchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BranchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BranchPayload>
          }
          aggregate: {
            args: Prisma.BranchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBranch>
          }
          groupBy: {
            args: Prisma.BranchGroupByArgs<ExtArgs>
            result: $Utils.Optional<BranchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BranchCountArgs<ExtArgs>
            result: $Utils.Optional<BranchCountAggregateOutputType> | number
          }
        }
      }
      Unit: {
        payload: Prisma.$UnitPayload<ExtArgs>
        fields: Prisma.UnitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findFirst: {
            args: Prisma.UnitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          findMany: {
            args: Prisma.UnitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>[]
          }
          create: {
            args: Prisma.UnitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          createMany: {
            args: Prisma.UnitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UnitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          update: {
            args: Prisma.UnitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          deleteMany: {
            args: Prisma.UnitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UnitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnitPayload>
          }
          aggregate: {
            args: Prisma.UnitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnit>
          }
          groupBy: {
            args: Prisma.UnitGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnitGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnitCountArgs<ExtArgs>
            result: $Utils.Optional<UnitCountAggregateOutputType> | number
          }
        }
      }
      Division: {
        payload: Prisma.$DivisionPayload<ExtArgs>
        fields: Prisma.DivisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DivisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DivisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          findFirst: {
            args: Prisma.DivisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DivisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          findMany: {
            args: Prisma.DivisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>[]
          }
          create: {
            args: Prisma.DivisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          createMany: {
            args: Prisma.DivisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DivisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          update: {
            args: Prisma.DivisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          deleteMany: {
            args: Prisma.DivisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DivisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DivisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DivisionPayload>
          }
          aggregate: {
            args: Prisma.DivisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDivision>
          }
          groupBy: {
            args: Prisma.DivisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DivisionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DivisionCountArgs<ExtArgs>
            result: $Utils.Optional<DivisionCountAggregateOutputType> | number
          }
        }
      }
      Education: {
        payload: Prisma.$EducationPayload<ExtArgs>
        fields: Prisma.EducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EducationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findFirst: {
            args: Prisma.EducationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findMany: {
            args: Prisma.EducationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          create: {
            args: Prisma.EducationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          createMany: {
            args: Prisma.EducationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EducationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          update: {
            args: Prisma.EducationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          deleteMany: {
            args: Prisma.EducationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EducationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EducationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          aggregate: {
            args: Prisma.EducationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEducation>
          }
          groupBy: {
            args: Prisma.EducationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EducationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EducationCountArgs<ExtArgs>
            result: $Utils.Optional<EducationCountAggregateOutputType> | number
          }
        }
      }
      Position: {
        payload: Prisma.$PositionPayload<ExtArgs>
        fields: Prisma.PositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findFirst: {
            args: Prisma.PositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findMany: {
            args: Prisma.PositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          create: {
            args: Prisma.PositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          createMany: {
            args: Prisma.PositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          update: {
            args: Prisma.PositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          deleteMany: {
            args: Prisma.PositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          aggregate: {
            args: Prisma.PositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePosition>
          }
          groupBy: {
            args: Prisma.PositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PositionCountArgs<ExtArgs>
            result: $Utils.Optional<PositionCountAggregateOutputType> | number
          }
        }
      }
      BaseSalary: {
        payload: Prisma.$BaseSalaryPayload<ExtArgs>
        fields: Prisma.BaseSalaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BaseSalaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BaseSalaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload>
          }
          findFirst: {
            args: Prisma.BaseSalaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BaseSalaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload>
          }
          findMany: {
            args: Prisma.BaseSalaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload>[]
          }
          create: {
            args: Prisma.BaseSalaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload>
          }
          createMany: {
            args: Prisma.BaseSalaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BaseSalaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload>
          }
          update: {
            args: Prisma.BaseSalaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload>
          }
          deleteMany: {
            args: Prisma.BaseSalaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BaseSalaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BaseSalaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BaseSalaryPayload>
          }
          aggregate: {
            args: Prisma.BaseSalaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBaseSalary>
          }
          groupBy: {
            args: Prisma.BaseSalaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BaseSalaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BaseSalaryCountArgs<ExtArgs>
            result: $Utils.Optional<BaseSalaryCountAggregateOutputType> | number
          }
        }
      }
      Grade: {
        payload: Prisma.$GradePayload<ExtArgs>
        fields: Prisma.GradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findFirst: {
            args: Prisma.GradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findMany: {
            args: Prisma.GradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          create: {
            args: Prisma.GradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          createMany: {
            args: Prisma.GradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          update: {
            args: Prisma.GradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          deleteMany: {
            args: Prisma.GradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          aggregate: {
            args: Prisma.GradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrade>
          }
          groupBy: {
            args: Prisma.GradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GradeCountArgs<ExtArgs>
            result: $Utils.Optional<GradeCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      FamilyMember: {
        payload: Prisma.$FamilyMemberPayload<ExtArgs>
        fields: Prisma.FamilyMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FamilyMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FamilyMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload>
          }
          findFirst: {
            args: Prisma.FamilyMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FamilyMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload>
          }
          findMany: {
            args: Prisma.FamilyMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload>[]
          }
          create: {
            args: Prisma.FamilyMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload>
          }
          createMany: {
            args: Prisma.FamilyMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FamilyMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload>
          }
          update: {
            args: Prisma.FamilyMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload>
          }
          deleteMany: {
            args: Prisma.FamilyMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FamilyMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FamilyMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FamilyMemberPayload>
          }
          aggregate: {
            args: Prisma.FamilyMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFamilyMember>
          }
          groupBy: {
            args: Prisma.FamilyMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<FamilyMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.FamilyMemberCountArgs<ExtArgs>
            result: $Utils.Optional<FamilyMemberCountAggregateOutputType> | number
          }
        }
      }
      Infraction: {
        payload: Prisma.$InfractionPayload<ExtArgs>
        fields: Prisma.InfractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InfractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InfractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload>
          }
          findFirst: {
            args: Prisma.InfractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InfractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload>
          }
          findMany: {
            args: Prisma.InfractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload>[]
          }
          create: {
            args: Prisma.InfractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload>
          }
          createMany: {
            args: Prisma.InfractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InfractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload>
          }
          update: {
            args: Prisma.InfractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload>
          }
          deleteMany: {
            args: Prisma.InfractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InfractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InfractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfractionPayload>
          }
          aggregate: {
            args: Prisma.InfractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInfraction>
          }
          groupBy: {
            args: Prisma.InfractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InfractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InfractionCountArgs<ExtArgs>
            result: $Utils.Optional<InfractionCountAggregateOutputType> | number
          }
        }
      }
      SalaryHistory: {
        payload: Prisma.$SalaryHistoryPayload<ExtArgs>
        fields: Prisma.SalaryHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalaryHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalaryHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          findFirst: {
            args: Prisma.SalaryHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalaryHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          findMany: {
            args: Prisma.SalaryHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>[]
          }
          create: {
            args: Prisma.SalaryHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          createMany: {
            args: Prisma.SalaryHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SalaryHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          update: {
            args: Prisma.SalaryHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          deleteMany: {
            args: Prisma.SalaryHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalaryHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SalaryHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          aggregate: {
            args: Prisma.SalaryHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSalaryHistory>
          }
          groupBy: {
            args: Prisma.SalaryHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalaryHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalaryHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<SalaryHistoryCountAggregateOutputType> | number
          }
        }
      }
      GradeHistory: {
        payload: Prisma.$GradeHistoryPayload<ExtArgs>
        fields: Prisma.GradeHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload>
          }
          findFirst: {
            args: Prisma.GradeHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload>
          }
          findMany: {
            args: Prisma.GradeHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload>[]
          }
          create: {
            args: Prisma.GradeHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload>
          }
          createMany: {
            args: Prisma.GradeHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GradeHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload>
          }
          update: {
            args: Prisma.GradeHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload>
          }
          deleteMany: {
            args: Prisma.GradeHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GradeHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GradeHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradeHistoryPayload>
          }
          aggregate: {
            args: Prisma.GradeHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGradeHistory>
          }
          groupBy: {
            args: Prisma.GradeHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradeHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.GradeHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<GradeHistoryCountAggregateOutputType> | number
          }
        }
      }
      Placement: {
        payload: Prisma.$PlacementPayload<ExtArgs>
        fields: Prisma.PlacementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlacementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlacementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload>
          }
          findFirst: {
            args: Prisma.PlacementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlacementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload>
          }
          findMany: {
            args: Prisma.PlacementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload>[]
          }
          create: {
            args: Prisma.PlacementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload>
          }
          createMany: {
            args: Prisma.PlacementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PlacementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload>
          }
          update: {
            args: Prisma.PlacementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload>
          }
          deleteMany: {
            args: Prisma.PlacementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlacementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlacementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlacementPayload>
          }
          aggregate: {
            args: Prisma.PlacementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlacement>
          }
          groupBy: {
            args: Prisma.PlacementGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlacementGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlacementCountArgs<ExtArgs>
            result: $Utils.Optional<PlacementCountAggregateOutputType> | number
          }
        }
      }
      Recommendation: {
        payload: Prisma.$RecommendationPayload<ExtArgs>
        fields: Prisma.RecommendationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecommendationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecommendationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findFirst: {
            args: Prisma.RecommendationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecommendationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findMany: {
            args: Prisma.RecommendationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          create: {
            args: Prisma.RecommendationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          createMany: {
            args: Prisma.RecommendationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RecommendationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          update: {
            args: Prisma.RecommendationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          deleteMany: {
            args: Prisma.RecommendationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecommendationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecommendationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          aggregate: {
            args: Prisma.RecommendationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecommendation>
          }
          groupBy: {
            args: Prisma.RecommendationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecommendationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecommendationCountArgs<ExtArgs>
            result: $Utils.Optional<RecommendationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    branch?: BranchOmit
    unit?: UnitOmit
    division?: DivisionOmit
    education?: EducationOmit
    position?: PositionOmit
    baseSalary?: BaseSalaryOmit
    grade?: GradeOmit
    user?: UserOmit
    employee?: EmployeeOmit
    familyMember?: FamilyMemberOmit
    infraction?: InfractionOmit
    salaryHistory?: SalaryHistoryOmit
    gradeHistory?: GradeHistoryOmit
    placement?: PlacementOmit
    recommendation?: RecommendationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BranchCountOutputType
   */

  export type BranchCountOutputType = {
    placements: number
  }

  export type BranchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    placements?: boolean | BranchCountOutputTypeCountPlacementsArgs
  }

  // Custom InputTypes
  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BranchCountOutputType
     */
    select?: BranchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BranchCountOutputType without action
   */
  export type BranchCountOutputTypeCountPlacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacementWhereInput
  }


  /**
   * Count Type UnitCountOutputType
   */

  export type UnitCountOutputType = {
    placements: number
  }

  export type UnitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    placements?: boolean | UnitCountOutputTypeCountPlacementsArgs
  }

  // Custom InputTypes
  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnitCountOutputType
     */
    select?: UnitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UnitCountOutputType without action
   */
  export type UnitCountOutputTypeCountPlacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacementWhereInput
  }


  /**
   * Count Type DivisionCountOutputType
   */

  export type DivisionCountOutputType = {
    placements: number
  }

  export type DivisionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    placements?: boolean | DivisionCountOutputTypeCountPlacementsArgs
  }

  // Custom InputTypes
  /**
   * DivisionCountOutputType without action
   */
  export type DivisionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DivisionCountOutputType
     */
    select?: DivisionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DivisionCountOutputType without action
   */
  export type DivisionCountOutputTypeCountPlacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacementWhereInput
  }


  /**
   * Count Type EducationCountOutputType
   */

  export type EducationCountOutputType = {
    employees: number
  }

  export type EducationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | EducationCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes
  /**
   * EducationCountOutputType without action
   */
  export type EducationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationCountOutputType
     */
    select?: EducationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EducationCountOutputType without action
   */
  export type EducationCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }


  /**
   * Count Type PositionCountOutputType
   */

  export type PositionCountOutputType = {
    employees: number
  }

  export type PositionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | PositionCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes
  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PositionCountOutputType
     */
    select?: PositionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }


  /**
   * Count Type BaseSalaryCountOutputType
   */

  export type BaseSalaryCountOutputType = {
    grades: number
    salaryHistories: number
  }

  export type BaseSalaryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grades?: boolean | BaseSalaryCountOutputTypeCountGradesArgs
    salaryHistories?: boolean | BaseSalaryCountOutputTypeCountSalaryHistoriesArgs
  }

  // Custom InputTypes
  /**
   * BaseSalaryCountOutputType without action
   */
  export type BaseSalaryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalaryCountOutputType
     */
    select?: BaseSalaryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BaseSalaryCountOutputType without action
   */
  export type BaseSalaryCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }

  /**
   * BaseSalaryCountOutputType without action
   */
  export type BaseSalaryCountOutputTypeCountSalaryHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryHistoryWhereInput
  }


  /**
   * Count Type GradeCountOutputType
   */

  export type GradeCountOutputType = {
    employees: number
    gradeHistories: number
    salaryHistories: number
  }

  export type GradeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | GradeCountOutputTypeCountEmployeesArgs
    gradeHistories?: boolean | GradeCountOutputTypeCountGradeHistoriesArgs
    salaryHistories?: boolean | GradeCountOutputTypeCountSalaryHistoriesArgs
  }

  // Custom InputTypes
  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeCountOutputType
     */
    select?: GradeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountGradeHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeHistoryWhereInput
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountSalaryHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryHistoryWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    employees: number
    recommendations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | UserCountOutputTypeCountEmployeesArgs
    recommendations?: boolean | UserCountOutputTypeCountRecommendationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    familyMembers: number
    infractions: number
    gradeHistories: number
    salaryHistories: number
    placements: number
    recommendations: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    familyMembers?: boolean | EmployeeCountOutputTypeCountFamilyMembersArgs
    infractions?: boolean | EmployeeCountOutputTypeCountInfractionsArgs
    gradeHistories?: boolean | EmployeeCountOutputTypeCountGradeHistoriesArgs
    salaryHistories?: boolean | EmployeeCountOutputTypeCountSalaryHistoriesArgs
    placements?: boolean | EmployeeCountOutputTypeCountPlacementsArgs
    recommendations?: boolean | EmployeeCountOutputTypeCountRecommendationsArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountFamilyMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyMemberWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountInfractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InfractionWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountGradeHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeHistoryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountSalaryHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryHistoryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPlacementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacementWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Branch
   */

  export type AggregateBranch = {
    _count: BranchCountAggregateOutputType | null
    _avg: BranchAvgAggregateOutputType | null
    _sum: BranchSumAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  export type BranchAvgAggregateOutputType = {
    branchId: number | null
  }

  export type BranchSumAggregateOutputType = {
    branchId: number | null
  }

  export type BranchMinAggregateOutputType = {
    branchId: number | null
    branchName: string | null
  }

  export type BranchMaxAggregateOutputType = {
    branchId: number | null
    branchName: string | null
  }

  export type BranchCountAggregateOutputType = {
    branchId: number
    branchName: number
    _all: number
  }


  export type BranchAvgAggregateInputType = {
    branchId?: true
  }

  export type BranchSumAggregateInputType = {
    branchId?: true
  }

  export type BranchMinAggregateInputType = {
    branchId?: true
    branchName?: true
  }

  export type BranchMaxAggregateInputType = {
    branchId?: true
    branchName?: true
  }

  export type BranchCountAggregateInputType = {
    branchId?: true
    branchName?: true
    _all?: true
  }

  export type BranchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branch to aggregate.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Branches
    **/
    _count?: true | BranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BranchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BranchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BranchMaxAggregateInputType
  }

  export type GetBranchAggregateType<T extends BranchAggregateArgs> = {
        [P in keyof T & keyof AggregateBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBranch[P]>
      : GetScalarType<T[P], AggregateBranch[P]>
  }




  export type BranchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BranchWhereInput
    orderBy?: BranchOrderByWithAggregationInput | BranchOrderByWithAggregationInput[]
    by: BranchScalarFieldEnum[] | BranchScalarFieldEnum
    having?: BranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BranchCountAggregateInputType | true
    _avg?: BranchAvgAggregateInputType
    _sum?: BranchSumAggregateInputType
    _min?: BranchMinAggregateInputType
    _max?: BranchMaxAggregateInputType
  }

  export type BranchGroupByOutputType = {
    branchId: number
    branchName: string
    _count: BranchCountAggregateOutputType | null
    _avg: BranchAvgAggregateOutputType | null
    _sum: BranchSumAggregateOutputType | null
    _min: BranchMinAggregateOutputType | null
    _max: BranchMaxAggregateOutputType | null
  }

  type GetBranchGroupByPayload<T extends BranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BranchGroupByOutputType[P]>
            : GetScalarType<T[P], BranchGroupByOutputType[P]>
        }
      >
    >


  export type BranchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    branchId?: boolean
    branchName?: boolean
    placements?: boolean | Branch$placementsArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["branch"]>



  export type BranchSelectScalar = {
    branchId?: boolean
    branchName?: boolean
  }

  export type BranchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"branchId" | "branchName", ExtArgs["result"]["branch"]>
  export type BranchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    placements?: boolean | Branch$placementsArgs<ExtArgs>
    _count?: boolean | BranchCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BranchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Branch"
    objects: {
      placements: Prisma.$PlacementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      branchId: number
      branchName: string
    }, ExtArgs["result"]["branch"]>
    composites: {}
  }

  type BranchGetPayload<S extends boolean | null | undefined | BranchDefaultArgs> = $Result.GetResult<Prisma.$BranchPayload, S>

  type BranchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BranchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BranchCountAggregateInputType | true
    }

  export interface BranchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Branch'], meta: { name: 'Branch' } }
    /**
     * Find zero or one Branch that matches the filter.
     * @param {BranchFindUniqueArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BranchFindUniqueArgs>(args: SelectSubset<T, BranchFindUniqueArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Branch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BranchFindUniqueOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BranchFindUniqueOrThrowArgs>(args: SelectSubset<T, BranchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BranchFindFirstArgs>(args?: SelectSubset<T, BranchFindFirstArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Branch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindFirstOrThrowArgs} args - Arguments to find a Branch
     * @example
     * // Get one Branch
     * const branch = await prisma.branch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BranchFindFirstOrThrowArgs>(args?: SelectSubset<T, BranchFindFirstOrThrowArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Branches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Branches
     * const branches = await prisma.branch.findMany()
     * 
     * // Get first 10 Branches
     * const branches = await prisma.branch.findMany({ take: 10 })
     * 
     * // Only select the `branchId`
     * const branchWithBranchIdOnly = await prisma.branch.findMany({ select: { branchId: true } })
     * 
     */
    findMany<T extends BranchFindManyArgs>(args?: SelectSubset<T, BranchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Branch.
     * @param {BranchCreateArgs} args - Arguments to create a Branch.
     * @example
     * // Create one Branch
     * const Branch = await prisma.branch.create({
     *   data: {
     *     // ... data to create a Branch
     *   }
     * })
     * 
     */
    create<T extends BranchCreateArgs>(args: SelectSubset<T, BranchCreateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Branches.
     * @param {BranchCreateManyArgs} args - Arguments to create many Branches.
     * @example
     * // Create many Branches
     * const branch = await prisma.branch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BranchCreateManyArgs>(args?: SelectSubset<T, BranchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Branch.
     * @param {BranchDeleteArgs} args - Arguments to delete one Branch.
     * @example
     * // Delete one Branch
     * const Branch = await prisma.branch.delete({
     *   where: {
     *     // ... filter to delete one Branch
     *   }
     * })
     * 
     */
    delete<T extends BranchDeleteArgs>(args: SelectSubset<T, BranchDeleteArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Branch.
     * @param {BranchUpdateArgs} args - Arguments to update one Branch.
     * @example
     * // Update one Branch
     * const branch = await prisma.branch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BranchUpdateArgs>(args: SelectSubset<T, BranchUpdateArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Branches.
     * @param {BranchDeleteManyArgs} args - Arguments to filter Branches to delete.
     * @example
     * // Delete a few Branches
     * const { count } = await prisma.branch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BranchDeleteManyArgs>(args?: SelectSubset<T, BranchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Branches
     * const branch = await prisma.branch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BranchUpdateManyArgs>(args: SelectSubset<T, BranchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Branch.
     * @param {BranchUpsertArgs} args - Arguments to update or create a Branch.
     * @example
     * // Update or create a Branch
     * const branch = await prisma.branch.upsert({
     *   create: {
     *     // ... data to create a Branch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Branch we want to update
     *   }
     * })
     */
    upsert<T extends BranchUpsertArgs>(args: SelectSubset<T, BranchUpsertArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Branches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchCountArgs} args - Arguments to filter Branches to count.
     * @example
     * // Count the number of Branches
     * const count = await prisma.branch.count({
     *   where: {
     *     // ... the filter for the Branches we want to count
     *   }
     * })
    **/
    count<T extends BranchCountArgs>(
      args?: Subset<T, BranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BranchAggregateArgs>(args: Subset<T, BranchAggregateArgs>): Prisma.PrismaPromise<GetBranchAggregateType<T>>

    /**
     * Group by Branch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BranchGroupByArgs['orderBy'] }
        : { orderBy?: BranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Branch model
   */
  readonly fields: BranchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Branch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BranchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    placements<T extends Branch$placementsArgs<ExtArgs> = {}>(args?: Subset<T, Branch$placementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Branch model
   */
  interface BranchFieldRefs {
    readonly branchId: FieldRef<"Branch", 'Int'>
    readonly branchName: FieldRef<"Branch", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Branch findUnique
   */
  export type BranchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findUniqueOrThrow
   */
  export type BranchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch findFirst
   */
  export type BranchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findFirstOrThrow
   */
  export type BranchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branch to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Branches.
     */
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch findMany
   */
  export type BranchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter, which Branches to fetch.
     */
    where?: BranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Branches to fetch.
     */
    orderBy?: BranchOrderByWithRelationInput | BranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Branches.
     */
    cursor?: BranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Branches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Branches.
     */
    skip?: number
    distinct?: BranchScalarFieldEnum | BranchScalarFieldEnum[]
  }

  /**
   * Branch create
   */
  export type BranchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to create a Branch.
     */
    data: XOR<BranchCreateInput, BranchUncheckedCreateInput>
  }

  /**
   * Branch createMany
   */
  export type BranchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Branches.
     */
    data: BranchCreateManyInput | BranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Branch update
   */
  export type BranchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The data needed to update a Branch.
     */
    data: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
    /**
     * Choose, which Branch to update.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch updateMany
   */
  export type BranchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Branches.
     */
    data: XOR<BranchUpdateManyMutationInput, BranchUncheckedUpdateManyInput>
    /**
     * Filter which Branches to update
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to update.
     */
    limit?: number
  }

  /**
   * Branch upsert
   */
  export type BranchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * The filter to search for the Branch to update in case it exists.
     */
    where: BranchWhereUniqueInput
    /**
     * In case the Branch found by the `where` argument doesn't exist, create a new Branch with this data.
     */
    create: XOR<BranchCreateInput, BranchUncheckedCreateInput>
    /**
     * In case the Branch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BranchUpdateInput, BranchUncheckedUpdateInput>
  }

  /**
   * Branch delete
   */
  export type BranchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
    /**
     * Filter which Branch to delete.
     */
    where: BranchWhereUniqueInput
  }

  /**
   * Branch deleteMany
   */
  export type BranchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Branches to delete
     */
    where?: BranchWhereInput
    /**
     * Limit how many Branches to delete.
     */
    limit?: number
  }

  /**
   * Branch.placements
   */
  export type Branch$placementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    where?: PlacementWhereInput
    orderBy?: PlacementOrderByWithRelationInput | PlacementOrderByWithRelationInput[]
    cursor?: PlacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlacementScalarFieldEnum | PlacementScalarFieldEnum[]
  }

  /**
   * Branch without action
   */
  export type BranchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Branch
     */
    select?: BranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Branch
     */
    omit?: BranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BranchInclude<ExtArgs> | null
  }


  /**
   * Model Unit
   */

  export type AggregateUnit = {
    _count: UnitCountAggregateOutputType | null
    _avg: UnitAvgAggregateOutputType | null
    _sum: UnitSumAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  export type UnitAvgAggregateOutputType = {
    unitId: number | null
  }

  export type UnitSumAggregateOutputType = {
    unitId: number | null
  }

  export type UnitMinAggregateOutputType = {
    unitId: number | null
    unitName: string | null
  }

  export type UnitMaxAggregateOutputType = {
    unitId: number | null
    unitName: string | null
  }

  export type UnitCountAggregateOutputType = {
    unitId: number
    unitName: number
    _all: number
  }


  export type UnitAvgAggregateInputType = {
    unitId?: true
  }

  export type UnitSumAggregateInputType = {
    unitId?: true
  }

  export type UnitMinAggregateInputType = {
    unitId?: true
    unitName?: true
  }

  export type UnitMaxAggregateInputType = {
    unitId?: true
    unitName?: true
  }

  export type UnitCountAggregateInputType = {
    unitId?: true
    unitName?: true
    _all?: true
  }

  export type UnitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Unit to aggregate.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Units
    **/
    _count?: true | UnitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UnitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UnitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnitMaxAggregateInputType
  }

  export type GetUnitAggregateType<T extends UnitAggregateArgs> = {
        [P in keyof T & keyof AggregateUnit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnit[P]>
      : GetScalarType<T[P], AggregateUnit[P]>
  }




  export type UnitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnitWhereInput
    orderBy?: UnitOrderByWithAggregationInput | UnitOrderByWithAggregationInput[]
    by: UnitScalarFieldEnum[] | UnitScalarFieldEnum
    having?: UnitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnitCountAggregateInputType | true
    _avg?: UnitAvgAggregateInputType
    _sum?: UnitSumAggregateInputType
    _min?: UnitMinAggregateInputType
    _max?: UnitMaxAggregateInputType
  }

  export type UnitGroupByOutputType = {
    unitId: number
    unitName: string
    _count: UnitCountAggregateOutputType | null
    _avg: UnitAvgAggregateOutputType | null
    _sum: UnitSumAggregateOutputType | null
    _min: UnitMinAggregateOutputType | null
    _max: UnitMaxAggregateOutputType | null
  }

  type GetUnitGroupByPayload<T extends UnitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnitGroupByOutputType[P]>
            : GetScalarType<T[P], UnitGroupByOutputType[P]>
        }
      >
    >


  export type UnitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    unitId?: boolean
    unitName?: boolean
    placements?: boolean | Unit$placementsArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unit"]>



  export type UnitSelectScalar = {
    unitId?: boolean
    unitName?: boolean
  }

  export type UnitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"unitId" | "unitName", ExtArgs["result"]["unit"]>
  export type UnitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    placements?: boolean | Unit$placementsArgs<ExtArgs>
    _count?: boolean | UnitCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UnitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Unit"
    objects: {
      placements: Prisma.$PlacementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      unitId: number
      unitName: string
    }, ExtArgs["result"]["unit"]>
    composites: {}
  }

  type UnitGetPayload<S extends boolean | null | undefined | UnitDefaultArgs> = $Result.GetResult<Prisma.$UnitPayload, S>

  type UnitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UnitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UnitCountAggregateInputType | true
    }

  export interface UnitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Unit'], meta: { name: 'Unit' } }
    /**
     * Find zero or one Unit that matches the filter.
     * @param {UnitFindUniqueArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnitFindUniqueArgs>(args: SelectSubset<T, UnitFindUniqueArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Unit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UnitFindUniqueOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnitFindUniqueOrThrowArgs>(args: SelectSubset<T, UnitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnitFindFirstArgs>(args?: SelectSubset<T, UnitFindFirstArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Unit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstOrThrowArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnitFindFirstOrThrowArgs>(args?: SelectSubset<T, UnitFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Units that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Units
     * const units = await prisma.unit.findMany()
     * 
     * // Get first 10 Units
     * const units = await prisma.unit.findMany({ take: 10 })
     * 
     * // Only select the `unitId`
     * const unitWithUnitIdOnly = await prisma.unit.findMany({ select: { unitId: true } })
     * 
     */
    findMany<T extends UnitFindManyArgs>(args?: SelectSubset<T, UnitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Unit.
     * @param {UnitCreateArgs} args - Arguments to create a Unit.
     * @example
     * // Create one Unit
     * const Unit = await prisma.unit.create({
     *   data: {
     *     // ... data to create a Unit
     *   }
     * })
     * 
     */
    create<T extends UnitCreateArgs>(args: SelectSubset<T, UnitCreateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Units.
     * @param {UnitCreateManyArgs} args - Arguments to create many Units.
     * @example
     * // Create many Units
     * const unit = await prisma.unit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnitCreateManyArgs>(args?: SelectSubset<T, UnitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Unit.
     * @param {UnitDeleteArgs} args - Arguments to delete one Unit.
     * @example
     * // Delete one Unit
     * const Unit = await prisma.unit.delete({
     *   where: {
     *     // ... filter to delete one Unit
     *   }
     * })
     * 
     */
    delete<T extends UnitDeleteArgs>(args: SelectSubset<T, UnitDeleteArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Unit.
     * @param {UnitUpdateArgs} args - Arguments to update one Unit.
     * @example
     * // Update one Unit
     * const unit = await prisma.unit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnitUpdateArgs>(args: SelectSubset<T, UnitUpdateArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Units.
     * @param {UnitDeleteManyArgs} args - Arguments to filter Units to delete.
     * @example
     * // Delete a few Units
     * const { count } = await prisma.unit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnitDeleteManyArgs>(args?: SelectSubset<T, UnitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Units
     * const unit = await prisma.unit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnitUpdateManyArgs>(args: SelectSubset<T, UnitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Unit.
     * @param {UnitUpsertArgs} args - Arguments to update or create a Unit.
     * @example
     * // Update or create a Unit
     * const unit = await prisma.unit.upsert({
     *   create: {
     *     // ... data to create a Unit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unit we want to update
     *   }
     * })
     */
    upsert<T extends UnitUpsertArgs>(args: SelectSubset<T, UnitUpsertArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitCountArgs} args - Arguments to filter Units to count.
     * @example
     * // Count the number of Units
     * const count = await prisma.unit.count({
     *   where: {
     *     // ... the filter for the Units we want to count
     *   }
     * })
    **/
    count<T extends UnitCountArgs>(
      args?: Subset<T, UnitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnitAggregateArgs>(args: Subset<T, UnitAggregateArgs>): Prisma.PrismaPromise<GetUnitAggregateType<T>>

    /**
     * Group by Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnitGroupByArgs['orderBy'] }
        : { orderBy?: UnitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Unit model
   */
  readonly fields: UnitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Unit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    placements<T extends Unit$placementsArgs<ExtArgs> = {}>(args?: Subset<T, Unit$placementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Unit model
   */
  interface UnitFieldRefs {
    readonly unitId: FieldRef<"Unit", 'Int'>
    readonly unitName: FieldRef<"Unit", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Unit findUnique
   */
  export type UnitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findUniqueOrThrow
   */
  export type UnitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit findFirst
   */
  export type UnitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findFirstOrThrow
   */
  export type UnitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Unit to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
     */
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit findMany
   */
  export type UnitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter, which Units to fetch.
     */
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
     */
    orderBy?: UnitOrderByWithRelationInput | UnitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Units.
     */
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
     */
    skip?: number
    distinct?: UnitScalarFieldEnum | UnitScalarFieldEnum[]
  }

  /**
   * Unit create
   */
  export type UnitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to create a Unit.
     */
    data: XOR<UnitCreateInput, UnitUncheckedCreateInput>
  }

  /**
   * Unit createMany
   */
  export type UnitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Units.
     */
    data: UnitCreateManyInput | UnitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Unit update
   */
  export type UnitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The data needed to update a Unit.
     */
    data: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
    /**
     * Choose, which Unit to update.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit updateMany
   */
  export type UnitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Units.
     */
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyInput>
    /**
     * Filter which Units to update
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to update.
     */
    limit?: number
  }

  /**
   * Unit upsert
   */
  export type UnitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * The filter to search for the Unit to update in case it exists.
     */
    where: UnitWhereUniqueInput
    /**
     * In case the Unit found by the `where` argument doesn't exist, create a new Unit with this data.
     */
    create: XOR<UnitCreateInput, UnitUncheckedCreateInput>
    /**
     * In case the Unit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
  }

  /**
   * Unit delete
   */
  export type UnitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
    /**
     * Filter which Unit to delete.
     */
    where: UnitWhereUniqueInput
  }

  /**
   * Unit deleteMany
   */
  export type UnitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Units to delete
     */
    where?: UnitWhereInput
    /**
     * Limit how many Units to delete.
     */
    limit?: number
  }

  /**
   * Unit.placements
   */
  export type Unit$placementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    where?: PlacementWhereInput
    orderBy?: PlacementOrderByWithRelationInput | PlacementOrderByWithRelationInput[]
    cursor?: PlacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlacementScalarFieldEnum | PlacementScalarFieldEnum[]
  }

  /**
   * Unit without action
   */
  export type UnitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Unit
     */
    select?: UnitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Unit
     */
    omit?: UnitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnitInclude<ExtArgs> | null
  }


  /**
   * Model Division
   */

  export type AggregateDivision = {
    _count: DivisionCountAggregateOutputType | null
    _avg: DivisionAvgAggregateOutputType | null
    _sum: DivisionSumAggregateOutputType | null
    _min: DivisionMinAggregateOutputType | null
    _max: DivisionMaxAggregateOutputType | null
  }

  export type DivisionAvgAggregateOutputType = {
    divisionId: number | null
  }

  export type DivisionSumAggregateOutputType = {
    divisionId: number | null
  }

  export type DivisionMinAggregateOutputType = {
    divisionId: number | null
    divisionName: string | null
  }

  export type DivisionMaxAggregateOutputType = {
    divisionId: number | null
    divisionName: string | null
  }

  export type DivisionCountAggregateOutputType = {
    divisionId: number
    divisionName: number
    _all: number
  }


  export type DivisionAvgAggregateInputType = {
    divisionId?: true
  }

  export type DivisionSumAggregateInputType = {
    divisionId?: true
  }

  export type DivisionMinAggregateInputType = {
    divisionId?: true
    divisionName?: true
  }

  export type DivisionMaxAggregateInputType = {
    divisionId?: true
    divisionName?: true
  }

  export type DivisionCountAggregateInputType = {
    divisionId?: true
    divisionName?: true
    _all?: true
  }

  export type DivisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Division to aggregate.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Divisions
    **/
    _count?: true | DivisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DivisionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DivisionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DivisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DivisionMaxAggregateInputType
  }

  export type GetDivisionAggregateType<T extends DivisionAggregateArgs> = {
        [P in keyof T & keyof AggregateDivision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDivision[P]>
      : GetScalarType<T[P], AggregateDivision[P]>
  }




  export type DivisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DivisionWhereInput
    orderBy?: DivisionOrderByWithAggregationInput | DivisionOrderByWithAggregationInput[]
    by: DivisionScalarFieldEnum[] | DivisionScalarFieldEnum
    having?: DivisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DivisionCountAggregateInputType | true
    _avg?: DivisionAvgAggregateInputType
    _sum?: DivisionSumAggregateInputType
    _min?: DivisionMinAggregateInputType
    _max?: DivisionMaxAggregateInputType
  }

  export type DivisionGroupByOutputType = {
    divisionId: number
    divisionName: string
    _count: DivisionCountAggregateOutputType | null
    _avg: DivisionAvgAggregateOutputType | null
    _sum: DivisionSumAggregateOutputType | null
    _min: DivisionMinAggregateOutputType | null
    _max: DivisionMaxAggregateOutputType | null
  }

  type GetDivisionGroupByPayload<T extends DivisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DivisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DivisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DivisionGroupByOutputType[P]>
            : GetScalarType<T[P], DivisionGroupByOutputType[P]>
        }
      >
    >


  export type DivisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    divisionId?: boolean
    divisionName?: boolean
    placements?: boolean | Division$placementsArgs<ExtArgs>
    _count?: boolean | DivisionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["division"]>



  export type DivisionSelectScalar = {
    divisionId?: boolean
    divisionName?: boolean
  }

  export type DivisionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"divisionId" | "divisionName", ExtArgs["result"]["division"]>
  export type DivisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    placements?: boolean | Division$placementsArgs<ExtArgs>
    _count?: boolean | DivisionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DivisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Division"
    objects: {
      placements: Prisma.$PlacementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      divisionId: number
      divisionName: string
    }, ExtArgs["result"]["division"]>
    composites: {}
  }

  type DivisionGetPayload<S extends boolean | null | undefined | DivisionDefaultArgs> = $Result.GetResult<Prisma.$DivisionPayload, S>

  type DivisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DivisionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DivisionCountAggregateInputType | true
    }

  export interface DivisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Division'], meta: { name: 'Division' } }
    /**
     * Find zero or one Division that matches the filter.
     * @param {DivisionFindUniqueArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DivisionFindUniqueArgs>(args: SelectSubset<T, DivisionFindUniqueArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Division that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DivisionFindUniqueOrThrowArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DivisionFindUniqueOrThrowArgs>(args: SelectSubset<T, DivisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Division that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindFirstArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DivisionFindFirstArgs>(args?: SelectSubset<T, DivisionFindFirstArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Division that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindFirstOrThrowArgs} args - Arguments to find a Division
     * @example
     * // Get one Division
     * const division = await prisma.division.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DivisionFindFirstOrThrowArgs>(args?: SelectSubset<T, DivisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Divisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Divisions
     * const divisions = await prisma.division.findMany()
     * 
     * // Get first 10 Divisions
     * const divisions = await prisma.division.findMany({ take: 10 })
     * 
     * // Only select the `divisionId`
     * const divisionWithDivisionIdOnly = await prisma.division.findMany({ select: { divisionId: true } })
     * 
     */
    findMany<T extends DivisionFindManyArgs>(args?: SelectSubset<T, DivisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Division.
     * @param {DivisionCreateArgs} args - Arguments to create a Division.
     * @example
     * // Create one Division
     * const Division = await prisma.division.create({
     *   data: {
     *     // ... data to create a Division
     *   }
     * })
     * 
     */
    create<T extends DivisionCreateArgs>(args: SelectSubset<T, DivisionCreateArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Divisions.
     * @param {DivisionCreateManyArgs} args - Arguments to create many Divisions.
     * @example
     * // Create many Divisions
     * const division = await prisma.division.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DivisionCreateManyArgs>(args?: SelectSubset<T, DivisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Division.
     * @param {DivisionDeleteArgs} args - Arguments to delete one Division.
     * @example
     * // Delete one Division
     * const Division = await prisma.division.delete({
     *   where: {
     *     // ... filter to delete one Division
     *   }
     * })
     * 
     */
    delete<T extends DivisionDeleteArgs>(args: SelectSubset<T, DivisionDeleteArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Division.
     * @param {DivisionUpdateArgs} args - Arguments to update one Division.
     * @example
     * // Update one Division
     * const division = await prisma.division.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DivisionUpdateArgs>(args: SelectSubset<T, DivisionUpdateArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Divisions.
     * @param {DivisionDeleteManyArgs} args - Arguments to filter Divisions to delete.
     * @example
     * // Delete a few Divisions
     * const { count } = await prisma.division.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DivisionDeleteManyArgs>(args?: SelectSubset<T, DivisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Divisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Divisions
     * const division = await prisma.division.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DivisionUpdateManyArgs>(args: SelectSubset<T, DivisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Division.
     * @param {DivisionUpsertArgs} args - Arguments to update or create a Division.
     * @example
     * // Update or create a Division
     * const division = await prisma.division.upsert({
     *   create: {
     *     // ... data to create a Division
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Division we want to update
     *   }
     * })
     */
    upsert<T extends DivisionUpsertArgs>(args: SelectSubset<T, DivisionUpsertArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Divisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionCountArgs} args - Arguments to filter Divisions to count.
     * @example
     * // Count the number of Divisions
     * const count = await prisma.division.count({
     *   where: {
     *     // ... the filter for the Divisions we want to count
     *   }
     * })
    **/
    count<T extends DivisionCountArgs>(
      args?: Subset<T, DivisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DivisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Division.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DivisionAggregateArgs>(args: Subset<T, DivisionAggregateArgs>): Prisma.PrismaPromise<GetDivisionAggregateType<T>>

    /**
     * Group by Division.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DivisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DivisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DivisionGroupByArgs['orderBy'] }
        : { orderBy?: DivisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DivisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDivisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Division model
   */
  readonly fields: DivisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Division.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DivisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    placements<T extends Division$placementsArgs<ExtArgs> = {}>(args?: Subset<T, Division$placementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Division model
   */
  interface DivisionFieldRefs {
    readonly divisionId: FieldRef<"Division", 'Int'>
    readonly divisionName: FieldRef<"Division", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Division findUnique
   */
  export type DivisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division findUniqueOrThrow
   */
  export type DivisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division findFirst
   */
  export type DivisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Divisions.
     */
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division findFirstOrThrow
   */
  export type DivisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Division to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Divisions.
     */
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division findMany
   */
  export type DivisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter, which Divisions to fetch.
     */
    where?: DivisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Divisions to fetch.
     */
    orderBy?: DivisionOrderByWithRelationInput | DivisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Divisions.
     */
    cursor?: DivisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Divisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Divisions.
     */
    skip?: number
    distinct?: DivisionScalarFieldEnum | DivisionScalarFieldEnum[]
  }

  /**
   * Division create
   */
  export type DivisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The data needed to create a Division.
     */
    data: XOR<DivisionCreateInput, DivisionUncheckedCreateInput>
  }

  /**
   * Division createMany
   */
  export type DivisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Divisions.
     */
    data: DivisionCreateManyInput | DivisionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Division update
   */
  export type DivisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The data needed to update a Division.
     */
    data: XOR<DivisionUpdateInput, DivisionUncheckedUpdateInput>
    /**
     * Choose, which Division to update.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division updateMany
   */
  export type DivisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Divisions.
     */
    data: XOR<DivisionUpdateManyMutationInput, DivisionUncheckedUpdateManyInput>
    /**
     * Filter which Divisions to update
     */
    where?: DivisionWhereInput
    /**
     * Limit how many Divisions to update.
     */
    limit?: number
  }

  /**
   * Division upsert
   */
  export type DivisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * The filter to search for the Division to update in case it exists.
     */
    where: DivisionWhereUniqueInput
    /**
     * In case the Division found by the `where` argument doesn't exist, create a new Division with this data.
     */
    create: XOR<DivisionCreateInput, DivisionUncheckedCreateInput>
    /**
     * In case the Division was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DivisionUpdateInput, DivisionUncheckedUpdateInput>
  }

  /**
   * Division delete
   */
  export type DivisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
    /**
     * Filter which Division to delete.
     */
    where: DivisionWhereUniqueInput
  }

  /**
   * Division deleteMany
   */
  export type DivisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Divisions to delete
     */
    where?: DivisionWhereInput
    /**
     * Limit how many Divisions to delete.
     */
    limit?: number
  }

  /**
   * Division.placements
   */
  export type Division$placementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    where?: PlacementWhereInput
    orderBy?: PlacementOrderByWithRelationInput | PlacementOrderByWithRelationInput[]
    cursor?: PlacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlacementScalarFieldEnum | PlacementScalarFieldEnum[]
  }

  /**
   * Division without action
   */
  export type DivisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Division
     */
    select?: DivisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Division
     */
    omit?: DivisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DivisionInclude<ExtArgs> | null
  }


  /**
   * Model Education
   */

  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationAvgAggregateOutputType = {
    educationId: number | null
  }

  export type EducationSumAggregateOutputType = {
    educationId: number | null
  }

  export type EducationMinAggregateOutputType = {
    educationId: number | null
    level: string | null
    major: string | null
  }

  export type EducationMaxAggregateOutputType = {
    educationId: number | null
    level: string | null
    major: string | null
  }

  export type EducationCountAggregateOutputType = {
    educationId: number
    level: number
    major: number
    _all: number
  }


  export type EducationAvgAggregateInputType = {
    educationId?: true
  }

  export type EducationSumAggregateInputType = {
    educationId?: true
  }

  export type EducationMinAggregateInputType = {
    educationId?: true
    level?: true
    major?: true
  }

  export type EducationMaxAggregateInputType = {
    educationId?: true
    level?: true
    major?: true
  }

  export type EducationCountAggregateInputType = {
    educationId?: true
    level?: true
    major?: true
    _all?: true
  }

  export type EducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EducationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EducationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithAggregationInput | EducationOrderByWithAggregationInput[]
    by: EducationScalarFieldEnum[] | EducationScalarFieldEnum
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _avg?: EducationAvgAggregateInputType
    _sum?: EducationSumAggregateInputType
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }

  export type EducationGroupByOutputType = {
    educationId: number
    level: string
    major: string
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    educationId?: boolean
    level?: boolean
    major?: boolean
    employees?: boolean | Education$employeesArgs<ExtArgs>
    _count?: boolean | EducationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>



  export type EducationSelectScalar = {
    educationId?: boolean
    level?: boolean
    major?: boolean
  }

  export type EducationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"educationId" | "level" | "major", ExtArgs["result"]["education"]>
  export type EducationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | Education$employeesArgs<ExtArgs>
    _count?: boolean | EducationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Education"
    objects: {
      employees: Prisma.$EmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      educationId: number
      level: string
      major: string
    }, ExtArgs["result"]["education"]>
    composites: {}
  }

  type EducationGetPayload<S extends boolean | null | undefined | EducationDefaultArgs> = $Result.GetResult<Prisma.$EducationPayload, S>

  type EducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EducationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Education'], meta: { name: 'Education' } }
    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EducationFindUniqueArgs>(args: SelectSubset<T, EducationFindUniqueArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Education that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(args: SelectSubset<T, EducationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EducationFindFirstArgs>(args?: SelectSubset<T, EducationFindFirstArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Education that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(args?: SelectSubset<T, EducationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `educationId`
     * const educationWithEducationIdOnly = await prisma.education.findMany({ select: { educationId: true } })
     * 
     */
    findMany<T extends EducationFindManyArgs>(args?: SelectSubset<T, EducationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
     */
    create<T extends EducationCreateArgs>(args: SelectSubset<T, EducationCreateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Educations.
     * @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     * @example
     * // Create many Educations
     * const education = await prisma.education.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EducationCreateManyArgs>(args?: SelectSubset<T, EducationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
     */
    delete<T extends EducationDeleteArgs>(args: SelectSubset<T, EducationDeleteArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EducationUpdateArgs>(args: SelectSubset<T, EducationUpdateArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EducationDeleteManyArgs>(args?: SelectSubset<T, EducationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EducationUpdateManyArgs>(args: SelectSubset<T, EducationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
     */
    upsert<T extends EducationUpsertArgs>(args: SelectSubset<T, EducationUpsertArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): Prisma.PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Education model
   */
  readonly fields: EducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employees<T extends Education$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Education$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Education model
   */
  interface EducationFieldRefs {
    readonly educationId: FieldRef<"Education", 'Int'>
    readonly level: FieldRef<"Education", 'String'>
    readonly major: FieldRef<"Education", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Education findUnique
   */
  export type EducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findFirst
   */
  export type EducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education findMany
   */
  export type EducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }

  /**
   * Education create
   */
  export type EducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }

  /**
   * Education createMany
   */
  export type EducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Education update
   */
  export type EducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to update.
     */
    limit?: number
  }

  /**
   * Education upsert
   */
  export type EducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }

  /**
   * Education delete
   */
  export type EducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
    /**
     * Limit how many Educations to delete.
     */
    limit?: number
  }

  /**
   * Education.employees
   */
  export type Education$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Education without action
   */
  export type EducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Education
     */
    omit?: EducationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EducationInclude<ExtArgs> | null
  }


  /**
   * Model Position
   */

  export type AggregatePosition = {
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  export type PositionAvgAggregateOutputType = {
    positionId: number | null
  }

  export type PositionSumAggregateOutputType = {
    positionId: number | null
  }

  export type PositionMinAggregateOutputType = {
    positionId: number | null
    positionName: string | null
  }

  export type PositionMaxAggregateOutputType = {
    positionId: number | null
    positionName: string | null
  }

  export type PositionCountAggregateOutputType = {
    positionId: number
    positionName: number
    _all: number
  }


  export type PositionAvgAggregateInputType = {
    positionId?: true
  }

  export type PositionSumAggregateInputType = {
    positionId?: true
  }

  export type PositionMinAggregateInputType = {
    positionId?: true
    positionName?: true
  }

  export type PositionMaxAggregateInputType = {
    positionId?: true
    positionName?: true
  }

  export type PositionCountAggregateInputType = {
    positionId?: true
    positionName?: true
    _all?: true
  }

  export type PositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Position to aggregate.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Positions
    **/
    _count?: true | PositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PositionMaxAggregateInputType
  }

  export type GetPositionAggregateType<T extends PositionAggregateArgs> = {
        [P in keyof T & keyof AggregatePosition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosition[P]>
      : GetScalarType<T[P], AggregatePosition[P]>
  }




  export type PositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithAggregationInput | PositionOrderByWithAggregationInput[]
    by: PositionScalarFieldEnum[] | PositionScalarFieldEnum
    having?: PositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PositionCountAggregateInputType | true
    _avg?: PositionAvgAggregateInputType
    _sum?: PositionSumAggregateInputType
    _min?: PositionMinAggregateInputType
    _max?: PositionMaxAggregateInputType
  }

  export type PositionGroupByOutputType = {
    positionId: number
    positionName: string
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  type GetPositionGroupByPayload<T extends PositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PositionGroupByOutputType[P]>
            : GetScalarType<T[P], PositionGroupByOutputType[P]>
        }
      >
    >


  export type PositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    positionId?: boolean
    positionName?: boolean
    employees?: boolean | Position$employeesArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>



  export type PositionSelectScalar = {
    positionId?: boolean
    positionName?: boolean
  }

  export type PositionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"positionId" | "positionName", ExtArgs["result"]["position"]>
  export type PositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | Position$employeesArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Position"
    objects: {
      employees: Prisma.$EmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      positionId: number
      positionName: string
    }, ExtArgs["result"]["position"]>
    composites: {}
  }

  type PositionGetPayload<S extends boolean | null | undefined | PositionDefaultArgs> = $Result.GetResult<Prisma.$PositionPayload, S>

  type PositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PositionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PositionCountAggregateInputType | true
    }

  export interface PositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Position'], meta: { name: 'Position' } }
    /**
     * Find zero or one Position that matches the filter.
     * @param {PositionFindUniqueArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PositionFindUniqueArgs>(args: SelectSubset<T, PositionFindUniqueArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Position that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PositionFindUniqueOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PositionFindUniqueOrThrowArgs>(args: SelectSubset<T, PositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Position that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PositionFindFirstArgs>(args?: SelectSubset<T, PositionFindFirstArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Position that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PositionFindFirstOrThrowArgs>(args?: SelectSubset<T, PositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Positions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Positions
     * const positions = await prisma.position.findMany()
     * 
     * // Get first 10 Positions
     * const positions = await prisma.position.findMany({ take: 10 })
     * 
     * // Only select the `positionId`
     * const positionWithPositionIdOnly = await prisma.position.findMany({ select: { positionId: true } })
     * 
     */
    findMany<T extends PositionFindManyArgs>(args?: SelectSubset<T, PositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Position.
     * @param {PositionCreateArgs} args - Arguments to create a Position.
     * @example
     * // Create one Position
     * const Position = await prisma.position.create({
     *   data: {
     *     // ... data to create a Position
     *   }
     * })
     * 
     */
    create<T extends PositionCreateArgs>(args: SelectSubset<T, PositionCreateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Positions.
     * @param {PositionCreateManyArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PositionCreateManyArgs>(args?: SelectSubset<T, PositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Position.
     * @param {PositionDeleteArgs} args - Arguments to delete one Position.
     * @example
     * // Delete one Position
     * const Position = await prisma.position.delete({
     *   where: {
     *     // ... filter to delete one Position
     *   }
     * })
     * 
     */
    delete<T extends PositionDeleteArgs>(args: SelectSubset<T, PositionDeleteArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Position.
     * @param {PositionUpdateArgs} args - Arguments to update one Position.
     * @example
     * // Update one Position
     * const position = await prisma.position.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PositionUpdateArgs>(args: SelectSubset<T, PositionUpdateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Positions.
     * @param {PositionDeleteManyArgs} args - Arguments to filter Positions to delete.
     * @example
     * // Delete a few Positions
     * const { count } = await prisma.position.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PositionDeleteManyArgs>(args?: SelectSubset<T, PositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PositionUpdateManyArgs>(args: SelectSubset<T, PositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Position.
     * @param {PositionUpsertArgs} args - Arguments to update or create a Position.
     * @example
     * // Update or create a Position
     * const position = await prisma.position.upsert({
     *   create: {
     *     // ... data to create a Position
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Position we want to update
     *   }
     * })
     */
    upsert<T extends PositionUpsertArgs>(args: SelectSubset<T, PositionUpsertArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionCountArgs} args - Arguments to filter Positions to count.
     * @example
     * // Count the number of Positions
     * const count = await prisma.position.count({
     *   where: {
     *     // ... the filter for the Positions we want to count
     *   }
     * })
    **/
    count<T extends PositionCountArgs>(
      args?: Subset<T, PositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PositionAggregateArgs>(args: Subset<T, PositionAggregateArgs>): Prisma.PrismaPromise<GetPositionAggregateType<T>>

    /**
     * Group by Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PositionGroupByArgs['orderBy'] }
        : { orderBy?: PositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Position model
   */
  readonly fields: PositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Position.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employees<T extends Position$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Position$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Position model
   */
  interface PositionFieldRefs {
    readonly positionId: FieldRef<"Position", 'Int'>
    readonly positionName: FieldRef<"Position", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Position findUnique
   */
  export type PositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findUniqueOrThrow
   */
  export type PositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findFirst
   */
  export type PositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findFirstOrThrow
   */
  export type PositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findMany
   */
  export type PositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Positions to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position create
   */
  export type PositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Position.
     */
    data: XOR<PositionCreateInput, PositionUncheckedCreateInput>
  }

  /**
   * Position createMany
   */
  export type PositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Position update
   */
  export type PositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Position.
     */
    data: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
    /**
     * Choose, which Position to update.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position updateMany
   */
  export type PositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to update.
     */
    limit?: number
  }

  /**
   * Position upsert
   */
  export type PositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Position to update in case it exists.
     */
    where: PositionWhereUniqueInput
    /**
     * In case the Position found by the `where` argument doesn't exist, create a new Position with this data.
     */
    create: XOR<PositionCreateInput, PositionUncheckedCreateInput>
    /**
     * In case the Position was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
  }

  /**
   * Position delete
   */
  export type PositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter which Position to delete.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position deleteMany
   */
  export type PositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Positions to delete
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to delete.
     */
    limit?: number
  }

  /**
   * Position.employees
   */
  export type Position$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Position without action
   */
  export type PositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
  }


  /**
   * Model BaseSalary
   */

  export type AggregateBaseSalary = {
    _count: BaseSalaryCountAggregateOutputType | null
    _avg: BaseSalaryAvgAggregateOutputType | null
    _sum: BaseSalarySumAggregateOutputType | null
    _min: BaseSalaryMinAggregateOutputType | null
    _max: BaseSalaryMaxAggregateOutputType | null
  }

  export type BaseSalaryAvgAggregateOutputType = {
    baseSalaryId: number | null
    amount: number | null
  }

  export type BaseSalarySumAggregateOutputType = {
    baseSalaryId: number | null
    amount: number | null
  }

  export type BaseSalaryMinAggregateOutputType = {
    baseSalaryId: number | null
    amount: number | null
    type: string | null
    yearsOfService: string | null
  }

  export type BaseSalaryMaxAggregateOutputType = {
    baseSalaryId: number | null
    amount: number | null
    type: string | null
    yearsOfService: string | null
  }

  export type BaseSalaryCountAggregateOutputType = {
    baseSalaryId: number
    amount: number
    type: number
    yearsOfService: number
    _all: number
  }


  export type BaseSalaryAvgAggregateInputType = {
    baseSalaryId?: true
    amount?: true
  }

  export type BaseSalarySumAggregateInputType = {
    baseSalaryId?: true
    amount?: true
  }

  export type BaseSalaryMinAggregateInputType = {
    baseSalaryId?: true
    amount?: true
    type?: true
    yearsOfService?: true
  }

  export type BaseSalaryMaxAggregateInputType = {
    baseSalaryId?: true
    amount?: true
    type?: true
    yearsOfService?: true
  }

  export type BaseSalaryCountAggregateInputType = {
    baseSalaryId?: true
    amount?: true
    type?: true
    yearsOfService?: true
    _all?: true
  }

  export type BaseSalaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BaseSalary to aggregate.
     */
    where?: BaseSalaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BaseSalaries to fetch.
     */
    orderBy?: BaseSalaryOrderByWithRelationInput | BaseSalaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BaseSalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BaseSalaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BaseSalaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BaseSalaries
    **/
    _count?: true | BaseSalaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BaseSalaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BaseSalarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BaseSalaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BaseSalaryMaxAggregateInputType
  }

  export type GetBaseSalaryAggregateType<T extends BaseSalaryAggregateArgs> = {
        [P in keyof T & keyof AggregateBaseSalary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBaseSalary[P]>
      : GetScalarType<T[P], AggregateBaseSalary[P]>
  }




  export type BaseSalaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BaseSalaryWhereInput
    orderBy?: BaseSalaryOrderByWithAggregationInput | BaseSalaryOrderByWithAggregationInput[]
    by: BaseSalaryScalarFieldEnum[] | BaseSalaryScalarFieldEnum
    having?: BaseSalaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BaseSalaryCountAggregateInputType | true
    _avg?: BaseSalaryAvgAggregateInputType
    _sum?: BaseSalarySumAggregateInputType
    _min?: BaseSalaryMinAggregateInputType
    _max?: BaseSalaryMaxAggregateInputType
  }

  export type BaseSalaryGroupByOutputType = {
    baseSalaryId: number
    amount: number
    type: string
    yearsOfService: string | null
    _count: BaseSalaryCountAggregateOutputType | null
    _avg: BaseSalaryAvgAggregateOutputType | null
    _sum: BaseSalarySumAggregateOutputType | null
    _min: BaseSalaryMinAggregateOutputType | null
    _max: BaseSalaryMaxAggregateOutputType | null
  }

  type GetBaseSalaryGroupByPayload<T extends BaseSalaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BaseSalaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BaseSalaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BaseSalaryGroupByOutputType[P]>
            : GetScalarType<T[P], BaseSalaryGroupByOutputType[P]>
        }
      >
    >


  export type BaseSalarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    baseSalaryId?: boolean
    amount?: boolean
    type?: boolean
    yearsOfService?: boolean
    grades?: boolean | BaseSalary$gradesArgs<ExtArgs>
    salaryHistories?: boolean | BaseSalary$salaryHistoriesArgs<ExtArgs>
    _count?: boolean | BaseSalaryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["baseSalary"]>



  export type BaseSalarySelectScalar = {
    baseSalaryId?: boolean
    amount?: boolean
    type?: boolean
    yearsOfService?: boolean
  }

  export type BaseSalaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"baseSalaryId" | "amount" | "type" | "yearsOfService", ExtArgs["result"]["baseSalary"]>
  export type BaseSalaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grades?: boolean | BaseSalary$gradesArgs<ExtArgs>
    salaryHistories?: boolean | BaseSalary$salaryHistoriesArgs<ExtArgs>
    _count?: boolean | BaseSalaryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BaseSalaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BaseSalary"
    objects: {
      grades: Prisma.$GradePayload<ExtArgs>[]
      salaryHistories: Prisma.$SalaryHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      baseSalaryId: number
      amount: number
      type: string
      yearsOfService: string | null
    }, ExtArgs["result"]["baseSalary"]>
    composites: {}
  }

  type BaseSalaryGetPayload<S extends boolean | null | undefined | BaseSalaryDefaultArgs> = $Result.GetResult<Prisma.$BaseSalaryPayload, S>

  type BaseSalaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BaseSalaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BaseSalaryCountAggregateInputType | true
    }

  export interface BaseSalaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BaseSalary'], meta: { name: 'BaseSalary' } }
    /**
     * Find zero or one BaseSalary that matches the filter.
     * @param {BaseSalaryFindUniqueArgs} args - Arguments to find a BaseSalary
     * @example
     * // Get one BaseSalary
     * const baseSalary = await prisma.baseSalary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BaseSalaryFindUniqueArgs>(args: SelectSubset<T, BaseSalaryFindUniqueArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BaseSalary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BaseSalaryFindUniqueOrThrowArgs} args - Arguments to find a BaseSalary
     * @example
     * // Get one BaseSalary
     * const baseSalary = await prisma.baseSalary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BaseSalaryFindUniqueOrThrowArgs>(args: SelectSubset<T, BaseSalaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BaseSalary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaseSalaryFindFirstArgs} args - Arguments to find a BaseSalary
     * @example
     * // Get one BaseSalary
     * const baseSalary = await prisma.baseSalary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BaseSalaryFindFirstArgs>(args?: SelectSubset<T, BaseSalaryFindFirstArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BaseSalary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaseSalaryFindFirstOrThrowArgs} args - Arguments to find a BaseSalary
     * @example
     * // Get one BaseSalary
     * const baseSalary = await prisma.baseSalary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BaseSalaryFindFirstOrThrowArgs>(args?: SelectSubset<T, BaseSalaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BaseSalaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaseSalaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BaseSalaries
     * const baseSalaries = await prisma.baseSalary.findMany()
     * 
     * // Get first 10 BaseSalaries
     * const baseSalaries = await prisma.baseSalary.findMany({ take: 10 })
     * 
     * // Only select the `baseSalaryId`
     * const baseSalaryWithBaseSalaryIdOnly = await prisma.baseSalary.findMany({ select: { baseSalaryId: true } })
     * 
     */
    findMany<T extends BaseSalaryFindManyArgs>(args?: SelectSubset<T, BaseSalaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BaseSalary.
     * @param {BaseSalaryCreateArgs} args - Arguments to create a BaseSalary.
     * @example
     * // Create one BaseSalary
     * const BaseSalary = await prisma.baseSalary.create({
     *   data: {
     *     // ... data to create a BaseSalary
     *   }
     * })
     * 
     */
    create<T extends BaseSalaryCreateArgs>(args: SelectSubset<T, BaseSalaryCreateArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BaseSalaries.
     * @param {BaseSalaryCreateManyArgs} args - Arguments to create many BaseSalaries.
     * @example
     * // Create many BaseSalaries
     * const baseSalary = await prisma.baseSalary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BaseSalaryCreateManyArgs>(args?: SelectSubset<T, BaseSalaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BaseSalary.
     * @param {BaseSalaryDeleteArgs} args - Arguments to delete one BaseSalary.
     * @example
     * // Delete one BaseSalary
     * const BaseSalary = await prisma.baseSalary.delete({
     *   where: {
     *     // ... filter to delete one BaseSalary
     *   }
     * })
     * 
     */
    delete<T extends BaseSalaryDeleteArgs>(args: SelectSubset<T, BaseSalaryDeleteArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BaseSalary.
     * @param {BaseSalaryUpdateArgs} args - Arguments to update one BaseSalary.
     * @example
     * // Update one BaseSalary
     * const baseSalary = await prisma.baseSalary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BaseSalaryUpdateArgs>(args: SelectSubset<T, BaseSalaryUpdateArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BaseSalaries.
     * @param {BaseSalaryDeleteManyArgs} args - Arguments to filter BaseSalaries to delete.
     * @example
     * // Delete a few BaseSalaries
     * const { count } = await prisma.baseSalary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BaseSalaryDeleteManyArgs>(args?: SelectSubset<T, BaseSalaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BaseSalaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaseSalaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BaseSalaries
     * const baseSalary = await prisma.baseSalary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BaseSalaryUpdateManyArgs>(args: SelectSubset<T, BaseSalaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BaseSalary.
     * @param {BaseSalaryUpsertArgs} args - Arguments to update or create a BaseSalary.
     * @example
     * // Update or create a BaseSalary
     * const baseSalary = await prisma.baseSalary.upsert({
     *   create: {
     *     // ... data to create a BaseSalary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BaseSalary we want to update
     *   }
     * })
     */
    upsert<T extends BaseSalaryUpsertArgs>(args: SelectSubset<T, BaseSalaryUpsertArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BaseSalaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaseSalaryCountArgs} args - Arguments to filter BaseSalaries to count.
     * @example
     * // Count the number of BaseSalaries
     * const count = await prisma.baseSalary.count({
     *   where: {
     *     // ... the filter for the BaseSalaries we want to count
     *   }
     * })
    **/
    count<T extends BaseSalaryCountArgs>(
      args?: Subset<T, BaseSalaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BaseSalaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BaseSalary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaseSalaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BaseSalaryAggregateArgs>(args: Subset<T, BaseSalaryAggregateArgs>): Prisma.PrismaPromise<GetBaseSalaryAggregateType<T>>

    /**
     * Group by BaseSalary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BaseSalaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BaseSalaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BaseSalaryGroupByArgs['orderBy'] }
        : { orderBy?: BaseSalaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BaseSalaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBaseSalaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BaseSalary model
   */
  readonly fields: BaseSalaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BaseSalary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BaseSalaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grades<T extends BaseSalary$gradesArgs<ExtArgs> = {}>(args?: Subset<T, BaseSalary$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryHistories<T extends BaseSalary$salaryHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, BaseSalary$salaryHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BaseSalary model
   */
  interface BaseSalaryFieldRefs {
    readonly baseSalaryId: FieldRef<"BaseSalary", 'Int'>
    readonly amount: FieldRef<"BaseSalary", 'Int'>
    readonly type: FieldRef<"BaseSalary", 'String'>
    readonly yearsOfService: FieldRef<"BaseSalary", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BaseSalary findUnique
   */
  export type BaseSalaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * Filter, which BaseSalary to fetch.
     */
    where: BaseSalaryWhereUniqueInput
  }

  /**
   * BaseSalary findUniqueOrThrow
   */
  export type BaseSalaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * Filter, which BaseSalary to fetch.
     */
    where: BaseSalaryWhereUniqueInput
  }

  /**
   * BaseSalary findFirst
   */
  export type BaseSalaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * Filter, which BaseSalary to fetch.
     */
    where?: BaseSalaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BaseSalaries to fetch.
     */
    orderBy?: BaseSalaryOrderByWithRelationInput | BaseSalaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BaseSalaries.
     */
    cursor?: BaseSalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BaseSalaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BaseSalaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BaseSalaries.
     */
    distinct?: BaseSalaryScalarFieldEnum | BaseSalaryScalarFieldEnum[]
  }

  /**
   * BaseSalary findFirstOrThrow
   */
  export type BaseSalaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * Filter, which BaseSalary to fetch.
     */
    where?: BaseSalaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BaseSalaries to fetch.
     */
    orderBy?: BaseSalaryOrderByWithRelationInput | BaseSalaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BaseSalaries.
     */
    cursor?: BaseSalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BaseSalaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BaseSalaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BaseSalaries.
     */
    distinct?: BaseSalaryScalarFieldEnum | BaseSalaryScalarFieldEnum[]
  }

  /**
   * BaseSalary findMany
   */
  export type BaseSalaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * Filter, which BaseSalaries to fetch.
     */
    where?: BaseSalaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BaseSalaries to fetch.
     */
    orderBy?: BaseSalaryOrderByWithRelationInput | BaseSalaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BaseSalaries.
     */
    cursor?: BaseSalaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BaseSalaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BaseSalaries.
     */
    skip?: number
    distinct?: BaseSalaryScalarFieldEnum | BaseSalaryScalarFieldEnum[]
  }

  /**
   * BaseSalary create
   */
  export type BaseSalaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * The data needed to create a BaseSalary.
     */
    data: XOR<BaseSalaryCreateInput, BaseSalaryUncheckedCreateInput>
  }

  /**
   * BaseSalary createMany
   */
  export type BaseSalaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BaseSalaries.
     */
    data: BaseSalaryCreateManyInput | BaseSalaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BaseSalary update
   */
  export type BaseSalaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * The data needed to update a BaseSalary.
     */
    data: XOR<BaseSalaryUpdateInput, BaseSalaryUncheckedUpdateInput>
    /**
     * Choose, which BaseSalary to update.
     */
    where: BaseSalaryWhereUniqueInput
  }

  /**
   * BaseSalary updateMany
   */
  export type BaseSalaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BaseSalaries.
     */
    data: XOR<BaseSalaryUpdateManyMutationInput, BaseSalaryUncheckedUpdateManyInput>
    /**
     * Filter which BaseSalaries to update
     */
    where?: BaseSalaryWhereInput
    /**
     * Limit how many BaseSalaries to update.
     */
    limit?: number
  }

  /**
   * BaseSalary upsert
   */
  export type BaseSalaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * The filter to search for the BaseSalary to update in case it exists.
     */
    where: BaseSalaryWhereUniqueInput
    /**
     * In case the BaseSalary found by the `where` argument doesn't exist, create a new BaseSalary with this data.
     */
    create: XOR<BaseSalaryCreateInput, BaseSalaryUncheckedCreateInput>
    /**
     * In case the BaseSalary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BaseSalaryUpdateInput, BaseSalaryUncheckedUpdateInput>
  }

  /**
   * BaseSalary delete
   */
  export type BaseSalaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
    /**
     * Filter which BaseSalary to delete.
     */
    where: BaseSalaryWhereUniqueInput
  }

  /**
   * BaseSalary deleteMany
   */
  export type BaseSalaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BaseSalaries to delete
     */
    where?: BaseSalaryWhereInput
    /**
     * Limit how many BaseSalaries to delete.
     */
    limit?: number
  }

  /**
   * BaseSalary.grades
   */
  export type BaseSalary$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * BaseSalary.salaryHistories
   */
  export type BaseSalary$salaryHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    where?: SalaryHistoryWhereInput
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    cursor?: SalaryHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * BaseSalary without action
   */
  export type BaseSalaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BaseSalary
     */
    select?: BaseSalarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the BaseSalary
     */
    omit?: BaseSalaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BaseSalaryInclude<ExtArgs> | null
  }


  /**
   * Model Grade
   */

  export type AggregateGrade = {
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  export type GradeAvgAggregateOutputType = {
    gradeId: number | null
    baseSalaryId: number | null
  }

  export type GradeSumAggregateOutputType = {
    gradeId: number | null
    baseSalaryId: number | null
  }

  export type GradeMinAggregateOutputType = {
    gradeId: number | null
    baseSalaryId: number | null
    title: string | null
    grade: string | null
  }

  export type GradeMaxAggregateOutputType = {
    gradeId: number | null
    baseSalaryId: number | null
    title: string | null
    grade: string | null
  }

  export type GradeCountAggregateOutputType = {
    gradeId: number
    baseSalaryId: number
    title: number
    grade: number
    _all: number
  }


  export type GradeAvgAggregateInputType = {
    gradeId?: true
    baseSalaryId?: true
  }

  export type GradeSumAggregateInputType = {
    gradeId?: true
    baseSalaryId?: true
  }

  export type GradeMinAggregateInputType = {
    gradeId?: true
    baseSalaryId?: true
    title?: true
    grade?: true
  }

  export type GradeMaxAggregateInputType = {
    gradeId?: true
    baseSalaryId?: true
    title?: true
    grade?: true
  }

  export type GradeCountAggregateInputType = {
    gradeId?: true
    baseSalaryId?: true
    title?: true
    grade?: true
    _all?: true
  }

  export type GradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grade to aggregate.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grades
    **/
    _count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }




  export type GradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithAggregationInput | GradeOrderByWithAggregationInput[]
    by: GradeScalarFieldEnum[] | GradeScalarFieldEnum
    having?: GradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeCountAggregateInputType | true
    _avg?: GradeAvgAggregateInputType
    _sum?: GradeSumAggregateInputType
    _min?: GradeMinAggregateInputType
    _max?: GradeMaxAggregateInputType
  }

  export type GradeGroupByOutputType = {
    gradeId: number
    baseSalaryId: number
    title: string
    grade: string
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeGroupByOutputType[P]>
            : GetScalarType<T[P], GradeGroupByOutputType[P]>
        }
      >
    >


  export type GradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    gradeId?: boolean
    baseSalaryId?: boolean
    title?: boolean
    grade?: boolean
    baseSalary?: boolean | BaseSalaryDefaultArgs<ExtArgs>
    employees?: boolean | Grade$employeesArgs<ExtArgs>
    gradeHistories?: boolean | Grade$gradeHistoriesArgs<ExtArgs>
    salaryHistories?: boolean | Grade$salaryHistoriesArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>



  export type GradeSelectScalar = {
    gradeId?: boolean
    baseSalaryId?: boolean
    title?: boolean
    grade?: boolean
  }

  export type GradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"gradeId" | "baseSalaryId" | "title" | "grade", ExtArgs["result"]["grade"]>
  export type GradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    baseSalary?: boolean | BaseSalaryDefaultArgs<ExtArgs>
    employees?: boolean | Grade$employeesArgs<ExtArgs>
    gradeHistories?: boolean | Grade$gradeHistoriesArgs<ExtArgs>
    salaryHistories?: boolean | Grade$salaryHistoriesArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grade"
    objects: {
      baseSalary: Prisma.$BaseSalaryPayload<ExtArgs>
      employees: Prisma.$EmployeePayload<ExtArgs>[]
      gradeHistories: Prisma.$GradeHistoryPayload<ExtArgs>[]
      salaryHistories: Prisma.$SalaryHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      gradeId: number
      baseSalaryId: number
      title: string
      grade: string
    }, ExtArgs["result"]["grade"]>
    composites: {}
  }

  type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = $Result.GetResult<Prisma.$GradePayload, S>

  type GradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GradeCountAggregateInputType | true
    }

  export interface GradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
    /**
     * Find zero or one Grade that matches the filter.
     * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GradeFindUniqueArgs>(args: SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Grade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs>(args: SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GradeFindFirstArgs>(args?: SelectSubset<T, GradeFindFirstArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GradeFindFirstOrThrowArgs>(args?: SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `gradeId`
     * const gradeWithGradeIdOnly = await prisma.grade.findMany({ select: { gradeId: true } })
     * 
     */
    findMany<T extends GradeFindManyArgs>(args?: SelectSubset<T, GradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Grade.
     * @param {GradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
     */
    create<T extends GradeCreateArgs>(args: SelectSubset<T, GradeCreateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Grades.
     * @param {GradeCreateManyArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GradeCreateManyArgs>(args?: SelectSubset<T, GradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Grade.
     * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
     */
    delete<T extends GradeDeleteArgs>(args: SelectSubset<T, GradeDeleteArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Grade.
     * @param {GradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GradeUpdateArgs>(args: SelectSubset<T, GradeUpdateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Grades.
     * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GradeDeleteManyArgs>(args?: SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GradeUpdateManyArgs>(args: SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grade.
     * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
     */
    upsert<T extends GradeUpsertArgs>(args: SelectSubset<T, GradeUpsertArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends GradeCountArgs>(
      args?: Subset<T, GradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

    /**
     * Group by Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeGroupByArgs['orderBy'] }
        : { orderBy?: GradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grade model
   */
  readonly fields: GradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    baseSalary<T extends BaseSalaryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BaseSalaryDefaultArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employees<T extends Grade$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Grade$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gradeHistories<T extends Grade$gradeHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Grade$gradeHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryHistories<T extends Grade$salaryHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Grade$salaryHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grade model
   */
  interface GradeFieldRefs {
    readonly gradeId: FieldRef<"Grade", 'Int'>
    readonly baseSalaryId: FieldRef<"Grade", 'Int'>
    readonly title: FieldRef<"Grade", 'String'>
    readonly grade: FieldRef<"Grade", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Grade findUnique
   */
  export type GradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findUniqueOrThrow
   */
  export type GradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findFirst
   */
  export type GradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findFirstOrThrow
   */
  export type GradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findMany
   */
  export type GradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grades to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade create
   */
  export type GradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grade.
     */
    data: XOR<GradeCreateInput, GradeUncheckedCreateInput>
  }

  /**
   * Grade createMany
   */
  export type GradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grade update
   */
  export type GradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grade.
     */
    data: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
    /**
     * Choose, which Grade to update.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade updateMany
   */
  export type GradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to update.
     */
    limit?: number
  }

  /**
   * Grade upsert
   */
  export type GradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grade to update in case it exists.
     */
    where: GradeWhereUniqueInput
    /**
     * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
     */
    create: XOR<GradeCreateInput, GradeUncheckedCreateInput>
    /**
     * In case the Grade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
  }

  /**
   * Grade delete
   */
  export type GradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter which Grade to delete.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade deleteMany
   */
  export type GradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grades to delete
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to delete.
     */
    limit?: number
  }

  /**
   * Grade.employees
   */
  export type Grade$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Grade.gradeHistories
   */
  export type Grade$gradeHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    where?: GradeHistoryWhereInput
    orderBy?: GradeHistoryOrderByWithRelationInput | GradeHistoryOrderByWithRelationInput[]
    cursor?: GradeHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeHistoryScalarFieldEnum | GradeHistoryScalarFieldEnum[]
  }

  /**
   * Grade.salaryHistories
   */
  export type Grade$salaryHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    where?: SalaryHistoryWhereInput
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    cursor?: SalaryHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * Grade without action
   */
  export type GradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
  }

  export type UserMinAggregateOutputType = {
    userId: number | null
    username: string | null
    password: string | null
    email: string | null
    phoneNumber: string | null
    role: $Enums.Role | null
    token: string | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number | null
    username: string | null
    password: string | null
    email: string | null
    phoneNumber: string | null
    role: $Enums.Role | null
    token: string | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    username: number
    password: number
    email: number
    phoneNumber: number
    role: number
    token: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    username?: true
    password?: true
    email?: true
    phoneNumber?: true
    role?: true
    token?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    username?: true
    password?: true
    email?: true
    phoneNumber?: true
    role?: true
    token?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    username?: true
    password?: true
    email?: true
    phoneNumber?: true
    role?: true
    token?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: number
    username: string
    password: string
    email: string
    phoneNumber: string
    role: $Enums.Role
    token: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phoneNumber?: boolean
    role?: boolean
    token?: boolean
    employees?: boolean | User$employeesArgs<ExtArgs>
    recommendations?: boolean | User$recommendationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    userId?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phoneNumber?: boolean
    role?: boolean
    token?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "username" | "password" | "email" | "phoneNumber" | "role" | "token", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | User$employeesArgs<ExtArgs>
    recommendations?: boolean | User$recommendationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      employees: Prisma.$EmployeePayload<ExtArgs>[]
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      username: string
      password: string
      email: string
      phoneNumber: string
      role: $Enums.Role
      token: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employees<T extends User$employeesArgs<ExtArgs> = {}>(args?: Subset<T, User$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recommendations<T extends User$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, User$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly token: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.employees
   */
  export type User$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * User.recommendations
   */
  export type User$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    educationId: number | null
    gradeId: number | null
    positionId: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    educationId: number | null
    gradeId: number | null
    positionId: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    educationId: number | null
    gradeId: number | null
    positionId: number | null
    fullName: string | null
    nipp: string | null
    birthPlace: string | null
    birthDate: Date | null
    gender: $Enums.Gender | null
    kkNumber: string | null
    nik: string | null
    employeeStatus: $Enums.EmployeeStatus | null
    familyStatus: $Enums.FamilyStatus | null
    address: string | null
    photoUrl: string | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    educationId: number | null
    gradeId: number | null
    positionId: number | null
    fullName: string | null
    nipp: string | null
    birthPlace: string | null
    birthDate: Date | null
    gender: $Enums.Gender | null
    kkNumber: string | null
    nik: string | null
    employeeStatus: $Enums.EmployeeStatus | null
    familyStatus: $Enums.FamilyStatus | null
    address: string | null
    photoUrl: string | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: number
    nipp: number
    birthPlace: number
    birthDate: number
    gender: number
    kkNumber: number
    nik: number
    employeeStatus: number
    familyStatus: number
    address: number
    photoUrl: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    userId?: true
    educationId?: true
    gradeId?: true
    positionId?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    userId?: true
    educationId?: true
    gradeId?: true
    positionId?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    userId?: true
    educationId?: true
    gradeId?: true
    positionId?: true
    fullName?: true
    nipp?: true
    birthPlace?: true
    birthDate?: true
    gender?: true
    kkNumber?: true
    nik?: true
    employeeStatus?: true
    familyStatus?: true
    address?: true
    photoUrl?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    userId?: true
    educationId?: true
    gradeId?: true
    positionId?: true
    fullName?: true
    nipp?: true
    birthPlace?: true
    birthDate?: true
    gender?: true
    kkNumber?: true
    nik?: true
    employeeStatus?: true
    familyStatus?: true
    address?: true
    photoUrl?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    userId?: true
    educationId?: true
    gradeId?: true
    positionId?: true
    fullName?: true
    nipp?: true
    birthPlace?: true
    birthDate?: true
    gender?: true
    kkNumber?: true
    nik?: true
    employeeStatus?: true
    familyStatus?: true
    address?: true
    photoUrl?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    educationId?: boolean
    gradeId?: boolean
    positionId?: boolean
    fullName?: boolean
    nipp?: boolean
    birthPlace?: boolean
    birthDate?: boolean
    gender?: boolean
    kkNumber?: boolean
    nik?: boolean
    employeeStatus?: boolean
    familyStatus?: boolean
    address?: boolean
    photoUrl?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    education?: boolean | EducationDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
    position?: boolean | PositionDefaultArgs<ExtArgs>
    familyMembers?: boolean | Employee$familyMembersArgs<ExtArgs>
    infractions?: boolean | Employee$infractionsArgs<ExtArgs>
    gradeHistories?: boolean | Employee$gradeHistoriesArgs<ExtArgs>
    salaryHistories?: boolean | Employee$salaryHistoriesArgs<ExtArgs>
    placements?: boolean | Employee$placementsArgs<ExtArgs>
    recommendations?: boolean | Employee$recommendationsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>



  export type EmployeeSelectScalar = {
    id?: boolean
    userId?: boolean
    educationId?: boolean
    gradeId?: boolean
    positionId?: boolean
    fullName?: boolean
    nipp?: boolean
    birthPlace?: boolean
    birthDate?: boolean
    gender?: boolean
    kkNumber?: boolean
    nik?: boolean
    employeeStatus?: boolean
    familyStatus?: boolean
    address?: boolean
    photoUrl?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "educationId" | "gradeId" | "positionId" | "fullName" | "nipp" | "birthPlace" | "birthDate" | "gender" | "kkNumber" | "nik" | "employeeStatus" | "familyStatus" | "address" | "photoUrl", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    education?: boolean | EducationDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
    position?: boolean | PositionDefaultArgs<ExtArgs>
    familyMembers?: boolean | Employee$familyMembersArgs<ExtArgs>
    infractions?: boolean | Employee$infractionsArgs<ExtArgs>
    gradeHistories?: boolean | Employee$gradeHistoriesArgs<ExtArgs>
    salaryHistories?: boolean | Employee$salaryHistoriesArgs<ExtArgs>
    placements?: boolean | Employee$placementsArgs<ExtArgs>
    recommendations?: boolean | Employee$recommendationsArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      education: Prisma.$EducationPayload<ExtArgs>
      grade: Prisma.$GradePayload<ExtArgs>
      position: Prisma.$PositionPayload<ExtArgs>
      familyMembers: Prisma.$FamilyMemberPayload<ExtArgs>[]
      infractions: Prisma.$InfractionPayload<ExtArgs>[]
      gradeHistories: Prisma.$GradeHistoryPayload<ExtArgs>[]
      salaryHistories: Prisma.$SalaryHistoryPayload<ExtArgs>[]
      placements: Prisma.$PlacementPayload<ExtArgs>[]
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      educationId: number
      gradeId: number
      positionId: number
      fullName: string
      nipp: string
      birthPlace: string
      birthDate: Date
      gender: $Enums.Gender
      kkNumber: string
      nik: string
      employeeStatus: $Enums.EmployeeStatus
      familyStatus: $Enums.FamilyStatus
      address: string
      photoUrl: string
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    education<T extends EducationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EducationDefaultArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    position<T extends PositionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PositionDefaultArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    familyMembers<T extends Employee$familyMembersArgs<ExtArgs> = {}>(args?: Subset<T, Employee$familyMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    infractions<T extends Employee$infractionsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$infractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gradeHistories<T extends Employee$gradeHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$gradeHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    salaryHistories<T extends Employee$salaryHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$salaryHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    placements<T extends Employee$placementsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$placementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recommendations<T extends Employee$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'Int'>
    readonly userId: FieldRef<"Employee", 'Int'>
    readonly educationId: FieldRef<"Employee", 'Int'>
    readonly gradeId: FieldRef<"Employee", 'Int'>
    readonly positionId: FieldRef<"Employee", 'Int'>
    readonly fullName: FieldRef<"Employee", 'String'>
    readonly nipp: FieldRef<"Employee", 'String'>
    readonly birthPlace: FieldRef<"Employee", 'String'>
    readonly birthDate: FieldRef<"Employee", 'DateTime'>
    readonly gender: FieldRef<"Employee", 'Gender'>
    readonly kkNumber: FieldRef<"Employee", 'String'>
    readonly nik: FieldRef<"Employee", 'String'>
    readonly employeeStatus: FieldRef<"Employee", 'EmployeeStatus'>
    readonly familyStatus: FieldRef<"Employee", 'FamilyStatus'>
    readonly address: FieldRef<"Employee", 'String'>
    readonly photoUrl: FieldRef<"Employee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee.familyMembers
   */
  export type Employee$familyMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    where?: FamilyMemberWhereInput
    orderBy?: FamilyMemberOrderByWithRelationInput | FamilyMemberOrderByWithRelationInput[]
    cursor?: FamilyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FamilyMemberScalarFieldEnum | FamilyMemberScalarFieldEnum[]
  }

  /**
   * Employee.infractions
   */
  export type Employee$infractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    where?: InfractionWhereInput
    orderBy?: InfractionOrderByWithRelationInput | InfractionOrderByWithRelationInput[]
    cursor?: InfractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InfractionScalarFieldEnum | InfractionScalarFieldEnum[]
  }

  /**
   * Employee.gradeHistories
   */
  export type Employee$gradeHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    where?: GradeHistoryWhereInput
    orderBy?: GradeHistoryOrderByWithRelationInput | GradeHistoryOrderByWithRelationInput[]
    cursor?: GradeHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeHistoryScalarFieldEnum | GradeHistoryScalarFieldEnum[]
  }

  /**
   * Employee.salaryHistories
   */
  export type Employee$salaryHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    where?: SalaryHistoryWhereInput
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    cursor?: SalaryHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * Employee.placements
   */
  export type Employee$placementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    where?: PlacementWhereInput
    orderBy?: PlacementOrderByWithRelationInput | PlacementOrderByWithRelationInput[]
    cursor?: PlacementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlacementScalarFieldEnum | PlacementScalarFieldEnum[]
  }

  /**
   * Employee.recommendations
   */
  export type Employee$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model FamilyMember
   */

  export type AggregateFamilyMember = {
    _count: FamilyMemberCountAggregateOutputType | null
    _avg: FamilyMemberAvgAggregateOutputType | null
    _sum: FamilyMemberSumAggregateOutputType | null
    _min: FamilyMemberMinAggregateOutputType | null
    _max: FamilyMemberMaxAggregateOutputType | null
  }

  export type FamilyMemberAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type FamilyMemberSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type FamilyMemberMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    nik: string | null
    name: string | null
    birthPlace: string | null
    birthDate: Date | null
    gender: $Enums.Gender | null
    marriageDate: Date | null
    familyStatus: $Enums.EmployeeStatus | null
  }

  export type FamilyMemberMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    nik: string | null
    name: string | null
    birthPlace: string | null
    birthDate: Date | null
    gender: $Enums.Gender | null
    marriageDate: Date | null
    familyStatus: $Enums.EmployeeStatus | null
  }

  export type FamilyMemberCountAggregateOutputType = {
    id: number
    employeeId: number
    nik: number
    name: number
    birthPlace: number
    birthDate: number
    gender: number
    marriageDate: number
    familyStatus: number
    _all: number
  }


  export type FamilyMemberAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type FamilyMemberSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type FamilyMemberMinAggregateInputType = {
    id?: true
    employeeId?: true
    nik?: true
    name?: true
    birthPlace?: true
    birthDate?: true
    gender?: true
    marriageDate?: true
    familyStatus?: true
  }

  export type FamilyMemberMaxAggregateInputType = {
    id?: true
    employeeId?: true
    nik?: true
    name?: true
    birthPlace?: true
    birthDate?: true
    gender?: true
    marriageDate?: true
    familyStatus?: true
  }

  export type FamilyMemberCountAggregateInputType = {
    id?: true
    employeeId?: true
    nik?: true
    name?: true
    birthPlace?: true
    birthDate?: true
    gender?: true
    marriageDate?: true
    familyStatus?: true
    _all?: true
  }

  export type FamilyMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FamilyMember to aggregate.
     */
    where?: FamilyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyMembers to fetch.
     */
    orderBy?: FamilyMemberOrderByWithRelationInput | FamilyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FamilyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FamilyMembers
    **/
    _count?: true | FamilyMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FamilyMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FamilyMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FamilyMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FamilyMemberMaxAggregateInputType
  }

  export type GetFamilyMemberAggregateType<T extends FamilyMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateFamilyMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFamilyMember[P]>
      : GetScalarType<T[P], AggregateFamilyMember[P]>
  }




  export type FamilyMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FamilyMemberWhereInput
    orderBy?: FamilyMemberOrderByWithAggregationInput | FamilyMemberOrderByWithAggregationInput[]
    by: FamilyMemberScalarFieldEnum[] | FamilyMemberScalarFieldEnum
    having?: FamilyMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FamilyMemberCountAggregateInputType | true
    _avg?: FamilyMemberAvgAggregateInputType
    _sum?: FamilyMemberSumAggregateInputType
    _min?: FamilyMemberMinAggregateInputType
    _max?: FamilyMemberMaxAggregateInputType
  }

  export type FamilyMemberGroupByOutputType = {
    id: number
    employeeId: number
    nik: string
    name: string
    birthPlace: string
    birthDate: Date
    gender: $Enums.Gender
    marriageDate: Date | null
    familyStatus: $Enums.EmployeeStatus
    _count: FamilyMemberCountAggregateOutputType | null
    _avg: FamilyMemberAvgAggregateOutputType | null
    _sum: FamilyMemberSumAggregateOutputType | null
    _min: FamilyMemberMinAggregateOutputType | null
    _max: FamilyMemberMaxAggregateOutputType | null
  }

  type GetFamilyMemberGroupByPayload<T extends FamilyMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FamilyMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FamilyMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FamilyMemberGroupByOutputType[P]>
            : GetScalarType<T[P], FamilyMemberGroupByOutputType[P]>
        }
      >
    >


  export type FamilyMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    nik?: boolean
    name?: boolean
    birthPlace?: boolean
    birthDate?: boolean
    gender?: boolean
    marriageDate?: boolean
    familyStatus?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["familyMember"]>



  export type FamilyMemberSelectScalar = {
    id?: boolean
    employeeId?: boolean
    nik?: boolean
    name?: boolean
    birthPlace?: boolean
    birthDate?: boolean
    gender?: boolean
    marriageDate?: boolean
    familyStatus?: boolean
  }

  export type FamilyMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "nik" | "name" | "birthPlace" | "birthDate" | "gender" | "marriageDate" | "familyStatus", ExtArgs["result"]["familyMember"]>
  export type FamilyMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $FamilyMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FamilyMember"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      nik: string
      name: string
      birthPlace: string
      birthDate: Date
      gender: $Enums.Gender
      marriageDate: Date | null
      familyStatus: $Enums.EmployeeStatus
    }, ExtArgs["result"]["familyMember"]>
    composites: {}
  }

  type FamilyMemberGetPayload<S extends boolean | null | undefined | FamilyMemberDefaultArgs> = $Result.GetResult<Prisma.$FamilyMemberPayload, S>

  type FamilyMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FamilyMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FamilyMemberCountAggregateInputType | true
    }

  export interface FamilyMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FamilyMember'], meta: { name: 'FamilyMember' } }
    /**
     * Find zero or one FamilyMember that matches the filter.
     * @param {FamilyMemberFindUniqueArgs} args - Arguments to find a FamilyMember
     * @example
     * // Get one FamilyMember
     * const familyMember = await prisma.familyMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FamilyMemberFindUniqueArgs>(args: SelectSubset<T, FamilyMemberFindUniqueArgs<ExtArgs>>): Prisma__FamilyMemberClient<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FamilyMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FamilyMemberFindUniqueOrThrowArgs} args - Arguments to find a FamilyMember
     * @example
     * // Get one FamilyMember
     * const familyMember = await prisma.familyMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FamilyMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, FamilyMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FamilyMemberClient<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FamilyMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyMemberFindFirstArgs} args - Arguments to find a FamilyMember
     * @example
     * // Get one FamilyMember
     * const familyMember = await prisma.familyMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FamilyMemberFindFirstArgs>(args?: SelectSubset<T, FamilyMemberFindFirstArgs<ExtArgs>>): Prisma__FamilyMemberClient<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FamilyMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyMemberFindFirstOrThrowArgs} args - Arguments to find a FamilyMember
     * @example
     * // Get one FamilyMember
     * const familyMember = await prisma.familyMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FamilyMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, FamilyMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__FamilyMemberClient<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FamilyMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FamilyMembers
     * const familyMembers = await prisma.familyMember.findMany()
     * 
     * // Get first 10 FamilyMembers
     * const familyMembers = await prisma.familyMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const familyMemberWithIdOnly = await prisma.familyMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FamilyMemberFindManyArgs>(args?: SelectSubset<T, FamilyMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FamilyMember.
     * @param {FamilyMemberCreateArgs} args - Arguments to create a FamilyMember.
     * @example
     * // Create one FamilyMember
     * const FamilyMember = await prisma.familyMember.create({
     *   data: {
     *     // ... data to create a FamilyMember
     *   }
     * })
     * 
     */
    create<T extends FamilyMemberCreateArgs>(args: SelectSubset<T, FamilyMemberCreateArgs<ExtArgs>>): Prisma__FamilyMemberClient<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FamilyMembers.
     * @param {FamilyMemberCreateManyArgs} args - Arguments to create many FamilyMembers.
     * @example
     * // Create many FamilyMembers
     * const familyMember = await prisma.familyMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FamilyMemberCreateManyArgs>(args?: SelectSubset<T, FamilyMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FamilyMember.
     * @param {FamilyMemberDeleteArgs} args - Arguments to delete one FamilyMember.
     * @example
     * // Delete one FamilyMember
     * const FamilyMember = await prisma.familyMember.delete({
     *   where: {
     *     // ... filter to delete one FamilyMember
     *   }
     * })
     * 
     */
    delete<T extends FamilyMemberDeleteArgs>(args: SelectSubset<T, FamilyMemberDeleteArgs<ExtArgs>>): Prisma__FamilyMemberClient<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FamilyMember.
     * @param {FamilyMemberUpdateArgs} args - Arguments to update one FamilyMember.
     * @example
     * // Update one FamilyMember
     * const familyMember = await prisma.familyMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FamilyMemberUpdateArgs>(args: SelectSubset<T, FamilyMemberUpdateArgs<ExtArgs>>): Prisma__FamilyMemberClient<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FamilyMembers.
     * @param {FamilyMemberDeleteManyArgs} args - Arguments to filter FamilyMembers to delete.
     * @example
     * // Delete a few FamilyMembers
     * const { count } = await prisma.familyMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FamilyMemberDeleteManyArgs>(args?: SelectSubset<T, FamilyMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FamilyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FamilyMembers
     * const familyMember = await prisma.familyMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FamilyMemberUpdateManyArgs>(args: SelectSubset<T, FamilyMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FamilyMember.
     * @param {FamilyMemberUpsertArgs} args - Arguments to update or create a FamilyMember.
     * @example
     * // Update or create a FamilyMember
     * const familyMember = await prisma.familyMember.upsert({
     *   create: {
     *     // ... data to create a FamilyMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FamilyMember we want to update
     *   }
     * })
     */
    upsert<T extends FamilyMemberUpsertArgs>(args: SelectSubset<T, FamilyMemberUpsertArgs<ExtArgs>>): Prisma__FamilyMemberClient<$Result.GetResult<Prisma.$FamilyMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FamilyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyMemberCountArgs} args - Arguments to filter FamilyMembers to count.
     * @example
     * // Count the number of FamilyMembers
     * const count = await prisma.familyMember.count({
     *   where: {
     *     // ... the filter for the FamilyMembers we want to count
     *   }
     * })
    **/
    count<T extends FamilyMemberCountArgs>(
      args?: Subset<T, FamilyMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FamilyMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FamilyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FamilyMemberAggregateArgs>(args: Subset<T, FamilyMemberAggregateArgs>): Prisma.PrismaPromise<GetFamilyMemberAggregateType<T>>

    /**
     * Group by FamilyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FamilyMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FamilyMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FamilyMemberGroupByArgs['orderBy'] }
        : { orderBy?: FamilyMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FamilyMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFamilyMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FamilyMember model
   */
  readonly fields: FamilyMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FamilyMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FamilyMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FamilyMember model
   */
  interface FamilyMemberFieldRefs {
    readonly id: FieldRef<"FamilyMember", 'Int'>
    readonly employeeId: FieldRef<"FamilyMember", 'Int'>
    readonly nik: FieldRef<"FamilyMember", 'String'>
    readonly name: FieldRef<"FamilyMember", 'String'>
    readonly birthPlace: FieldRef<"FamilyMember", 'String'>
    readonly birthDate: FieldRef<"FamilyMember", 'DateTime'>
    readonly gender: FieldRef<"FamilyMember", 'Gender'>
    readonly marriageDate: FieldRef<"FamilyMember", 'DateTime'>
    readonly familyStatus: FieldRef<"FamilyMember", 'EmployeeStatus'>
  }
    

  // Custom InputTypes
  /**
   * FamilyMember findUnique
   */
  export type FamilyMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * Filter, which FamilyMember to fetch.
     */
    where: FamilyMemberWhereUniqueInput
  }

  /**
   * FamilyMember findUniqueOrThrow
   */
  export type FamilyMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * Filter, which FamilyMember to fetch.
     */
    where: FamilyMemberWhereUniqueInput
  }

  /**
   * FamilyMember findFirst
   */
  export type FamilyMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * Filter, which FamilyMember to fetch.
     */
    where?: FamilyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyMembers to fetch.
     */
    orderBy?: FamilyMemberOrderByWithRelationInput | FamilyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FamilyMembers.
     */
    cursor?: FamilyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FamilyMembers.
     */
    distinct?: FamilyMemberScalarFieldEnum | FamilyMemberScalarFieldEnum[]
  }

  /**
   * FamilyMember findFirstOrThrow
   */
  export type FamilyMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * Filter, which FamilyMember to fetch.
     */
    where?: FamilyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyMembers to fetch.
     */
    orderBy?: FamilyMemberOrderByWithRelationInput | FamilyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FamilyMembers.
     */
    cursor?: FamilyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FamilyMembers.
     */
    distinct?: FamilyMemberScalarFieldEnum | FamilyMemberScalarFieldEnum[]
  }

  /**
   * FamilyMember findMany
   */
  export type FamilyMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * Filter, which FamilyMembers to fetch.
     */
    where?: FamilyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FamilyMembers to fetch.
     */
    orderBy?: FamilyMemberOrderByWithRelationInput | FamilyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FamilyMembers.
     */
    cursor?: FamilyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FamilyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FamilyMembers.
     */
    skip?: number
    distinct?: FamilyMemberScalarFieldEnum | FamilyMemberScalarFieldEnum[]
  }

  /**
   * FamilyMember create
   */
  export type FamilyMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a FamilyMember.
     */
    data: XOR<FamilyMemberCreateInput, FamilyMemberUncheckedCreateInput>
  }

  /**
   * FamilyMember createMany
   */
  export type FamilyMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FamilyMembers.
     */
    data: FamilyMemberCreateManyInput | FamilyMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FamilyMember update
   */
  export type FamilyMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a FamilyMember.
     */
    data: XOR<FamilyMemberUpdateInput, FamilyMemberUncheckedUpdateInput>
    /**
     * Choose, which FamilyMember to update.
     */
    where: FamilyMemberWhereUniqueInput
  }

  /**
   * FamilyMember updateMany
   */
  export type FamilyMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FamilyMembers.
     */
    data: XOR<FamilyMemberUpdateManyMutationInput, FamilyMemberUncheckedUpdateManyInput>
    /**
     * Filter which FamilyMembers to update
     */
    where?: FamilyMemberWhereInput
    /**
     * Limit how many FamilyMembers to update.
     */
    limit?: number
  }

  /**
   * FamilyMember upsert
   */
  export type FamilyMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the FamilyMember to update in case it exists.
     */
    where: FamilyMemberWhereUniqueInput
    /**
     * In case the FamilyMember found by the `where` argument doesn't exist, create a new FamilyMember with this data.
     */
    create: XOR<FamilyMemberCreateInput, FamilyMemberUncheckedCreateInput>
    /**
     * In case the FamilyMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FamilyMemberUpdateInput, FamilyMemberUncheckedUpdateInput>
  }

  /**
   * FamilyMember delete
   */
  export type FamilyMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
    /**
     * Filter which FamilyMember to delete.
     */
    where: FamilyMemberWhereUniqueInput
  }

  /**
   * FamilyMember deleteMany
   */
  export type FamilyMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FamilyMembers to delete
     */
    where?: FamilyMemberWhereInput
    /**
     * Limit how many FamilyMembers to delete.
     */
    limit?: number
  }

  /**
   * FamilyMember without action
   */
  export type FamilyMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FamilyMember
     */
    select?: FamilyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FamilyMember
     */
    omit?: FamilyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FamilyMemberInclude<ExtArgs> | null
  }


  /**
   * Model Infraction
   */

  export type AggregateInfraction = {
    _count: InfractionCountAggregateOutputType | null
    _avg: InfractionAvgAggregateOutputType | null
    _sum: InfractionSumAggregateOutputType | null
    _min: InfractionMinAggregateOutputType | null
    _max: InfractionMaxAggregateOutputType | null
  }

  export type InfractionAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type InfractionSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type InfractionMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    decreeNumber: string | null
    name: string | null
    description: string | null
  }

  export type InfractionMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    decreeNumber: string | null
    name: string | null
    description: string | null
  }

  export type InfractionCountAggregateOutputType = {
    id: number
    employeeId: number
    decreeNumber: number
    name: number
    description: number
    _all: number
  }


  export type InfractionAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type InfractionSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type InfractionMinAggregateInputType = {
    id?: true
    employeeId?: true
    decreeNumber?: true
    name?: true
    description?: true
  }

  export type InfractionMaxAggregateInputType = {
    id?: true
    employeeId?: true
    decreeNumber?: true
    name?: true
    description?: true
  }

  export type InfractionCountAggregateInputType = {
    id?: true
    employeeId?: true
    decreeNumber?: true
    name?: true
    description?: true
    _all?: true
  }

  export type InfractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Infraction to aggregate.
     */
    where?: InfractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infractions to fetch.
     */
    orderBy?: InfractionOrderByWithRelationInput | InfractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InfractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Infractions
    **/
    _count?: true | InfractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InfractionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InfractionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InfractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InfractionMaxAggregateInputType
  }

  export type GetInfractionAggregateType<T extends InfractionAggregateArgs> = {
        [P in keyof T & keyof AggregateInfraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInfraction[P]>
      : GetScalarType<T[P], AggregateInfraction[P]>
  }




  export type InfractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InfractionWhereInput
    orderBy?: InfractionOrderByWithAggregationInput | InfractionOrderByWithAggregationInput[]
    by: InfractionScalarFieldEnum[] | InfractionScalarFieldEnum
    having?: InfractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InfractionCountAggregateInputType | true
    _avg?: InfractionAvgAggregateInputType
    _sum?: InfractionSumAggregateInputType
    _min?: InfractionMinAggregateInputType
    _max?: InfractionMaxAggregateInputType
  }

  export type InfractionGroupByOutputType = {
    id: number
    employeeId: number
    decreeNumber: string
    name: string
    description: string
    _count: InfractionCountAggregateOutputType | null
    _avg: InfractionAvgAggregateOutputType | null
    _sum: InfractionSumAggregateOutputType | null
    _min: InfractionMinAggregateOutputType | null
    _max: InfractionMaxAggregateOutputType | null
  }

  type GetInfractionGroupByPayload<T extends InfractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InfractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InfractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InfractionGroupByOutputType[P]>
            : GetScalarType<T[P], InfractionGroupByOutputType[P]>
        }
      >
    >


  export type InfractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    decreeNumber?: boolean
    name?: boolean
    description?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["infraction"]>



  export type InfractionSelectScalar = {
    id?: boolean
    employeeId?: boolean
    decreeNumber?: boolean
    name?: boolean
    description?: boolean
  }

  export type InfractionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "decreeNumber" | "name" | "description", ExtArgs["result"]["infraction"]>
  export type InfractionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $InfractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Infraction"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      decreeNumber: string
      name: string
      description: string
    }, ExtArgs["result"]["infraction"]>
    composites: {}
  }

  type InfractionGetPayload<S extends boolean | null | undefined | InfractionDefaultArgs> = $Result.GetResult<Prisma.$InfractionPayload, S>

  type InfractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InfractionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InfractionCountAggregateInputType | true
    }

  export interface InfractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Infraction'], meta: { name: 'Infraction' } }
    /**
     * Find zero or one Infraction that matches the filter.
     * @param {InfractionFindUniqueArgs} args - Arguments to find a Infraction
     * @example
     * // Get one Infraction
     * const infraction = await prisma.infraction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InfractionFindUniqueArgs>(args: SelectSubset<T, InfractionFindUniqueArgs<ExtArgs>>): Prisma__InfractionClient<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Infraction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InfractionFindUniqueOrThrowArgs} args - Arguments to find a Infraction
     * @example
     * // Get one Infraction
     * const infraction = await prisma.infraction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InfractionFindUniqueOrThrowArgs>(args: SelectSubset<T, InfractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InfractionClient<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Infraction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfractionFindFirstArgs} args - Arguments to find a Infraction
     * @example
     * // Get one Infraction
     * const infraction = await prisma.infraction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InfractionFindFirstArgs>(args?: SelectSubset<T, InfractionFindFirstArgs<ExtArgs>>): Prisma__InfractionClient<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Infraction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfractionFindFirstOrThrowArgs} args - Arguments to find a Infraction
     * @example
     * // Get one Infraction
     * const infraction = await prisma.infraction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InfractionFindFirstOrThrowArgs>(args?: SelectSubset<T, InfractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InfractionClient<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Infractions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Infractions
     * const infractions = await prisma.infraction.findMany()
     * 
     * // Get first 10 Infractions
     * const infractions = await prisma.infraction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const infractionWithIdOnly = await prisma.infraction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InfractionFindManyArgs>(args?: SelectSubset<T, InfractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Infraction.
     * @param {InfractionCreateArgs} args - Arguments to create a Infraction.
     * @example
     * // Create one Infraction
     * const Infraction = await prisma.infraction.create({
     *   data: {
     *     // ... data to create a Infraction
     *   }
     * })
     * 
     */
    create<T extends InfractionCreateArgs>(args: SelectSubset<T, InfractionCreateArgs<ExtArgs>>): Prisma__InfractionClient<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Infractions.
     * @param {InfractionCreateManyArgs} args - Arguments to create many Infractions.
     * @example
     * // Create many Infractions
     * const infraction = await prisma.infraction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InfractionCreateManyArgs>(args?: SelectSubset<T, InfractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Infraction.
     * @param {InfractionDeleteArgs} args - Arguments to delete one Infraction.
     * @example
     * // Delete one Infraction
     * const Infraction = await prisma.infraction.delete({
     *   where: {
     *     // ... filter to delete one Infraction
     *   }
     * })
     * 
     */
    delete<T extends InfractionDeleteArgs>(args: SelectSubset<T, InfractionDeleteArgs<ExtArgs>>): Prisma__InfractionClient<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Infraction.
     * @param {InfractionUpdateArgs} args - Arguments to update one Infraction.
     * @example
     * // Update one Infraction
     * const infraction = await prisma.infraction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InfractionUpdateArgs>(args: SelectSubset<T, InfractionUpdateArgs<ExtArgs>>): Prisma__InfractionClient<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Infractions.
     * @param {InfractionDeleteManyArgs} args - Arguments to filter Infractions to delete.
     * @example
     * // Delete a few Infractions
     * const { count } = await prisma.infraction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InfractionDeleteManyArgs>(args?: SelectSubset<T, InfractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Infractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Infractions
     * const infraction = await prisma.infraction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InfractionUpdateManyArgs>(args: SelectSubset<T, InfractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Infraction.
     * @param {InfractionUpsertArgs} args - Arguments to update or create a Infraction.
     * @example
     * // Update or create a Infraction
     * const infraction = await prisma.infraction.upsert({
     *   create: {
     *     // ... data to create a Infraction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Infraction we want to update
     *   }
     * })
     */
    upsert<T extends InfractionUpsertArgs>(args: SelectSubset<T, InfractionUpsertArgs<ExtArgs>>): Prisma__InfractionClient<$Result.GetResult<Prisma.$InfractionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Infractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfractionCountArgs} args - Arguments to filter Infractions to count.
     * @example
     * // Count the number of Infractions
     * const count = await prisma.infraction.count({
     *   where: {
     *     // ... the filter for the Infractions we want to count
     *   }
     * })
    **/
    count<T extends InfractionCountArgs>(
      args?: Subset<T, InfractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InfractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Infraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InfractionAggregateArgs>(args: Subset<T, InfractionAggregateArgs>): Prisma.PrismaPromise<GetInfractionAggregateType<T>>

    /**
     * Group by Infraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InfractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InfractionGroupByArgs['orderBy'] }
        : { orderBy?: InfractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InfractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInfractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Infraction model
   */
  readonly fields: InfractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Infraction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InfractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Infraction model
   */
  interface InfractionFieldRefs {
    readonly id: FieldRef<"Infraction", 'Int'>
    readonly employeeId: FieldRef<"Infraction", 'Int'>
    readonly decreeNumber: FieldRef<"Infraction", 'String'>
    readonly name: FieldRef<"Infraction", 'String'>
    readonly description: FieldRef<"Infraction", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Infraction findUnique
   */
  export type InfractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * Filter, which Infraction to fetch.
     */
    where: InfractionWhereUniqueInput
  }

  /**
   * Infraction findUniqueOrThrow
   */
  export type InfractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * Filter, which Infraction to fetch.
     */
    where: InfractionWhereUniqueInput
  }

  /**
   * Infraction findFirst
   */
  export type InfractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * Filter, which Infraction to fetch.
     */
    where?: InfractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infractions to fetch.
     */
    orderBy?: InfractionOrderByWithRelationInput | InfractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Infractions.
     */
    cursor?: InfractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Infractions.
     */
    distinct?: InfractionScalarFieldEnum | InfractionScalarFieldEnum[]
  }

  /**
   * Infraction findFirstOrThrow
   */
  export type InfractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * Filter, which Infraction to fetch.
     */
    where?: InfractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infractions to fetch.
     */
    orderBy?: InfractionOrderByWithRelationInput | InfractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Infractions.
     */
    cursor?: InfractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Infractions.
     */
    distinct?: InfractionScalarFieldEnum | InfractionScalarFieldEnum[]
  }

  /**
   * Infraction findMany
   */
  export type InfractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * Filter, which Infractions to fetch.
     */
    where?: InfractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infractions to fetch.
     */
    orderBy?: InfractionOrderByWithRelationInput | InfractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Infractions.
     */
    cursor?: InfractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infractions.
     */
    skip?: number
    distinct?: InfractionScalarFieldEnum | InfractionScalarFieldEnum[]
  }

  /**
   * Infraction create
   */
  export type InfractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * The data needed to create a Infraction.
     */
    data: XOR<InfractionCreateInput, InfractionUncheckedCreateInput>
  }

  /**
   * Infraction createMany
   */
  export type InfractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Infractions.
     */
    data: InfractionCreateManyInput | InfractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Infraction update
   */
  export type InfractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * The data needed to update a Infraction.
     */
    data: XOR<InfractionUpdateInput, InfractionUncheckedUpdateInput>
    /**
     * Choose, which Infraction to update.
     */
    where: InfractionWhereUniqueInput
  }

  /**
   * Infraction updateMany
   */
  export type InfractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Infractions.
     */
    data: XOR<InfractionUpdateManyMutationInput, InfractionUncheckedUpdateManyInput>
    /**
     * Filter which Infractions to update
     */
    where?: InfractionWhereInput
    /**
     * Limit how many Infractions to update.
     */
    limit?: number
  }

  /**
   * Infraction upsert
   */
  export type InfractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * The filter to search for the Infraction to update in case it exists.
     */
    where: InfractionWhereUniqueInput
    /**
     * In case the Infraction found by the `where` argument doesn't exist, create a new Infraction with this data.
     */
    create: XOR<InfractionCreateInput, InfractionUncheckedCreateInput>
    /**
     * In case the Infraction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InfractionUpdateInput, InfractionUncheckedUpdateInput>
  }

  /**
   * Infraction delete
   */
  export type InfractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
    /**
     * Filter which Infraction to delete.
     */
    where: InfractionWhereUniqueInput
  }

  /**
   * Infraction deleteMany
   */
  export type InfractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Infractions to delete
     */
    where?: InfractionWhereInput
    /**
     * Limit how many Infractions to delete.
     */
    limit?: number
  }

  /**
   * Infraction without action
   */
  export type InfractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Infraction
     */
    select?: InfractionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Infraction
     */
    omit?: InfractionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InfractionInclude<ExtArgs> | null
  }


  /**
   * Model SalaryHistory
   */

  export type AggregateSalaryHistory = {
    _count: SalaryHistoryCountAggregateOutputType | null
    _avg: SalaryHistoryAvgAggregateOutputType | null
    _sum: SalaryHistorySumAggregateOutputType | null
    _min: SalaryHistoryMinAggregateOutputType | null
    _max: SalaryHistoryMaxAggregateOutputType | null
  }

  export type SalaryHistoryAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    gradeId: number | null
    baseSalaryId: number | null
    amount: number | null
  }

  export type SalaryHistorySumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    gradeId: number | null
    baseSalaryId: number | null
    amount: number | null
  }

  export type SalaryHistoryMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    gradeId: number | null
    baseSalaryId: number | null
    amount: number | null
    effectiveDate: Date | null
  }

  export type SalaryHistoryMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    gradeId: number | null
    baseSalaryId: number | null
    amount: number | null
    effectiveDate: Date | null
  }

  export type SalaryHistoryCountAggregateOutputType = {
    id: number
    employeeId: number
    gradeId: number
    baseSalaryId: number
    amount: number
    effectiveDate: number
    _all: number
  }


  export type SalaryHistoryAvgAggregateInputType = {
    id?: true
    employeeId?: true
    gradeId?: true
    baseSalaryId?: true
    amount?: true
  }

  export type SalaryHistorySumAggregateInputType = {
    id?: true
    employeeId?: true
    gradeId?: true
    baseSalaryId?: true
    amount?: true
  }

  export type SalaryHistoryMinAggregateInputType = {
    id?: true
    employeeId?: true
    gradeId?: true
    baseSalaryId?: true
    amount?: true
    effectiveDate?: true
  }

  export type SalaryHistoryMaxAggregateInputType = {
    id?: true
    employeeId?: true
    gradeId?: true
    baseSalaryId?: true
    amount?: true
    effectiveDate?: true
  }

  export type SalaryHistoryCountAggregateInputType = {
    id?: true
    employeeId?: true
    gradeId?: true
    baseSalaryId?: true
    amount?: true
    effectiveDate?: true
    _all?: true
  }

  export type SalaryHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryHistory to aggregate.
     */
    where?: SalaryHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryHistories to fetch.
     */
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaryHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SalaryHistories
    **/
    _count?: true | SalaryHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaryHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaryHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaryHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaryHistoryMaxAggregateInputType
  }

  export type GetSalaryHistoryAggregateType<T extends SalaryHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSalaryHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalaryHistory[P]>
      : GetScalarType<T[P], AggregateSalaryHistory[P]>
  }




  export type SalaryHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryHistoryWhereInput
    orderBy?: SalaryHistoryOrderByWithAggregationInput | SalaryHistoryOrderByWithAggregationInput[]
    by: SalaryHistoryScalarFieldEnum[] | SalaryHistoryScalarFieldEnum
    having?: SalaryHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaryHistoryCountAggregateInputType | true
    _avg?: SalaryHistoryAvgAggregateInputType
    _sum?: SalaryHistorySumAggregateInputType
    _min?: SalaryHistoryMinAggregateInputType
    _max?: SalaryHistoryMaxAggregateInputType
  }

  export type SalaryHistoryGroupByOutputType = {
    id: number
    employeeId: number
    gradeId: number
    baseSalaryId: number
    amount: number
    effectiveDate: Date
    _count: SalaryHistoryCountAggregateOutputType | null
    _avg: SalaryHistoryAvgAggregateOutputType | null
    _sum: SalaryHistorySumAggregateOutputType | null
    _min: SalaryHistoryMinAggregateOutputType | null
    _max: SalaryHistoryMaxAggregateOutputType | null
  }

  type GetSalaryHistoryGroupByPayload<T extends SalaryHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaryHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaryHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaryHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], SalaryHistoryGroupByOutputType[P]>
        }
      >
    >


  export type SalaryHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    gradeId?: boolean
    baseSalaryId?: boolean
    amount?: boolean
    effectiveDate?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
    baseSalary?: boolean | BaseSalaryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["salaryHistory"]>



  export type SalaryHistorySelectScalar = {
    id?: boolean
    employeeId?: boolean
    gradeId?: boolean
    baseSalaryId?: boolean
    amount?: boolean
    effectiveDate?: boolean
  }

  export type SalaryHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "gradeId" | "baseSalaryId" | "amount" | "effectiveDate", ExtArgs["result"]["salaryHistory"]>
  export type SalaryHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
    baseSalary?: boolean | BaseSalaryDefaultArgs<ExtArgs>
  }

  export type $SalaryHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SalaryHistory"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      grade: Prisma.$GradePayload<ExtArgs>
      baseSalary: Prisma.$BaseSalaryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      gradeId: number
      baseSalaryId: number
      amount: number
      effectiveDate: Date
    }, ExtArgs["result"]["salaryHistory"]>
    composites: {}
  }

  type SalaryHistoryGetPayload<S extends boolean | null | undefined | SalaryHistoryDefaultArgs> = $Result.GetResult<Prisma.$SalaryHistoryPayload, S>

  type SalaryHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SalaryHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SalaryHistoryCountAggregateInputType | true
    }

  export interface SalaryHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalaryHistory'], meta: { name: 'SalaryHistory' } }
    /**
     * Find zero or one SalaryHistory that matches the filter.
     * @param {SalaryHistoryFindUniqueArgs} args - Arguments to find a SalaryHistory
     * @example
     * // Get one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalaryHistoryFindUniqueArgs>(args: SelectSubset<T, SalaryHistoryFindUniqueArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SalaryHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SalaryHistoryFindUniqueOrThrowArgs} args - Arguments to find a SalaryHistory
     * @example
     * // Get one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalaryHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SalaryHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SalaryHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryFindFirstArgs} args - Arguments to find a SalaryHistory
     * @example
     * // Get one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalaryHistoryFindFirstArgs>(args?: SelectSubset<T, SalaryHistoryFindFirstArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SalaryHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryFindFirstOrThrowArgs} args - Arguments to find a SalaryHistory
     * @example
     * // Get one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalaryHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SalaryHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SalaryHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SalaryHistories
     * const salaryHistories = await prisma.salaryHistory.findMany()
     * 
     * // Get first 10 SalaryHistories
     * const salaryHistories = await prisma.salaryHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaryHistoryWithIdOnly = await prisma.salaryHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalaryHistoryFindManyArgs>(args?: SelectSubset<T, SalaryHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SalaryHistory.
     * @param {SalaryHistoryCreateArgs} args - Arguments to create a SalaryHistory.
     * @example
     * // Create one SalaryHistory
     * const SalaryHistory = await prisma.salaryHistory.create({
     *   data: {
     *     // ... data to create a SalaryHistory
     *   }
     * })
     * 
     */
    create<T extends SalaryHistoryCreateArgs>(args: SelectSubset<T, SalaryHistoryCreateArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SalaryHistories.
     * @param {SalaryHistoryCreateManyArgs} args - Arguments to create many SalaryHistories.
     * @example
     * // Create many SalaryHistories
     * const salaryHistory = await prisma.salaryHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalaryHistoryCreateManyArgs>(args?: SelectSubset<T, SalaryHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SalaryHistory.
     * @param {SalaryHistoryDeleteArgs} args - Arguments to delete one SalaryHistory.
     * @example
     * // Delete one SalaryHistory
     * const SalaryHistory = await prisma.salaryHistory.delete({
     *   where: {
     *     // ... filter to delete one SalaryHistory
     *   }
     * })
     * 
     */
    delete<T extends SalaryHistoryDeleteArgs>(args: SelectSubset<T, SalaryHistoryDeleteArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SalaryHistory.
     * @param {SalaryHistoryUpdateArgs} args - Arguments to update one SalaryHistory.
     * @example
     * // Update one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalaryHistoryUpdateArgs>(args: SelectSubset<T, SalaryHistoryUpdateArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SalaryHistories.
     * @param {SalaryHistoryDeleteManyArgs} args - Arguments to filter SalaryHistories to delete.
     * @example
     * // Delete a few SalaryHistories
     * const { count } = await prisma.salaryHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalaryHistoryDeleteManyArgs>(args?: SelectSubset<T, SalaryHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaryHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SalaryHistories
     * const salaryHistory = await prisma.salaryHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalaryHistoryUpdateManyArgs>(args: SelectSubset<T, SalaryHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SalaryHistory.
     * @param {SalaryHistoryUpsertArgs} args - Arguments to update or create a SalaryHistory.
     * @example
     * // Update or create a SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.upsert({
     *   create: {
     *     // ... data to create a SalaryHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SalaryHistory we want to update
     *   }
     * })
     */
    upsert<T extends SalaryHistoryUpsertArgs>(args: SelectSubset<T, SalaryHistoryUpsertArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SalaryHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryCountArgs} args - Arguments to filter SalaryHistories to count.
     * @example
     * // Count the number of SalaryHistories
     * const count = await prisma.salaryHistory.count({
     *   where: {
     *     // ... the filter for the SalaryHistories we want to count
     *   }
     * })
    **/
    count<T extends SalaryHistoryCountArgs>(
      args?: Subset<T, SalaryHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaryHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SalaryHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaryHistoryAggregateArgs>(args: Subset<T, SalaryHistoryAggregateArgs>): Prisma.PrismaPromise<GetSalaryHistoryAggregateType<T>>

    /**
     * Group by SalaryHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaryHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaryHistoryGroupByArgs['orderBy'] }
        : { orderBy?: SalaryHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaryHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaryHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SalaryHistory model
   */
  readonly fields: SalaryHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SalaryHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalaryHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    baseSalary<T extends BaseSalaryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BaseSalaryDefaultArgs<ExtArgs>>): Prisma__BaseSalaryClient<$Result.GetResult<Prisma.$BaseSalaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SalaryHistory model
   */
  interface SalaryHistoryFieldRefs {
    readonly id: FieldRef<"SalaryHistory", 'Int'>
    readonly employeeId: FieldRef<"SalaryHistory", 'Int'>
    readonly gradeId: FieldRef<"SalaryHistory", 'Int'>
    readonly baseSalaryId: FieldRef<"SalaryHistory", 'Int'>
    readonly amount: FieldRef<"SalaryHistory", 'Int'>
    readonly effectiveDate: FieldRef<"SalaryHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SalaryHistory findUnique
   */
  export type SalaryHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SalaryHistory to fetch.
     */
    where: SalaryHistoryWhereUniqueInput
  }

  /**
   * SalaryHistory findUniqueOrThrow
   */
  export type SalaryHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SalaryHistory to fetch.
     */
    where: SalaryHistoryWhereUniqueInput
  }

  /**
   * SalaryHistory findFirst
   */
  export type SalaryHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SalaryHistory to fetch.
     */
    where?: SalaryHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryHistories to fetch.
     */
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryHistories.
     */
    cursor?: SalaryHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryHistories.
     */
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * SalaryHistory findFirstOrThrow
   */
  export type SalaryHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SalaryHistory to fetch.
     */
    where?: SalaryHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryHistories to fetch.
     */
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryHistories.
     */
    cursor?: SalaryHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryHistories.
     */
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * SalaryHistory findMany
   */
  export type SalaryHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * Filter, which SalaryHistories to fetch.
     */
    where?: SalaryHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryHistories to fetch.
     */
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SalaryHistories.
     */
    cursor?: SalaryHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryHistories.
     */
    skip?: number
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * SalaryHistory create
   */
  export type SalaryHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a SalaryHistory.
     */
    data: XOR<SalaryHistoryCreateInput, SalaryHistoryUncheckedCreateInput>
  }

  /**
   * SalaryHistory createMany
   */
  export type SalaryHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SalaryHistories.
     */
    data: SalaryHistoryCreateManyInput | SalaryHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SalaryHistory update
   */
  export type SalaryHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a SalaryHistory.
     */
    data: XOR<SalaryHistoryUpdateInput, SalaryHistoryUncheckedUpdateInput>
    /**
     * Choose, which SalaryHistory to update.
     */
    where: SalaryHistoryWhereUniqueInput
  }

  /**
   * SalaryHistory updateMany
   */
  export type SalaryHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SalaryHistories.
     */
    data: XOR<SalaryHistoryUpdateManyMutationInput, SalaryHistoryUncheckedUpdateManyInput>
    /**
     * Filter which SalaryHistories to update
     */
    where?: SalaryHistoryWhereInput
    /**
     * Limit how many SalaryHistories to update.
     */
    limit?: number
  }

  /**
   * SalaryHistory upsert
   */
  export type SalaryHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the SalaryHistory to update in case it exists.
     */
    where: SalaryHistoryWhereUniqueInput
    /**
     * In case the SalaryHistory found by the `where` argument doesn't exist, create a new SalaryHistory with this data.
     */
    create: XOR<SalaryHistoryCreateInput, SalaryHistoryUncheckedCreateInput>
    /**
     * In case the SalaryHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaryHistoryUpdateInput, SalaryHistoryUncheckedUpdateInput>
  }

  /**
   * SalaryHistory delete
   */
  export type SalaryHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
    /**
     * Filter which SalaryHistory to delete.
     */
    where: SalaryHistoryWhereUniqueInput
  }

  /**
   * SalaryHistory deleteMany
   */
  export type SalaryHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryHistories to delete
     */
    where?: SalaryHistoryWhereInput
    /**
     * Limit how many SalaryHistories to delete.
     */
    limit?: number
  }

  /**
   * SalaryHistory without action
   */
  export type SalaryHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SalaryHistory
     */
    omit?: SalaryHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SalaryHistoryInclude<ExtArgs> | null
  }


  /**
   * Model GradeHistory
   */

  export type AggregateGradeHistory = {
    _count: GradeHistoryCountAggregateOutputType | null
    _avg: GradeHistoryAvgAggregateOutputType | null
    _sum: GradeHistorySumAggregateOutputType | null
    _min: GradeHistoryMinAggregateOutputType | null
    _max: GradeHistoryMaxAggregateOutputType | null
  }

  export type GradeHistoryAvgAggregateOutputType = {
    gradeHistoryId: number | null
    employeeId: number | null
    gradeId: number | null
  }

  export type GradeHistorySumAggregateOutputType = {
    gradeHistoryId: number | null
    employeeId: number | null
    gradeId: number | null
  }

  export type GradeHistoryMinAggregateOutputType = {
    gradeHistoryId: number | null
    employeeId: number | null
    gradeId: number | null
    rankName: string | null
    gradeName: string | null
    effectiveDate: Date | null
  }

  export type GradeHistoryMaxAggregateOutputType = {
    gradeHistoryId: number | null
    employeeId: number | null
    gradeId: number | null
    rankName: string | null
    gradeName: string | null
    effectiveDate: Date | null
  }

  export type GradeHistoryCountAggregateOutputType = {
    gradeHistoryId: number
    employeeId: number
    gradeId: number
    rankName: number
    gradeName: number
    effectiveDate: number
    _all: number
  }


  export type GradeHistoryAvgAggregateInputType = {
    gradeHistoryId?: true
    employeeId?: true
    gradeId?: true
  }

  export type GradeHistorySumAggregateInputType = {
    gradeHistoryId?: true
    employeeId?: true
    gradeId?: true
  }

  export type GradeHistoryMinAggregateInputType = {
    gradeHistoryId?: true
    employeeId?: true
    gradeId?: true
    rankName?: true
    gradeName?: true
    effectiveDate?: true
  }

  export type GradeHistoryMaxAggregateInputType = {
    gradeHistoryId?: true
    employeeId?: true
    gradeId?: true
    rankName?: true
    gradeName?: true
    effectiveDate?: true
  }

  export type GradeHistoryCountAggregateInputType = {
    gradeHistoryId?: true
    employeeId?: true
    gradeId?: true
    rankName?: true
    gradeName?: true
    effectiveDate?: true
    _all?: true
  }

  export type GradeHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GradeHistory to aggregate.
     */
    where?: GradeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GradeHistories to fetch.
     */
    orderBy?: GradeHistoryOrderByWithRelationInput | GradeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GradeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GradeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GradeHistories
    **/
    _count?: true | GradeHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradeHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradeHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeHistoryMaxAggregateInputType
  }

  export type GetGradeHistoryAggregateType<T extends GradeHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGradeHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGradeHistory[P]>
      : GetScalarType<T[P], AggregateGradeHistory[P]>
  }




  export type GradeHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeHistoryWhereInput
    orderBy?: GradeHistoryOrderByWithAggregationInput | GradeHistoryOrderByWithAggregationInput[]
    by: GradeHistoryScalarFieldEnum[] | GradeHistoryScalarFieldEnum
    having?: GradeHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeHistoryCountAggregateInputType | true
    _avg?: GradeHistoryAvgAggregateInputType
    _sum?: GradeHistorySumAggregateInputType
    _min?: GradeHistoryMinAggregateInputType
    _max?: GradeHistoryMaxAggregateInputType
  }

  export type GradeHistoryGroupByOutputType = {
    gradeHistoryId: number
    employeeId: number
    gradeId: number
    rankName: string
    gradeName: string
    effectiveDate: Date
    _count: GradeHistoryCountAggregateOutputType | null
    _avg: GradeHistoryAvgAggregateOutputType | null
    _sum: GradeHistorySumAggregateOutputType | null
    _min: GradeHistoryMinAggregateOutputType | null
    _max: GradeHistoryMaxAggregateOutputType | null
  }

  type GetGradeHistoryGroupByPayload<T extends GradeHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], GradeHistoryGroupByOutputType[P]>
        }
      >
    >


  export type GradeHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    gradeHistoryId?: boolean
    employeeId?: boolean
    gradeId?: boolean
    rankName?: boolean
    gradeName?: boolean
    effectiveDate?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gradeHistory"]>



  export type GradeHistorySelectScalar = {
    gradeHistoryId?: boolean
    employeeId?: boolean
    gradeId?: boolean
    rankName?: boolean
    gradeName?: boolean
    effectiveDate?: boolean
  }

  export type GradeHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"gradeHistoryId" | "employeeId" | "gradeId" | "rankName" | "gradeName" | "effectiveDate", ExtArgs["result"]["gradeHistory"]>
  export type GradeHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }

  export type $GradeHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GradeHistory"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      grade: Prisma.$GradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      gradeHistoryId: number
      employeeId: number
      gradeId: number
      rankName: string
      gradeName: string
      effectiveDate: Date
    }, ExtArgs["result"]["gradeHistory"]>
    composites: {}
  }

  type GradeHistoryGetPayload<S extends boolean | null | undefined | GradeHistoryDefaultArgs> = $Result.GetResult<Prisma.$GradeHistoryPayload, S>

  type GradeHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GradeHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GradeHistoryCountAggregateInputType | true
    }

  export interface GradeHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GradeHistory'], meta: { name: 'GradeHistory' } }
    /**
     * Find zero or one GradeHistory that matches the filter.
     * @param {GradeHistoryFindUniqueArgs} args - Arguments to find a GradeHistory
     * @example
     * // Get one GradeHistory
     * const gradeHistory = await prisma.gradeHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GradeHistoryFindUniqueArgs>(args: SelectSubset<T, GradeHistoryFindUniqueArgs<ExtArgs>>): Prisma__GradeHistoryClient<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GradeHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GradeHistoryFindUniqueOrThrowArgs} args - Arguments to find a GradeHistory
     * @example
     * // Get one GradeHistory
     * const gradeHistory = await prisma.gradeHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GradeHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, GradeHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GradeHistoryClient<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GradeHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeHistoryFindFirstArgs} args - Arguments to find a GradeHistory
     * @example
     * // Get one GradeHistory
     * const gradeHistory = await prisma.gradeHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GradeHistoryFindFirstArgs>(args?: SelectSubset<T, GradeHistoryFindFirstArgs<ExtArgs>>): Prisma__GradeHistoryClient<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GradeHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeHistoryFindFirstOrThrowArgs} args - Arguments to find a GradeHistory
     * @example
     * // Get one GradeHistory
     * const gradeHistory = await prisma.gradeHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GradeHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, GradeHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__GradeHistoryClient<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GradeHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GradeHistories
     * const gradeHistories = await prisma.gradeHistory.findMany()
     * 
     * // Get first 10 GradeHistories
     * const gradeHistories = await prisma.gradeHistory.findMany({ take: 10 })
     * 
     * // Only select the `gradeHistoryId`
     * const gradeHistoryWithGradeHistoryIdOnly = await prisma.gradeHistory.findMany({ select: { gradeHistoryId: true } })
     * 
     */
    findMany<T extends GradeHistoryFindManyArgs>(args?: SelectSubset<T, GradeHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GradeHistory.
     * @param {GradeHistoryCreateArgs} args - Arguments to create a GradeHistory.
     * @example
     * // Create one GradeHistory
     * const GradeHistory = await prisma.gradeHistory.create({
     *   data: {
     *     // ... data to create a GradeHistory
     *   }
     * })
     * 
     */
    create<T extends GradeHistoryCreateArgs>(args: SelectSubset<T, GradeHistoryCreateArgs<ExtArgs>>): Prisma__GradeHistoryClient<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GradeHistories.
     * @param {GradeHistoryCreateManyArgs} args - Arguments to create many GradeHistories.
     * @example
     * // Create many GradeHistories
     * const gradeHistory = await prisma.gradeHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GradeHistoryCreateManyArgs>(args?: SelectSubset<T, GradeHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GradeHistory.
     * @param {GradeHistoryDeleteArgs} args - Arguments to delete one GradeHistory.
     * @example
     * // Delete one GradeHistory
     * const GradeHistory = await prisma.gradeHistory.delete({
     *   where: {
     *     // ... filter to delete one GradeHistory
     *   }
     * })
     * 
     */
    delete<T extends GradeHistoryDeleteArgs>(args: SelectSubset<T, GradeHistoryDeleteArgs<ExtArgs>>): Prisma__GradeHistoryClient<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GradeHistory.
     * @param {GradeHistoryUpdateArgs} args - Arguments to update one GradeHistory.
     * @example
     * // Update one GradeHistory
     * const gradeHistory = await prisma.gradeHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GradeHistoryUpdateArgs>(args: SelectSubset<T, GradeHistoryUpdateArgs<ExtArgs>>): Prisma__GradeHistoryClient<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GradeHistories.
     * @param {GradeHistoryDeleteManyArgs} args - Arguments to filter GradeHistories to delete.
     * @example
     * // Delete a few GradeHistories
     * const { count } = await prisma.gradeHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GradeHistoryDeleteManyArgs>(args?: SelectSubset<T, GradeHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GradeHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GradeHistories
     * const gradeHistory = await prisma.gradeHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GradeHistoryUpdateManyArgs>(args: SelectSubset<T, GradeHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GradeHistory.
     * @param {GradeHistoryUpsertArgs} args - Arguments to update or create a GradeHistory.
     * @example
     * // Update or create a GradeHistory
     * const gradeHistory = await prisma.gradeHistory.upsert({
     *   create: {
     *     // ... data to create a GradeHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GradeHistory we want to update
     *   }
     * })
     */
    upsert<T extends GradeHistoryUpsertArgs>(args: SelectSubset<T, GradeHistoryUpsertArgs<ExtArgs>>): Prisma__GradeHistoryClient<$Result.GetResult<Prisma.$GradeHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GradeHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeHistoryCountArgs} args - Arguments to filter GradeHistories to count.
     * @example
     * // Count the number of GradeHistories
     * const count = await prisma.gradeHistory.count({
     *   where: {
     *     // ... the filter for the GradeHistories we want to count
     *   }
     * })
    **/
    count<T extends GradeHistoryCountArgs>(
      args?: Subset<T, GradeHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GradeHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeHistoryAggregateArgs>(args: Subset<T, GradeHistoryAggregateArgs>): Prisma.PrismaPromise<GetGradeHistoryAggregateType<T>>

    /**
     * Group by GradeHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeHistoryGroupByArgs['orderBy'] }
        : { orderBy?: GradeHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GradeHistory model
   */
  readonly fields: GradeHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GradeHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GradeHistory model
   */
  interface GradeHistoryFieldRefs {
    readonly gradeHistoryId: FieldRef<"GradeHistory", 'Int'>
    readonly employeeId: FieldRef<"GradeHistory", 'Int'>
    readonly gradeId: FieldRef<"GradeHistory", 'Int'>
    readonly rankName: FieldRef<"GradeHistory", 'String'>
    readonly gradeName: FieldRef<"GradeHistory", 'String'>
    readonly effectiveDate: FieldRef<"GradeHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GradeHistory findUnique
   */
  export type GradeHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GradeHistory to fetch.
     */
    where: GradeHistoryWhereUniqueInput
  }

  /**
   * GradeHistory findUniqueOrThrow
   */
  export type GradeHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GradeHistory to fetch.
     */
    where: GradeHistoryWhereUniqueInput
  }

  /**
   * GradeHistory findFirst
   */
  export type GradeHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GradeHistory to fetch.
     */
    where?: GradeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GradeHistories to fetch.
     */
    orderBy?: GradeHistoryOrderByWithRelationInput | GradeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GradeHistories.
     */
    cursor?: GradeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GradeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GradeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GradeHistories.
     */
    distinct?: GradeHistoryScalarFieldEnum | GradeHistoryScalarFieldEnum[]
  }

  /**
   * GradeHistory findFirstOrThrow
   */
  export type GradeHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GradeHistory to fetch.
     */
    where?: GradeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GradeHistories to fetch.
     */
    orderBy?: GradeHistoryOrderByWithRelationInput | GradeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GradeHistories.
     */
    cursor?: GradeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GradeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GradeHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GradeHistories.
     */
    distinct?: GradeHistoryScalarFieldEnum | GradeHistoryScalarFieldEnum[]
  }

  /**
   * GradeHistory findMany
   */
  export type GradeHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * Filter, which GradeHistories to fetch.
     */
    where?: GradeHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GradeHistories to fetch.
     */
    orderBy?: GradeHistoryOrderByWithRelationInput | GradeHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GradeHistories.
     */
    cursor?: GradeHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GradeHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GradeHistories.
     */
    skip?: number
    distinct?: GradeHistoryScalarFieldEnum | GradeHistoryScalarFieldEnum[]
  }

  /**
   * GradeHistory create
   */
  export type GradeHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a GradeHistory.
     */
    data: XOR<GradeHistoryCreateInput, GradeHistoryUncheckedCreateInput>
  }

  /**
   * GradeHistory createMany
   */
  export type GradeHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GradeHistories.
     */
    data: GradeHistoryCreateManyInput | GradeHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GradeHistory update
   */
  export type GradeHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a GradeHistory.
     */
    data: XOR<GradeHistoryUpdateInput, GradeHistoryUncheckedUpdateInput>
    /**
     * Choose, which GradeHistory to update.
     */
    where: GradeHistoryWhereUniqueInput
  }

  /**
   * GradeHistory updateMany
   */
  export type GradeHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GradeHistories.
     */
    data: XOR<GradeHistoryUpdateManyMutationInput, GradeHistoryUncheckedUpdateManyInput>
    /**
     * Filter which GradeHistories to update
     */
    where?: GradeHistoryWhereInput
    /**
     * Limit how many GradeHistories to update.
     */
    limit?: number
  }

  /**
   * GradeHistory upsert
   */
  export type GradeHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the GradeHistory to update in case it exists.
     */
    where: GradeHistoryWhereUniqueInput
    /**
     * In case the GradeHistory found by the `where` argument doesn't exist, create a new GradeHistory with this data.
     */
    create: XOR<GradeHistoryCreateInput, GradeHistoryUncheckedCreateInput>
    /**
     * In case the GradeHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeHistoryUpdateInput, GradeHistoryUncheckedUpdateInput>
  }

  /**
   * GradeHistory delete
   */
  export type GradeHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
    /**
     * Filter which GradeHistory to delete.
     */
    where: GradeHistoryWhereUniqueInput
  }

  /**
   * GradeHistory deleteMany
   */
  export type GradeHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GradeHistories to delete
     */
    where?: GradeHistoryWhereInput
    /**
     * Limit how many GradeHistories to delete.
     */
    limit?: number
  }

  /**
   * GradeHistory without action
   */
  export type GradeHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeHistory
     */
    select?: GradeHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GradeHistory
     */
    omit?: GradeHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Placement
   */

  export type AggregatePlacement = {
    _count: PlacementCountAggregateOutputType | null
    _avg: PlacementAvgAggregateOutputType | null
    _sum: PlacementSumAggregateOutputType | null
    _min: PlacementMinAggregateOutputType | null
    _max: PlacementMaxAggregateOutputType | null
  }

  export type PlacementAvgAggregateOutputType = {
    placementId: number | null
    employeeId: number | null
    branchId: number | null
    unitId: number | null
    divisionId: number | null
  }

  export type PlacementSumAggregateOutputType = {
    placementId: number | null
    employeeId: number | null
    branchId: number | null
    unitId: number | null
    divisionId: number | null
  }

  export type PlacementMinAggregateOutputType = {
    placementId: number | null
    employeeId: number | null
    branchId: number | null
    unitId: number | null
    divisionId: number | null
    placementType: $Enums.PlacementType | null
    effectiveDate: Date | null
  }

  export type PlacementMaxAggregateOutputType = {
    placementId: number | null
    employeeId: number | null
    branchId: number | null
    unitId: number | null
    divisionId: number | null
    placementType: $Enums.PlacementType | null
    effectiveDate: Date | null
  }

  export type PlacementCountAggregateOutputType = {
    placementId: number
    employeeId: number
    branchId: number
    unitId: number
    divisionId: number
    placementType: number
    effectiveDate: number
    _all: number
  }


  export type PlacementAvgAggregateInputType = {
    placementId?: true
    employeeId?: true
    branchId?: true
    unitId?: true
    divisionId?: true
  }

  export type PlacementSumAggregateInputType = {
    placementId?: true
    employeeId?: true
    branchId?: true
    unitId?: true
    divisionId?: true
  }

  export type PlacementMinAggregateInputType = {
    placementId?: true
    employeeId?: true
    branchId?: true
    unitId?: true
    divisionId?: true
    placementType?: true
    effectiveDate?: true
  }

  export type PlacementMaxAggregateInputType = {
    placementId?: true
    employeeId?: true
    branchId?: true
    unitId?: true
    divisionId?: true
    placementType?: true
    effectiveDate?: true
  }

  export type PlacementCountAggregateInputType = {
    placementId?: true
    employeeId?: true
    branchId?: true
    unitId?: true
    divisionId?: true
    placementType?: true
    effectiveDate?: true
    _all?: true
  }

  export type PlacementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Placement to aggregate.
     */
    where?: PlacementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Placements to fetch.
     */
    orderBy?: PlacementOrderByWithRelationInput | PlacementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Placements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Placements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Placements
    **/
    _count?: true | PlacementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlacementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlacementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlacementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlacementMaxAggregateInputType
  }

  export type GetPlacementAggregateType<T extends PlacementAggregateArgs> = {
        [P in keyof T & keyof AggregatePlacement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlacement[P]>
      : GetScalarType<T[P], AggregatePlacement[P]>
  }




  export type PlacementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlacementWhereInput
    orderBy?: PlacementOrderByWithAggregationInput | PlacementOrderByWithAggregationInput[]
    by: PlacementScalarFieldEnum[] | PlacementScalarFieldEnum
    having?: PlacementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlacementCountAggregateInputType | true
    _avg?: PlacementAvgAggregateInputType
    _sum?: PlacementSumAggregateInputType
    _min?: PlacementMinAggregateInputType
    _max?: PlacementMaxAggregateInputType
  }

  export type PlacementGroupByOutputType = {
    placementId: number
    employeeId: number
    branchId: number
    unitId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date
    _count: PlacementCountAggregateOutputType | null
    _avg: PlacementAvgAggregateOutputType | null
    _sum: PlacementSumAggregateOutputType | null
    _min: PlacementMinAggregateOutputType | null
    _max: PlacementMaxAggregateOutputType | null
  }

  type GetPlacementGroupByPayload<T extends PlacementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlacementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlacementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlacementGroupByOutputType[P]>
            : GetScalarType<T[P], PlacementGroupByOutputType[P]>
        }
      >
    >


  export type PlacementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    placementId?: boolean
    employeeId?: boolean
    branchId?: boolean
    unitId?: boolean
    divisionId?: boolean
    placementType?: boolean
    effectiveDate?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["placement"]>



  export type PlacementSelectScalar = {
    placementId?: boolean
    employeeId?: boolean
    branchId?: boolean
    unitId?: boolean
    divisionId?: boolean
    placementType?: boolean
    effectiveDate?: boolean
  }

  export type PlacementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"placementId" | "employeeId" | "branchId" | "unitId" | "divisionId" | "placementType" | "effectiveDate", ExtArgs["result"]["placement"]>
  export type PlacementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    branch?: boolean | BranchDefaultArgs<ExtArgs>
    unit?: boolean | UnitDefaultArgs<ExtArgs>
    division?: boolean | DivisionDefaultArgs<ExtArgs>
  }

  export type $PlacementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Placement"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      branch: Prisma.$BranchPayload<ExtArgs>
      unit: Prisma.$UnitPayload<ExtArgs>
      division: Prisma.$DivisionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      placementId: number
      employeeId: number
      branchId: number
      unitId: number
      divisionId: number
      placementType: $Enums.PlacementType
      effectiveDate: Date
    }, ExtArgs["result"]["placement"]>
    composites: {}
  }

  type PlacementGetPayload<S extends boolean | null | undefined | PlacementDefaultArgs> = $Result.GetResult<Prisma.$PlacementPayload, S>

  type PlacementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlacementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlacementCountAggregateInputType | true
    }

  export interface PlacementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Placement'], meta: { name: 'Placement' } }
    /**
     * Find zero or one Placement that matches the filter.
     * @param {PlacementFindUniqueArgs} args - Arguments to find a Placement
     * @example
     * // Get one Placement
     * const placement = await prisma.placement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlacementFindUniqueArgs>(args: SelectSubset<T, PlacementFindUniqueArgs<ExtArgs>>): Prisma__PlacementClient<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Placement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlacementFindUniqueOrThrowArgs} args - Arguments to find a Placement
     * @example
     * // Get one Placement
     * const placement = await prisma.placement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlacementFindUniqueOrThrowArgs>(args: SelectSubset<T, PlacementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlacementClient<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Placement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementFindFirstArgs} args - Arguments to find a Placement
     * @example
     * // Get one Placement
     * const placement = await prisma.placement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlacementFindFirstArgs>(args?: SelectSubset<T, PlacementFindFirstArgs<ExtArgs>>): Prisma__PlacementClient<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Placement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementFindFirstOrThrowArgs} args - Arguments to find a Placement
     * @example
     * // Get one Placement
     * const placement = await prisma.placement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlacementFindFirstOrThrowArgs>(args?: SelectSubset<T, PlacementFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlacementClient<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Placements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Placements
     * const placements = await prisma.placement.findMany()
     * 
     * // Get first 10 Placements
     * const placements = await prisma.placement.findMany({ take: 10 })
     * 
     * // Only select the `placementId`
     * const placementWithPlacementIdOnly = await prisma.placement.findMany({ select: { placementId: true } })
     * 
     */
    findMany<T extends PlacementFindManyArgs>(args?: SelectSubset<T, PlacementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Placement.
     * @param {PlacementCreateArgs} args - Arguments to create a Placement.
     * @example
     * // Create one Placement
     * const Placement = await prisma.placement.create({
     *   data: {
     *     // ... data to create a Placement
     *   }
     * })
     * 
     */
    create<T extends PlacementCreateArgs>(args: SelectSubset<T, PlacementCreateArgs<ExtArgs>>): Prisma__PlacementClient<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Placements.
     * @param {PlacementCreateManyArgs} args - Arguments to create many Placements.
     * @example
     * // Create many Placements
     * const placement = await prisma.placement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlacementCreateManyArgs>(args?: SelectSubset<T, PlacementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Placement.
     * @param {PlacementDeleteArgs} args - Arguments to delete one Placement.
     * @example
     * // Delete one Placement
     * const Placement = await prisma.placement.delete({
     *   where: {
     *     // ... filter to delete one Placement
     *   }
     * })
     * 
     */
    delete<T extends PlacementDeleteArgs>(args: SelectSubset<T, PlacementDeleteArgs<ExtArgs>>): Prisma__PlacementClient<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Placement.
     * @param {PlacementUpdateArgs} args - Arguments to update one Placement.
     * @example
     * // Update one Placement
     * const placement = await prisma.placement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlacementUpdateArgs>(args: SelectSubset<T, PlacementUpdateArgs<ExtArgs>>): Prisma__PlacementClient<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Placements.
     * @param {PlacementDeleteManyArgs} args - Arguments to filter Placements to delete.
     * @example
     * // Delete a few Placements
     * const { count } = await prisma.placement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlacementDeleteManyArgs>(args?: SelectSubset<T, PlacementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Placements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Placements
     * const placement = await prisma.placement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlacementUpdateManyArgs>(args: SelectSubset<T, PlacementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Placement.
     * @param {PlacementUpsertArgs} args - Arguments to update or create a Placement.
     * @example
     * // Update or create a Placement
     * const placement = await prisma.placement.upsert({
     *   create: {
     *     // ... data to create a Placement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Placement we want to update
     *   }
     * })
     */
    upsert<T extends PlacementUpsertArgs>(args: SelectSubset<T, PlacementUpsertArgs<ExtArgs>>): Prisma__PlacementClient<$Result.GetResult<Prisma.$PlacementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Placements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementCountArgs} args - Arguments to filter Placements to count.
     * @example
     * // Count the number of Placements
     * const count = await prisma.placement.count({
     *   where: {
     *     // ... the filter for the Placements we want to count
     *   }
     * })
    **/
    count<T extends PlacementCountArgs>(
      args?: Subset<T, PlacementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlacementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Placement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlacementAggregateArgs>(args: Subset<T, PlacementAggregateArgs>): Prisma.PrismaPromise<GetPlacementAggregateType<T>>

    /**
     * Group by Placement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlacementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlacementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlacementGroupByArgs['orderBy'] }
        : { orderBy?: PlacementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlacementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlacementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Placement model
   */
  readonly fields: PlacementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Placement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlacementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    branch<T extends BranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BranchDefaultArgs<ExtArgs>>): Prisma__BranchClient<$Result.GetResult<Prisma.$BranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    unit<T extends UnitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnitDefaultArgs<ExtArgs>>): Prisma__UnitClient<$Result.GetResult<Prisma.$UnitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    division<T extends DivisionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DivisionDefaultArgs<ExtArgs>>): Prisma__DivisionClient<$Result.GetResult<Prisma.$DivisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Placement model
   */
  interface PlacementFieldRefs {
    readonly placementId: FieldRef<"Placement", 'Int'>
    readonly employeeId: FieldRef<"Placement", 'Int'>
    readonly branchId: FieldRef<"Placement", 'Int'>
    readonly unitId: FieldRef<"Placement", 'Int'>
    readonly divisionId: FieldRef<"Placement", 'Int'>
    readonly placementType: FieldRef<"Placement", 'PlacementType'>
    readonly effectiveDate: FieldRef<"Placement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Placement findUnique
   */
  export type PlacementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * Filter, which Placement to fetch.
     */
    where: PlacementWhereUniqueInput
  }

  /**
   * Placement findUniqueOrThrow
   */
  export type PlacementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * Filter, which Placement to fetch.
     */
    where: PlacementWhereUniqueInput
  }

  /**
   * Placement findFirst
   */
  export type PlacementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * Filter, which Placement to fetch.
     */
    where?: PlacementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Placements to fetch.
     */
    orderBy?: PlacementOrderByWithRelationInput | PlacementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Placements.
     */
    cursor?: PlacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Placements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Placements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Placements.
     */
    distinct?: PlacementScalarFieldEnum | PlacementScalarFieldEnum[]
  }

  /**
   * Placement findFirstOrThrow
   */
  export type PlacementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * Filter, which Placement to fetch.
     */
    where?: PlacementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Placements to fetch.
     */
    orderBy?: PlacementOrderByWithRelationInput | PlacementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Placements.
     */
    cursor?: PlacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Placements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Placements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Placements.
     */
    distinct?: PlacementScalarFieldEnum | PlacementScalarFieldEnum[]
  }

  /**
   * Placement findMany
   */
  export type PlacementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * Filter, which Placements to fetch.
     */
    where?: PlacementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Placements to fetch.
     */
    orderBy?: PlacementOrderByWithRelationInput | PlacementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Placements.
     */
    cursor?: PlacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Placements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Placements.
     */
    skip?: number
    distinct?: PlacementScalarFieldEnum | PlacementScalarFieldEnum[]
  }

  /**
   * Placement create
   */
  export type PlacementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * The data needed to create a Placement.
     */
    data: XOR<PlacementCreateInput, PlacementUncheckedCreateInput>
  }

  /**
   * Placement createMany
   */
  export type PlacementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Placements.
     */
    data: PlacementCreateManyInput | PlacementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Placement update
   */
  export type PlacementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * The data needed to update a Placement.
     */
    data: XOR<PlacementUpdateInput, PlacementUncheckedUpdateInput>
    /**
     * Choose, which Placement to update.
     */
    where: PlacementWhereUniqueInput
  }

  /**
   * Placement updateMany
   */
  export type PlacementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Placements.
     */
    data: XOR<PlacementUpdateManyMutationInput, PlacementUncheckedUpdateManyInput>
    /**
     * Filter which Placements to update
     */
    where?: PlacementWhereInput
    /**
     * Limit how many Placements to update.
     */
    limit?: number
  }

  /**
   * Placement upsert
   */
  export type PlacementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * The filter to search for the Placement to update in case it exists.
     */
    where: PlacementWhereUniqueInput
    /**
     * In case the Placement found by the `where` argument doesn't exist, create a new Placement with this data.
     */
    create: XOR<PlacementCreateInput, PlacementUncheckedCreateInput>
    /**
     * In case the Placement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlacementUpdateInput, PlacementUncheckedUpdateInput>
  }

  /**
   * Placement delete
   */
  export type PlacementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
    /**
     * Filter which Placement to delete.
     */
    where: PlacementWhereUniqueInput
  }

  /**
   * Placement deleteMany
   */
  export type PlacementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Placements to delete
     */
    where?: PlacementWhereInput
    /**
     * Limit how many Placements to delete.
     */
    limit?: number
  }

  /**
   * Placement without action
   */
  export type PlacementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Placement
     */
    select?: PlacementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Placement
     */
    omit?: PlacementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlacementInclude<ExtArgs> | null
  }


  /**
   * Model Recommendation
   */

  export type AggregateRecommendation = {
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  export type RecommendationAvgAggregateOutputType = {
    RecommendationId: number | null
    employeeId: number | null
    userId: number | null
  }

  export type RecommendationSumAggregateOutputType = {
    RecommendationId: number | null
    employeeId: number | null
    userId: number | null
  }

  export type RecommendationMinAggregateOutputType = {
    RecommendationId: number | null
    employeeId: number | null
    userId: number | null
    recommendationDate: Date | null
    status: $Enums.RecommendationStatus | null
    type: $Enums.RecommendationType | null
    processDate: Date | null
    fileCode: string | null
  }

  export type RecommendationMaxAggregateOutputType = {
    RecommendationId: number | null
    employeeId: number | null
    userId: number | null
    recommendationDate: Date | null
    status: $Enums.RecommendationStatus | null
    type: $Enums.RecommendationType | null
    processDate: Date | null
    fileCode: string | null
  }

  export type RecommendationCountAggregateOutputType = {
    RecommendationId: number
    employeeId: number
    userId: number
    recommendationDate: number
    status: number
    type: number
    processDate: number
    fileCode: number
    _all: number
  }


  export type RecommendationAvgAggregateInputType = {
    RecommendationId?: true
    employeeId?: true
    userId?: true
  }

  export type RecommendationSumAggregateInputType = {
    RecommendationId?: true
    employeeId?: true
    userId?: true
  }

  export type RecommendationMinAggregateInputType = {
    RecommendationId?: true
    employeeId?: true
    userId?: true
    recommendationDate?: true
    status?: true
    type?: true
    processDate?: true
    fileCode?: true
  }

  export type RecommendationMaxAggregateInputType = {
    RecommendationId?: true
    employeeId?: true
    userId?: true
    recommendationDate?: true
    status?: true
    type?: true
    processDate?: true
    fileCode?: true
  }

  export type RecommendationCountAggregateInputType = {
    RecommendationId?: true
    employeeId?: true
    userId?: true
    recommendationDate?: true
    status?: true
    type?: true
    processDate?: true
    fileCode?: true
    _all?: true
  }

  export type RecommendationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendation to aggregate.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recommendations
    **/
    _count?: true | RecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecommendationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecommendationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationMaxAggregateInputType
  }

  export type GetRecommendationAggregateType<T extends RecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendation[P]>
      : GetScalarType<T[P], AggregateRecommendation[P]>
  }




  export type RecommendationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithAggregationInput | RecommendationOrderByWithAggregationInput[]
    by: RecommendationScalarFieldEnum[] | RecommendationScalarFieldEnum
    having?: RecommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationCountAggregateInputType | true
    _avg?: RecommendationAvgAggregateInputType
    _sum?: RecommendationSumAggregateInputType
    _min?: RecommendationMinAggregateInputType
    _max?: RecommendationMaxAggregateInputType
  }

  export type RecommendationGroupByOutputType = {
    RecommendationId: number
    employeeId: number
    userId: number
    recommendationDate: Date
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate: Date | null
    fileCode: string
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  type GetRecommendationGroupByPayload<T extends RecommendationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
        }
      >
    >


  export type RecommendationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    RecommendationId?: boolean
    employeeId?: boolean
    userId?: boolean
    recommendationDate?: boolean
    status?: boolean
    type?: boolean
    processDate?: boolean
    fileCode?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>



  export type RecommendationSelectScalar = {
    RecommendationId?: boolean
    employeeId?: boolean
    userId?: boolean
    recommendationDate?: boolean
    status?: boolean
    type?: boolean
    processDate?: boolean
    fileCode?: boolean
  }

  export type RecommendationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"RecommendationId" | "employeeId" | "userId" | "recommendationDate" | "status" | "type" | "processDate" | "fileCode", ExtArgs["result"]["recommendation"]>
  export type RecommendationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RecommendationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recommendation"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      RecommendationId: number
      employeeId: number
      userId: number
      recommendationDate: Date
      status: $Enums.RecommendationStatus
      type: $Enums.RecommendationType
      processDate: Date | null
      fileCode: string
    }, ExtArgs["result"]["recommendation"]>
    composites: {}
  }

  type RecommendationGetPayload<S extends boolean | null | undefined | RecommendationDefaultArgs> = $Result.GetResult<Prisma.$RecommendationPayload, S>

  type RecommendationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecommendationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecommendationCountAggregateInputType | true
    }

  export interface RecommendationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recommendation'], meta: { name: 'Recommendation' } }
    /**
     * Find zero or one Recommendation that matches the filter.
     * @param {RecommendationFindUniqueArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecommendationFindUniqueArgs>(args: SelectSubset<T, RecommendationFindUniqueArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recommendation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecommendationFindUniqueOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecommendationFindUniqueOrThrowArgs>(args: SelectSubset<T, RecommendationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecommendationFindFirstArgs>(args?: SelectSubset<T, RecommendationFindFirstArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecommendationFindFirstOrThrowArgs>(args?: SelectSubset<T, RecommendationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendations
     * const recommendations = await prisma.recommendation.findMany()
     * 
     * // Get first 10 Recommendations
     * const recommendations = await prisma.recommendation.findMany({ take: 10 })
     * 
     * // Only select the `RecommendationId`
     * const recommendationWithRecommendationIdOnly = await prisma.recommendation.findMany({ select: { RecommendationId: true } })
     * 
     */
    findMany<T extends RecommendationFindManyArgs>(args?: SelectSubset<T, RecommendationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recommendation.
     * @param {RecommendationCreateArgs} args - Arguments to create a Recommendation.
     * @example
     * // Create one Recommendation
     * const Recommendation = await prisma.recommendation.create({
     *   data: {
     *     // ... data to create a Recommendation
     *   }
     * })
     * 
     */
    create<T extends RecommendationCreateArgs>(args: SelectSubset<T, RecommendationCreateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recommendations.
     * @param {RecommendationCreateManyArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendation = await prisma.recommendation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecommendationCreateManyArgs>(args?: SelectSubset<T, RecommendationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recommendation.
     * @param {RecommendationDeleteArgs} args - Arguments to delete one Recommendation.
     * @example
     * // Delete one Recommendation
     * const Recommendation = await prisma.recommendation.delete({
     *   where: {
     *     // ... filter to delete one Recommendation
     *   }
     * })
     * 
     */
    delete<T extends RecommendationDeleteArgs>(args: SelectSubset<T, RecommendationDeleteArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recommendation.
     * @param {RecommendationUpdateArgs} args - Arguments to update one Recommendation.
     * @example
     * // Update one Recommendation
     * const recommendation = await prisma.recommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecommendationUpdateArgs>(args: SelectSubset<T, RecommendationUpdateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recommendations.
     * @param {RecommendationDeleteManyArgs} args - Arguments to filter Recommendations to delete.
     * @example
     * // Delete a few Recommendations
     * const { count } = await prisma.recommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecommendationDeleteManyArgs>(args?: SelectSubset<T, RecommendationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecommendationUpdateManyArgs>(args: SelectSubset<T, RecommendationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recommendation.
     * @param {RecommendationUpsertArgs} args - Arguments to update or create a Recommendation.
     * @example
     * // Update or create a Recommendation
     * const recommendation = await prisma.recommendation.upsert({
     *   create: {
     *     // ... data to create a Recommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommendation we want to update
     *   }
     * })
     */
    upsert<T extends RecommendationUpsertArgs>(args: SelectSubset<T, RecommendationUpsertArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationCountArgs} args - Arguments to filter Recommendations to count.
     * @example
     * // Count the number of Recommendations
     * const count = await prisma.recommendation.count({
     *   where: {
     *     // ... the filter for the Recommendations we want to count
     *   }
     * })
    **/
    count<T extends RecommendationCountArgs>(
      args?: Subset<T, RecommendationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationAggregateArgs>(args: Subset<T, RecommendationAggregateArgs>): Prisma.PrismaPromise<GetRecommendationAggregateType<T>>

    /**
     * Group by Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendationGroupByArgs['orderBy'] }
        : { orderBy?: RecommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recommendation model
   */
  readonly fields: RecommendationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecommendationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recommendation model
   */
  interface RecommendationFieldRefs {
    readonly RecommendationId: FieldRef<"Recommendation", 'Int'>
    readonly employeeId: FieldRef<"Recommendation", 'Int'>
    readonly userId: FieldRef<"Recommendation", 'Int'>
    readonly recommendationDate: FieldRef<"Recommendation", 'DateTime'>
    readonly status: FieldRef<"Recommendation", 'RecommendationStatus'>
    readonly type: FieldRef<"Recommendation", 'RecommendationType'>
    readonly processDate: FieldRef<"Recommendation", 'DateTime'>
    readonly fileCode: FieldRef<"Recommendation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Recommendation findUnique
   */
  export type RecommendationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findUniqueOrThrow
   */
  export type RecommendationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findFirst
   */
  export type RecommendationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findFirstOrThrow
   */
  export type RecommendationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findMany
   */
  export type RecommendationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendations to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation create
   */
  export type RecommendationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to create a Recommendation.
     */
    data: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
  }

  /**
   * Recommendation createMany
   */
  export type RecommendationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recommendations.
     */
    data: RecommendationCreateManyInput | RecommendationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recommendation update
   */
  export type RecommendationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to update a Recommendation.
     */
    data: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
    /**
     * Choose, which Recommendation to update.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation updateMany
   */
  export type RecommendationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recommendations.
     */
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyInput>
    /**
     * Filter which Recommendations to update
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to update.
     */
    limit?: number
  }

  /**
   * Recommendation upsert
   */
  export type RecommendationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The filter to search for the Recommendation to update in case it exists.
     */
    where: RecommendationWhereUniqueInput
    /**
     * In case the Recommendation found by the `where` argument doesn't exist, create a new Recommendation with this data.
     */
    create: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
    /**
     * In case the Recommendation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
  }

  /**
   * Recommendation delete
   */
  export type RecommendationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter which Recommendation to delete.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation deleteMany
   */
  export type RecommendationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendations to delete
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to delete.
     */
    limit?: number
  }

  /**
   * Recommendation without action
   */
  export type RecommendationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BranchScalarFieldEnum: {
    branchId: 'branchId',
    branchName: 'branchName'
  };

  export type BranchScalarFieldEnum = (typeof BranchScalarFieldEnum)[keyof typeof BranchScalarFieldEnum]


  export const UnitScalarFieldEnum: {
    unitId: 'unitId',
    unitName: 'unitName'
  };

  export type UnitScalarFieldEnum = (typeof UnitScalarFieldEnum)[keyof typeof UnitScalarFieldEnum]


  export const DivisionScalarFieldEnum: {
    divisionId: 'divisionId',
    divisionName: 'divisionName'
  };

  export type DivisionScalarFieldEnum = (typeof DivisionScalarFieldEnum)[keyof typeof DivisionScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    educationId: 'educationId',
    level: 'level',
    major: 'major'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const PositionScalarFieldEnum: {
    positionId: 'positionId',
    positionName: 'positionName'
  };

  export type PositionScalarFieldEnum = (typeof PositionScalarFieldEnum)[keyof typeof PositionScalarFieldEnum]


  export const BaseSalaryScalarFieldEnum: {
    baseSalaryId: 'baseSalaryId',
    amount: 'amount',
    type: 'type',
    yearsOfService: 'yearsOfService'
  };

  export type BaseSalaryScalarFieldEnum = (typeof BaseSalaryScalarFieldEnum)[keyof typeof BaseSalaryScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    gradeId: 'gradeId',
    baseSalaryId: 'baseSalaryId',
    title: 'title',
    grade: 'grade'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    username: 'username',
    password: 'password',
    email: 'email',
    phoneNumber: 'phoneNumber',
    role: 'role',
    token: 'token'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    educationId: 'educationId',
    gradeId: 'gradeId',
    positionId: 'positionId',
    fullName: 'fullName',
    nipp: 'nipp',
    birthPlace: 'birthPlace',
    birthDate: 'birthDate',
    gender: 'gender',
    kkNumber: 'kkNumber',
    nik: 'nik',
    employeeStatus: 'employeeStatus',
    familyStatus: 'familyStatus',
    address: 'address',
    photoUrl: 'photoUrl'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const FamilyMemberScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    nik: 'nik',
    name: 'name',
    birthPlace: 'birthPlace',
    birthDate: 'birthDate',
    gender: 'gender',
    marriageDate: 'marriageDate',
    familyStatus: 'familyStatus'
  };

  export type FamilyMemberScalarFieldEnum = (typeof FamilyMemberScalarFieldEnum)[keyof typeof FamilyMemberScalarFieldEnum]


  export const InfractionScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    decreeNumber: 'decreeNumber',
    name: 'name',
    description: 'description'
  };

  export type InfractionScalarFieldEnum = (typeof InfractionScalarFieldEnum)[keyof typeof InfractionScalarFieldEnum]


  export const SalaryHistoryScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    gradeId: 'gradeId',
    baseSalaryId: 'baseSalaryId',
    amount: 'amount',
    effectiveDate: 'effectiveDate'
  };

  export type SalaryHistoryScalarFieldEnum = (typeof SalaryHistoryScalarFieldEnum)[keyof typeof SalaryHistoryScalarFieldEnum]


  export const GradeHistoryScalarFieldEnum: {
    gradeHistoryId: 'gradeHistoryId',
    employeeId: 'employeeId',
    gradeId: 'gradeId',
    rankName: 'rankName',
    gradeName: 'gradeName',
    effectiveDate: 'effectiveDate'
  };

  export type GradeHistoryScalarFieldEnum = (typeof GradeHistoryScalarFieldEnum)[keyof typeof GradeHistoryScalarFieldEnum]


  export const PlacementScalarFieldEnum: {
    placementId: 'placementId',
    employeeId: 'employeeId',
    branchId: 'branchId',
    unitId: 'unitId',
    divisionId: 'divisionId',
    placementType: 'placementType',
    effectiveDate: 'effectiveDate'
  };

  export type PlacementScalarFieldEnum = (typeof PlacementScalarFieldEnum)[keyof typeof PlacementScalarFieldEnum]


  export const RecommendationScalarFieldEnum: {
    RecommendationId: 'RecommendationId',
    employeeId: 'employeeId',
    userId: 'userId',
    recommendationDate: 'recommendationDate',
    status: 'status',
    type: 'type',
    processDate: 'processDate',
    fileCode: 'fileCode'
  };

  export type RecommendationScalarFieldEnum = (typeof RecommendationScalarFieldEnum)[keyof typeof RecommendationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const BranchOrderByRelevanceFieldEnum: {
    branchName: 'branchName'
  };

  export type BranchOrderByRelevanceFieldEnum = (typeof BranchOrderByRelevanceFieldEnum)[keyof typeof BranchOrderByRelevanceFieldEnum]


  export const UnitOrderByRelevanceFieldEnum: {
    unitName: 'unitName'
  };

  export type UnitOrderByRelevanceFieldEnum = (typeof UnitOrderByRelevanceFieldEnum)[keyof typeof UnitOrderByRelevanceFieldEnum]


  export const DivisionOrderByRelevanceFieldEnum: {
    divisionName: 'divisionName'
  };

  export type DivisionOrderByRelevanceFieldEnum = (typeof DivisionOrderByRelevanceFieldEnum)[keyof typeof DivisionOrderByRelevanceFieldEnum]


  export const EducationOrderByRelevanceFieldEnum: {
    level: 'level',
    major: 'major'
  };

  export type EducationOrderByRelevanceFieldEnum = (typeof EducationOrderByRelevanceFieldEnum)[keyof typeof EducationOrderByRelevanceFieldEnum]


  export const PositionOrderByRelevanceFieldEnum: {
    positionName: 'positionName'
  };

  export type PositionOrderByRelevanceFieldEnum = (typeof PositionOrderByRelevanceFieldEnum)[keyof typeof PositionOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const BaseSalaryOrderByRelevanceFieldEnum: {
    type: 'type',
    yearsOfService: 'yearsOfService'
  };

  export type BaseSalaryOrderByRelevanceFieldEnum = (typeof BaseSalaryOrderByRelevanceFieldEnum)[keyof typeof BaseSalaryOrderByRelevanceFieldEnum]


  export const GradeOrderByRelevanceFieldEnum: {
    title: 'title',
    grade: 'grade'
  };

  export type GradeOrderByRelevanceFieldEnum = (typeof GradeOrderByRelevanceFieldEnum)[keyof typeof GradeOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    username: 'username',
    password: 'password',
    email: 'email',
    phoneNumber: 'phoneNumber',
    token: 'token'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const EmployeeOrderByRelevanceFieldEnum: {
    fullName: 'fullName',
    nipp: 'nipp',
    birthPlace: 'birthPlace',
    kkNumber: 'kkNumber',
    nik: 'nik',
    address: 'address',
    photoUrl: 'photoUrl'
  };

  export type EmployeeOrderByRelevanceFieldEnum = (typeof EmployeeOrderByRelevanceFieldEnum)[keyof typeof EmployeeOrderByRelevanceFieldEnum]


  export const FamilyMemberOrderByRelevanceFieldEnum: {
    nik: 'nik',
    name: 'name',
    birthPlace: 'birthPlace'
  };

  export type FamilyMemberOrderByRelevanceFieldEnum = (typeof FamilyMemberOrderByRelevanceFieldEnum)[keyof typeof FamilyMemberOrderByRelevanceFieldEnum]


  export const InfractionOrderByRelevanceFieldEnum: {
    decreeNumber: 'decreeNumber',
    name: 'name',
    description: 'description'
  };

  export type InfractionOrderByRelevanceFieldEnum = (typeof InfractionOrderByRelevanceFieldEnum)[keyof typeof InfractionOrderByRelevanceFieldEnum]


  export const GradeHistoryOrderByRelevanceFieldEnum: {
    rankName: 'rankName',
    gradeName: 'gradeName'
  };

  export type GradeHistoryOrderByRelevanceFieldEnum = (typeof GradeHistoryOrderByRelevanceFieldEnum)[keyof typeof GradeHistoryOrderByRelevanceFieldEnum]


  export const RecommendationOrderByRelevanceFieldEnum: {
    fileCode: 'fileCode'
  };

  export type RecommendationOrderByRelevanceFieldEnum = (typeof RecommendationOrderByRelevanceFieldEnum)[keyof typeof RecommendationOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'EmployeeStatus'
   */
  export type EnumEmployeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmployeeStatus'>
    


  /**
   * Reference to a field of type 'FamilyStatus'
   */
  export type EnumFamilyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FamilyStatus'>
    


  /**
   * Reference to a field of type 'PlacementType'
   */
  export type EnumPlacementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlacementType'>
    


  /**
   * Reference to a field of type 'RecommendationStatus'
   */
  export type EnumRecommendationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RecommendationStatus'>
    


  /**
   * Reference to a field of type 'RecommendationType'
   */
  export type EnumRecommendationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RecommendationType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type BranchWhereInput = {
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    branchId?: IntFilter<"Branch"> | number
    branchName?: StringFilter<"Branch"> | string
    placements?: PlacementListRelationFilter
  }

  export type BranchOrderByWithRelationInput = {
    branchId?: SortOrder
    branchName?: SortOrder
    placements?: PlacementOrderByRelationAggregateInput
    _relevance?: BranchOrderByRelevanceInput
  }

  export type BranchWhereUniqueInput = Prisma.AtLeast<{
    branchId?: number
    AND?: BranchWhereInput | BranchWhereInput[]
    OR?: BranchWhereInput[]
    NOT?: BranchWhereInput | BranchWhereInput[]
    branchName?: StringFilter<"Branch"> | string
    placements?: PlacementListRelationFilter
  }, "branchId">

  export type BranchOrderByWithAggregationInput = {
    branchId?: SortOrder
    branchName?: SortOrder
    _count?: BranchCountOrderByAggregateInput
    _avg?: BranchAvgOrderByAggregateInput
    _max?: BranchMaxOrderByAggregateInput
    _min?: BranchMinOrderByAggregateInput
    _sum?: BranchSumOrderByAggregateInput
  }

  export type BranchScalarWhereWithAggregatesInput = {
    AND?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    OR?: BranchScalarWhereWithAggregatesInput[]
    NOT?: BranchScalarWhereWithAggregatesInput | BranchScalarWhereWithAggregatesInput[]
    branchId?: IntWithAggregatesFilter<"Branch"> | number
    branchName?: StringWithAggregatesFilter<"Branch"> | string
  }

  export type UnitWhereInput = {
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    unitId?: IntFilter<"Unit"> | number
    unitName?: StringFilter<"Unit"> | string
    placements?: PlacementListRelationFilter
  }

  export type UnitOrderByWithRelationInput = {
    unitId?: SortOrder
    unitName?: SortOrder
    placements?: PlacementOrderByRelationAggregateInput
    _relevance?: UnitOrderByRelevanceInput
  }

  export type UnitWhereUniqueInput = Prisma.AtLeast<{
    unitId?: number
    AND?: UnitWhereInput | UnitWhereInput[]
    OR?: UnitWhereInput[]
    NOT?: UnitWhereInput | UnitWhereInput[]
    unitName?: StringFilter<"Unit"> | string
    placements?: PlacementListRelationFilter
  }, "unitId">

  export type UnitOrderByWithAggregationInput = {
    unitId?: SortOrder
    unitName?: SortOrder
    _count?: UnitCountOrderByAggregateInput
    _avg?: UnitAvgOrderByAggregateInput
    _max?: UnitMaxOrderByAggregateInput
    _min?: UnitMinOrderByAggregateInput
    _sum?: UnitSumOrderByAggregateInput
  }

  export type UnitScalarWhereWithAggregatesInput = {
    AND?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    OR?: UnitScalarWhereWithAggregatesInput[]
    NOT?: UnitScalarWhereWithAggregatesInput | UnitScalarWhereWithAggregatesInput[]
    unitId?: IntWithAggregatesFilter<"Unit"> | number
    unitName?: StringWithAggregatesFilter<"Unit"> | string
  }

  export type DivisionWhereInput = {
    AND?: DivisionWhereInput | DivisionWhereInput[]
    OR?: DivisionWhereInput[]
    NOT?: DivisionWhereInput | DivisionWhereInput[]
    divisionId?: IntFilter<"Division"> | number
    divisionName?: StringFilter<"Division"> | string
    placements?: PlacementListRelationFilter
  }

  export type DivisionOrderByWithRelationInput = {
    divisionId?: SortOrder
    divisionName?: SortOrder
    placements?: PlacementOrderByRelationAggregateInput
    _relevance?: DivisionOrderByRelevanceInput
  }

  export type DivisionWhereUniqueInput = Prisma.AtLeast<{
    divisionId?: number
    AND?: DivisionWhereInput | DivisionWhereInput[]
    OR?: DivisionWhereInput[]
    NOT?: DivisionWhereInput | DivisionWhereInput[]
    divisionName?: StringFilter<"Division"> | string
    placements?: PlacementListRelationFilter
  }, "divisionId">

  export type DivisionOrderByWithAggregationInput = {
    divisionId?: SortOrder
    divisionName?: SortOrder
    _count?: DivisionCountOrderByAggregateInput
    _avg?: DivisionAvgOrderByAggregateInput
    _max?: DivisionMaxOrderByAggregateInput
    _min?: DivisionMinOrderByAggregateInput
    _sum?: DivisionSumOrderByAggregateInput
  }

  export type DivisionScalarWhereWithAggregatesInput = {
    AND?: DivisionScalarWhereWithAggregatesInput | DivisionScalarWhereWithAggregatesInput[]
    OR?: DivisionScalarWhereWithAggregatesInput[]
    NOT?: DivisionScalarWhereWithAggregatesInput | DivisionScalarWhereWithAggregatesInput[]
    divisionId?: IntWithAggregatesFilter<"Division"> | number
    divisionName?: StringWithAggregatesFilter<"Division"> | string
  }

  export type EducationWhereInput = {
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    educationId?: IntFilter<"Education"> | number
    level?: StringFilter<"Education"> | string
    major?: StringFilter<"Education"> | string
    employees?: EmployeeListRelationFilter
  }

  export type EducationOrderByWithRelationInput = {
    educationId?: SortOrder
    level?: SortOrder
    major?: SortOrder
    employees?: EmployeeOrderByRelationAggregateInput
    _relevance?: EducationOrderByRelevanceInput
  }

  export type EducationWhereUniqueInput = Prisma.AtLeast<{
    educationId?: number
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    level?: StringFilter<"Education"> | string
    major?: StringFilter<"Education"> | string
    employees?: EmployeeListRelationFilter
  }, "educationId">

  export type EducationOrderByWithAggregationInput = {
    educationId?: SortOrder
    level?: SortOrder
    major?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _avg?: EducationAvgOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
    _sum?: EducationSumOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    OR?: EducationScalarWhereWithAggregatesInput[]
    NOT?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    educationId?: IntWithAggregatesFilter<"Education"> | number
    level?: StringWithAggregatesFilter<"Education"> | string
    major?: StringWithAggregatesFilter<"Education"> | string
  }

  export type PositionWhereInput = {
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    positionId?: IntFilter<"Position"> | number
    positionName?: StringFilter<"Position"> | string
    employees?: EmployeeListRelationFilter
  }

  export type PositionOrderByWithRelationInput = {
    positionId?: SortOrder
    positionName?: SortOrder
    employees?: EmployeeOrderByRelationAggregateInput
    _relevance?: PositionOrderByRelevanceInput
  }

  export type PositionWhereUniqueInput = Prisma.AtLeast<{
    positionId?: number
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    positionName?: StringFilter<"Position"> | string
    employees?: EmployeeListRelationFilter
  }, "positionId">

  export type PositionOrderByWithAggregationInput = {
    positionId?: SortOrder
    positionName?: SortOrder
    _count?: PositionCountOrderByAggregateInput
    _avg?: PositionAvgOrderByAggregateInput
    _max?: PositionMaxOrderByAggregateInput
    _min?: PositionMinOrderByAggregateInput
    _sum?: PositionSumOrderByAggregateInput
  }

  export type PositionScalarWhereWithAggregatesInput = {
    AND?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    OR?: PositionScalarWhereWithAggregatesInput[]
    NOT?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    positionId?: IntWithAggregatesFilter<"Position"> | number
    positionName?: StringWithAggregatesFilter<"Position"> | string
  }

  export type BaseSalaryWhereInput = {
    AND?: BaseSalaryWhereInput | BaseSalaryWhereInput[]
    OR?: BaseSalaryWhereInput[]
    NOT?: BaseSalaryWhereInput | BaseSalaryWhereInput[]
    baseSalaryId?: IntFilter<"BaseSalary"> | number
    amount?: IntFilter<"BaseSalary"> | number
    type?: StringFilter<"BaseSalary"> | string
    yearsOfService?: StringNullableFilter<"BaseSalary"> | string | null
    grades?: GradeListRelationFilter
    salaryHistories?: SalaryHistoryListRelationFilter
  }

  export type BaseSalaryOrderByWithRelationInput = {
    baseSalaryId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    yearsOfService?: SortOrderInput | SortOrder
    grades?: GradeOrderByRelationAggregateInput
    salaryHistories?: SalaryHistoryOrderByRelationAggregateInput
    _relevance?: BaseSalaryOrderByRelevanceInput
  }

  export type BaseSalaryWhereUniqueInput = Prisma.AtLeast<{
    baseSalaryId?: number
    AND?: BaseSalaryWhereInput | BaseSalaryWhereInput[]
    OR?: BaseSalaryWhereInput[]
    NOT?: BaseSalaryWhereInput | BaseSalaryWhereInput[]
    amount?: IntFilter<"BaseSalary"> | number
    type?: StringFilter<"BaseSalary"> | string
    yearsOfService?: StringNullableFilter<"BaseSalary"> | string | null
    grades?: GradeListRelationFilter
    salaryHistories?: SalaryHistoryListRelationFilter
  }, "baseSalaryId">

  export type BaseSalaryOrderByWithAggregationInput = {
    baseSalaryId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    yearsOfService?: SortOrderInput | SortOrder
    _count?: BaseSalaryCountOrderByAggregateInput
    _avg?: BaseSalaryAvgOrderByAggregateInput
    _max?: BaseSalaryMaxOrderByAggregateInput
    _min?: BaseSalaryMinOrderByAggregateInput
    _sum?: BaseSalarySumOrderByAggregateInput
  }

  export type BaseSalaryScalarWhereWithAggregatesInput = {
    AND?: BaseSalaryScalarWhereWithAggregatesInput | BaseSalaryScalarWhereWithAggregatesInput[]
    OR?: BaseSalaryScalarWhereWithAggregatesInput[]
    NOT?: BaseSalaryScalarWhereWithAggregatesInput | BaseSalaryScalarWhereWithAggregatesInput[]
    baseSalaryId?: IntWithAggregatesFilter<"BaseSalary"> | number
    amount?: IntWithAggregatesFilter<"BaseSalary"> | number
    type?: StringWithAggregatesFilter<"BaseSalary"> | string
    yearsOfService?: StringNullableWithAggregatesFilter<"BaseSalary"> | string | null
  }

  export type GradeWhereInput = {
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    gradeId?: IntFilter<"Grade"> | number
    baseSalaryId?: IntFilter<"Grade"> | number
    title?: StringFilter<"Grade"> | string
    grade?: StringFilter<"Grade"> | string
    baseSalary?: XOR<BaseSalaryScalarRelationFilter, BaseSalaryWhereInput>
    employees?: EmployeeListRelationFilter
    gradeHistories?: GradeHistoryListRelationFilter
    salaryHistories?: SalaryHistoryListRelationFilter
  }

  export type GradeOrderByWithRelationInput = {
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    title?: SortOrder
    grade?: SortOrder
    baseSalary?: BaseSalaryOrderByWithRelationInput
    employees?: EmployeeOrderByRelationAggregateInput
    gradeHistories?: GradeHistoryOrderByRelationAggregateInput
    salaryHistories?: SalaryHistoryOrderByRelationAggregateInput
    _relevance?: GradeOrderByRelevanceInput
  }

  export type GradeWhereUniqueInput = Prisma.AtLeast<{
    gradeId?: number
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    baseSalaryId?: IntFilter<"Grade"> | number
    title?: StringFilter<"Grade"> | string
    grade?: StringFilter<"Grade"> | string
    baseSalary?: XOR<BaseSalaryScalarRelationFilter, BaseSalaryWhereInput>
    employees?: EmployeeListRelationFilter
    gradeHistories?: GradeHistoryListRelationFilter
    salaryHistories?: SalaryHistoryListRelationFilter
  }, "gradeId">

  export type GradeOrderByWithAggregationInput = {
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    title?: SortOrder
    grade?: SortOrder
    _count?: GradeCountOrderByAggregateInput
    _avg?: GradeAvgOrderByAggregateInput
    _max?: GradeMaxOrderByAggregateInput
    _min?: GradeMinOrderByAggregateInput
    _sum?: GradeSumOrderByAggregateInput
  }

  export type GradeScalarWhereWithAggregatesInput = {
    AND?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    OR?: GradeScalarWhereWithAggregatesInput[]
    NOT?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    gradeId?: IntWithAggregatesFilter<"Grade"> | number
    baseSalaryId?: IntWithAggregatesFilter<"Grade"> | number
    title?: StringWithAggregatesFilter<"Grade"> | string
    grade?: StringWithAggregatesFilter<"Grade"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    token?: StringNullableFilter<"User"> | string | null
    employees?: EmployeeListRelationFilter
    recommendations?: RecommendationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    token?: SortOrderInput | SortOrder
    employees?: EmployeeOrderByRelationAggregateInput
    recommendations?: RecommendationOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    token?: StringNullableFilter<"User"> | string | null
    employees?: EmployeeListRelationFilter
    recommendations?: RecommendationListRelationFilter
  }, "userId" | "username">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    token?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    token?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: IntFilter<"Employee"> | number
    userId?: IntFilter<"Employee"> | number
    educationId?: IntFilter<"Employee"> | number
    gradeId?: IntFilter<"Employee"> | number
    positionId?: IntFilter<"Employee"> | number
    fullName?: StringFilter<"Employee"> | string
    nipp?: StringFilter<"Employee"> | string
    birthPlace?: StringFilter<"Employee"> | string
    birthDate?: DateTimeFilter<"Employee"> | Date | string
    gender?: EnumGenderFilter<"Employee"> | $Enums.Gender
    kkNumber?: StringFilter<"Employee"> | string
    nik?: StringFilter<"Employee"> | string
    employeeStatus?: EnumEmployeeStatusFilter<"Employee"> | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFilter<"Employee"> | $Enums.FamilyStatus
    address?: StringFilter<"Employee"> | string
    photoUrl?: StringFilter<"Employee"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    education?: XOR<EducationScalarRelationFilter, EducationWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    position?: XOR<PositionScalarRelationFilter, PositionWhereInput>
    familyMembers?: FamilyMemberListRelationFilter
    infractions?: InfractionListRelationFilter
    gradeHistories?: GradeHistoryListRelationFilter
    salaryHistories?: SalaryHistoryListRelationFilter
    placements?: PlacementListRelationFilter
    recommendations?: RecommendationListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    educationId?: SortOrder
    gradeId?: SortOrder
    positionId?: SortOrder
    fullName?: SortOrder
    nipp?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    kkNumber?: SortOrder
    nik?: SortOrder
    employeeStatus?: SortOrder
    familyStatus?: SortOrder
    address?: SortOrder
    photoUrl?: SortOrder
    user?: UserOrderByWithRelationInput
    education?: EducationOrderByWithRelationInput
    grade?: GradeOrderByWithRelationInput
    position?: PositionOrderByWithRelationInput
    familyMembers?: FamilyMemberOrderByRelationAggregateInput
    infractions?: InfractionOrderByRelationAggregateInput
    gradeHistories?: GradeHistoryOrderByRelationAggregateInput
    salaryHistories?: SalaryHistoryOrderByRelationAggregateInput
    placements?: PlacementOrderByRelationAggregateInput
    recommendations?: RecommendationOrderByRelationAggregateInput
    _relevance?: EmployeeOrderByRelevanceInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nipp?: string
    kkNumber?: string
    nik?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    userId?: IntFilter<"Employee"> | number
    educationId?: IntFilter<"Employee"> | number
    gradeId?: IntFilter<"Employee"> | number
    positionId?: IntFilter<"Employee"> | number
    fullName?: StringFilter<"Employee"> | string
    birthPlace?: StringFilter<"Employee"> | string
    birthDate?: DateTimeFilter<"Employee"> | Date | string
    gender?: EnumGenderFilter<"Employee"> | $Enums.Gender
    employeeStatus?: EnumEmployeeStatusFilter<"Employee"> | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFilter<"Employee"> | $Enums.FamilyStatus
    address?: StringFilter<"Employee"> | string
    photoUrl?: StringFilter<"Employee"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    education?: XOR<EducationScalarRelationFilter, EducationWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    position?: XOR<PositionScalarRelationFilter, PositionWhereInput>
    familyMembers?: FamilyMemberListRelationFilter
    infractions?: InfractionListRelationFilter
    gradeHistories?: GradeHistoryListRelationFilter
    salaryHistories?: SalaryHistoryListRelationFilter
    placements?: PlacementListRelationFilter
    recommendations?: RecommendationListRelationFilter
  }, "id" | "nipp" | "kkNumber" | "nik">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    educationId?: SortOrder
    gradeId?: SortOrder
    positionId?: SortOrder
    fullName?: SortOrder
    nipp?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    kkNumber?: SortOrder
    nik?: SortOrder
    employeeStatus?: SortOrder
    familyStatus?: SortOrder
    address?: SortOrder
    photoUrl?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employee"> | number
    userId?: IntWithAggregatesFilter<"Employee"> | number
    educationId?: IntWithAggregatesFilter<"Employee"> | number
    gradeId?: IntWithAggregatesFilter<"Employee"> | number
    positionId?: IntWithAggregatesFilter<"Employee"> | number
    fullName?: StringWithAggregatesFilter<"Employee"> | string
    nipp?: StringWithAggregatesFilter<"Employee"> | string
    birthPlace?: StringWithAggregatesFilter<"Employee"> | string
    birthDate?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    gender?: EnumGenderWithAggregatesFilter<"Employee"> | $Enums.Gender
    kkNumber?: StringWithAggregatesFilter<"Employee"> | string
    nik?: StringWithAggregatesFilter<"Employee"> | string
    employeeStatus?: EnumEmployeeStatusWithAggregatesFilter<"Employee"> | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusWithAggregatesFilter<"Employee"> | $Enums.FamilyStatus
    address?: StringWithAggregatesFilter<"Employee"> | string
    photoUrl?: StringWithAggregatesFilter<"Employee"> | string
  }

  export type FamilyMemberWhereInput = {
    AND?: FamilyMemberWhereInput | FamilyMemberWhereInput[]
    OR?: FamilyMemberWhereInput[]
    NOT?: FamilyMemberWhereInput | FamilyMemberWhereInput[]
    id?: IntFilter<"FamilyMember"> | number
    employeeId?: IntFilter<"FamilyMember"> | number
    nik?: StringFilter<"FamilyMember"> | string
    name?: StringFilter<"FamilyMember"> | string
    birthPlace?: StringFilter<"FamilyMember"> | string
    birthDate?: DateTimeFilter<"FamilyMember"> | Date | string
    gender?: EnumGenderFilter<"FamilyMember"> | $Enums.Gender
    marriageDate?: DateTimeNullableFilter<"FamilyMember"> | Date | string | null
    familyStatus?: EnumEmployeeStatusFilter<"FamilyMember"> | $Enums.EmployeeStatus
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type FamilyMemberOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    nik?: SortOrder
    name?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    marriageDate?: SortOrderInput | SortOrder
    familyStatus?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    _relevance?: FamilyMemberOrderByRelevanceInput
  }

  export type FamilyMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nik?: string
    AND?: FamilyMemberWhereInput | FamilyMemberWhereInput[]
    OR?: FamilyMemberWhereInput[]
    NOT?: FamilyMemberWhereInput | FamilyMemberWhereInput[]
    employeeId?: IntFilter<"FamilyMember"> | number
    name?: StringFilter<"FamilyMember"> | string
    birthPlace?: StringFilter<"FamilyMember"> | string
    birthDate?: DateTimeFilter<"FamilyMember"> | Date | string
    gender?: EnumGenderFilter<"FamilyMember"> | $Enums.Gender
    marriageDate?: DateTimeNullableFilter<"FamilyMember"> | Date | string | null
    familyStatus?: EnumEmployeeStatusFilter<"FamilyMember"> | $Enums.EmployeeStatus
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id" | "nik">

  export type FamilyMemberOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    nik?: SortOrder
    name?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    marriageDate?: SortOrderInput | SortOrder
    familyStatus?: SortOrder
    _count?: FamilyMemberCountOrderByAggregateInput
    _avg?: FamilyMemberAvgOrderByAggregateInput
    _max?: FamilyMemberMaxOrderByAggregateInput
    _min?: FamilyMemberMinOrderByAggregateInput
    _sum?: FamilyMemberSumOrderByAggregateInput
  }

  export type FamilyMemberScalarWhereWithAggregatesInput = {
    AND?: FamilyMemberScalarWhereWithAggregatesInput | FamilyMemberScalarWhereWithAggregatesInput[]
    OR?: FamilyMemberScalarWhereWithAggregatesInput[]
    NOT?: FamilyMemberScalarWhereWithAggregatesInput | FamilyMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FamilyMember"> | number
    employeeId?: IntWithAggregatesFilter<"FamilyMember"> | number
    nik?: StringWithAggregatesFilter<"FamilyMember"> | string
    name?: StringWithAggregatesFilter<"FamilyMember"> | string
    birthPlace?: StringWithAggregatesFilter<"FamilyMember"> | string
    birthDate?: DateTimeWithAggregatesFilter<"FamilyMember"> | Date | string
    gender?: EnumGenderWithAggregatesFilter<"FamilyMember"> | $Enums.Gender
    marriageDate?: DateTimeNullableWithAggregatesFilter<"FamilyMember"> | Date | string | null
    familyStatus?: EnumEmployeeStatusWithAggregatesFilter<"FamilyMember"> | $Enums.EmployeeStatus
  }

  export type InfractionWhereInput = {
    AND?: InfractionWhereInput | InfractionWhereInput[]
    OR?: InfractionWhereInput[]
    NOT?: InfractionWhereInput | InfractionWhereInput[]
    id?: IntFilter<"Infraction"> | number
    employeeId?: IntFilter<"Infraction"> | number
    decreeNumber?: StringFilter<"Infraction"> | string
    name?: StringFilter<"Infraction"> | string
    description?: StringFilter<"Infraction"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type InfractionOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    decreeNumber?: SortOrder
    name?: SortOrder
    description?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    _relevance?: InfractionOrderByRelevanceInput
  }

  export type InfractionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InfractionWhereInput | InfractionWhereInput[]
    OR?: InfractionWhereInput[]
    NOT?: InfractionWhereInput | InfractionWhereInput[]
    employeeId?: IntFilter<"Infraction"> | number
    decreeNumber?: StringFilter<"Infraction"> | string
    name?: StringFilter<"Infraction"> | string
    description?: StringFilter<"Infraction"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type InfractionOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    decreeNumber?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: InfractionCountOrderByAggregateInput
    _avg?: InfractionAvgOrderByAggregateInput
    _max?: InfractionMaxOrderByAggregateInput
    _min?: InfractionMinOrderByAggregateInput
    _sum?: InfractionSumOrderByAggregateInput
  }

  export type InfractionScalarWhereWithAggregatesInput = {
    AND?: InfractionScalarWhereWithAggregatesInput | InfractionScalarWhereWithAggregatesInput[]
    OR?: InfractionScalarWhereWithAggregatesInput[]
    NOT?: InfractionScalarWhereWithAggregatesInput | InfractionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Infraction"> | number
    employeeId?: IntWithAggregatesFilter<"Infraction"> | number
    decreeNumber?: StringWithAggregatesFilter<"Infraction"> | string
    name?: StringWithAggregatesFilter<"Infraction"> | string
    description?: StringWithAggregatesFilter<"Infraction"> | string
  }

  export type SalaryHistoryWhereInput = {
    AND?: SalaryHistoryWhereInput | SalaryHistoryWhereInput[]
    OR?: SalaryHistoryWhereInput[]
    NOT?: SalaryHistoryWhereInput | SalaryHistoryWhereInput[]
    id?: IntFilter<"SalaryHistory"> | number
    employeeId?: IntFilter<"SalaryHistory"> | number
    gradeId?: IntFilter<"SalaryHistory"> | number
    baseSalaryId?: IntFilter<"SalaryHistory"> | number
    amount?: IntFilter<"SalaryHistory"> | number
    effectiveDate?: DateTimeFilter<"SalaryHistory"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    baseSalary?: XOR<BaseSalaryScalarRelationFilter, BaseSalaryWhereInput>
  }

  export type SalaryHistoryOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    amount?: SortOrder
    effectiveDate?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    grade?: GradeOrderByWithRelationInput
    baseSalary?: BaseSalaryOrderByWithRelationInput
  }

  export type SalaryHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SalaryHistoryWhereInput | SalaryHistoryWhereInput[]
    OR?: SalaryHistoryWhereInput[]
    NOT?: SalaryHistoryWhereInput | SalaryHistoryWhereInput[]
    employeeId?: IntFilter<"SalaryHistory"> | number
    gradeId?: IntFilter<"SalaryHistory"> | number
    baseSalaryId?: IntFilter<"SalaryHistory"> | number
    amount?: IntFilter<"SalaryHistory"> | number
    effectiveDate?: DateTimeFilter<"SalaryHistory"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    baseSalary?: XOR<BaseSalaryScalarRelationFilter, BaseSalaryWhereInput>
  }, "id">

  export type SalaryHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    amount?: SortOrder
    effectiveDate?: SortOrder
    _count?: SalaryHistoryCountOrderByAggregateInput
    _avg?: SalaryHistoryAvgOrderByAggregateInput
    _max?: SalaryHistoryMaxOrderByAggregateInput
    _min?: SalaryHistoryMinOrderByAggregateInput
    _sum?: SalaryHistorySumOrderByAggregateInput
  }

  export type SalaryHistoryScalarWhereWithAggregatesInput = {
    AND?: SalaryHistoryScalarWhereWithAggregatesInput | SalaryHistoryScalarWhereWithAggregatesInput[]
    OR?: SalaryHistoryScalarWhereWithAggregatesInput[]
    NOT?: SalaryHistoryScalarWhereWithAggregatesInput | SalaryHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SalaryHistory"> | number
    employeeId?: IntWithAggregatesFilter<"SalaryHistory"> | number
    gradeId?: IntWithAggregatesFilter<"SalaryHistory"> | number
    baseSalaryId?: IntWithAggregatesFilter<"SalaryHistory"> | number
    amount?: IntWithAggregatesFilter<"SalaryHistory"> | number
    effectiveDate?: DateTimeWithAggregatesFilter<"SalaryHistory"> | Date | string
  }

  export type GradeHistoryWhereInput = {
    AND?: GradeHistoryWhereInput | GradeHistoryWhereInput[]
    OR?: GradeHistoryWhereInput[]
    NOT?: GradeHistoryWhereInput | GradeHistoryWhereInput[]
    gradeHistoryId?: IntFilter<"GradeHistory"> | number
    employeeId?: IntFilter<"GradeHistory"> | number
    gradeId?: IntFilter<"GradeHistory"> | number
    rankName?: StringFilter<"GradeHistory"> | string
    gradeName?: StringFilter<"GradeHistory"> | string
    effectiveDate?: DateTimeFilter<"GradeHistory"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
  }

  export type GradeHistoryOrderByWithRelationInput = {
    gradeHistoryId?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    rankName?: SortOrder
    gradeName?: SortOrder
    effectiveDate?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    grade?: GradeOrderByWithRelationInput
    _relevance?: GradeHistoryOrderByRelevanceInput
  }

  export type GradeHistoryWhereUniqueInput = Prisma.AtLeast<{
    gradeHistoryId?: number
    AND?: GradeHistoryWhereInput | GradeHistoryWhereInput[]
    OR?: GradeHistoryWhereInput[]
    NOT?: GradeHistoryWhereInput | GradeHistoryWhereInput[]
    employeeId?: IntFilter<"GradeHistory"> | number
    gradeId?: IntFilter<"GradeHistory"> | number
    rankName?: StringFilter<"GradeHistory"> | string
    gradeName?: StringFilter<"GradeHistory"> | string
    effectiveDate?: DateTimeFilter<"GradeHistory"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
  }, "gradeHistoryId">

  export type GradeHistoryOrderByWithAggregationInput = {
    gradeHistoryId?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    rankName?: SortOrder
    gradeName?: SortOrder
    effectiveDate?: SortOrder
    _count?: GradeHistoryCountOrderByAggregateInput
    _avg?: GradeHistoryAvgOrderByAggregateInput
    _max?: GradeHistoryMaxOrderByAggregateInput
    _min?: GradeHistoryMinOrderByAggregateInput
    _sum?: GradeHistorySumOrderByAggregateInput
  }

  export type GradeHistoryScalarWhereWithAggregatesInput = {
    AND?: GradeHistoryScalarWhereWithAggregatesInput | GradeHistoryScalarWhereWithAggregatesInput[]
    OR?: GradeHistoryScalarWhereWithAggregatesInput[]
    NOT?: GradeHistoryScalarWhereWithAggregatesInput | GradeHistoryScalarWhereWithAggregatesInput[]
    gradeHistoryId?: IntWithAggregatesFilter<"GradeHistory"> | number
    employeeId?: IntWithAggregatesFilter<"GradeHistory"> | number
    gradeId?: IntWithAggregatesFilter<"GradeHistory"> | number
    rankName?: StringWithAggregatesFilter<"GradeHistory"> | string
    gradeName?: StringWithAggregatesFilter<"GradeHistory"> | string
    effectiveDate?: DateTimeWithAggregatesFilter<"GradeHistory"> | Date | string
  }

  export type PlacementWhereInput = {
    AND?: PlacementWhereInput | PlacementWhereInput[]
    OR?: PlacementWhereInput[]
    NOT?: PlacementWhereInput | PlacementWhereInput[]
    placementId?: IntFilter<"Placement"> | number
    employeeId?: IntFilter<"Placement"> | number
    branchId?: IntFilter<"Placement"> | number
    unitId?: IntFilter<"Placement"> | number
    divisionId?: IntFilter<"Placement"> | number
    placementType?: EnumPlacementTypeFilter<"Placement"> | $Enums.PlacementType
    effectiveDate?: DateTimeFilter<"Placement"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    unit?: XOR<UnitScalarRelationFilter, UnitWhereInput>
    division?: XOR<DivisionScalarRelationFilter, DivisionWhereInput>
  }

  export type PlacementOrderByWithRelationInput = {
    placementId?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    unitId?: SortOrder
    divisionId?: SortOrder
    placementType?: SortOrder
    effectiveDate?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    branch?: BranchOrderByWithRelationInput
    unit?: UnitOrderByWithRelationInput
    division?: DivisionOrderByWithRelationInput
  }

  export type PlacementWhereUniqueInput = Prisma.AtLeast<{
    placementId?: number
    AND?: PlacementWhereInput | PlacementWhereInput[]
    OR?: PlacementWhereInput[]
    NOT?: PlacementWhereInput | PlacementWhereInput[]
    employeeId?: IntFilter<"Placement"> | number
    branchId?: IntFilter<"Placement"> | number
    unitId?: IntFilter<"Placement"> | number
    divisionId?: IntFilter<"Placement"> | number
    placementType?: EnumPlacementTypeFilter<"Placement"> | $Enums.PlacementType
    effectiveDate?: DateTimeFilter<"Placement"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    branch?: XOR<BranchScalarRelationFilter, BranchWhereInput>
    unit?: XOR<UnitScalarRelationFilter, UnitWhereInput>
    division?: XOR<DivisionScalarRelationFilter, DivisionWhereInput>
  }, "placementId">

  export type PlacementOrderByWithAggregationInput = {
    placementId?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    unitId?: SortOrder
    divisionId?: SortOrder
    placementType?: SortOrder
    effectiveDate?: SortOrder
    _count?: PlacementCountOrderByAggregateInput
    _avg?: PlacementAvgOrderByAggregateInput
    _max?: PlacementMaxOrderByAggregateInput
    _min?: PlacementMinOrderByAggregateInput
    _sum?: PlacementSumOrderByAggregateInput
  }

  export type PlacementScalarWhereWithAggregatesInput = {
    AND?: PlacementScalarWhereWithAggregatesInput | PlacementScalarWhereWithAggregatesInput[]
    OR?: PlacementScalarWhereWithAggregatesInput[]
    NOT?: PlacementScalarWhereWithAggregatesInput | PlacementScalarWhereWithAggregatesInput[]
    placementId?: IntWithAggregatesFilter<"Placement"> | number
    employeeId?: IntWithAggregatesFilter<"Placement"> | number
    branchId?: IntWithAggregatesFilter<"Placement"> | number
    unitId?: IntWithAggregatesFilter<"Placement"> | number
    divisionId?: IntWithAggregatesFilter<"Placement"> | number
    placementType?: EnumPlacementTypeWithAggregatesFilter<"Placement"> | $Enums.PlacementType
    effectiveDate?: DateTimeWithAggregatesFilter<"Placement"> | Date | string
  }

  export type RecommendationWhereInput = {
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    RecommendationId?: IntFilter<"Recommendation"> | number
    employeeId?: IntFilter<"Recommendation"> | number
    userId?: IntFilter<"Recommendation"> | number
    recommendationDate?: DateTimeFilter<"Recommendation"> | Date | string
    status?: EnumRecommendationStatusFilter<"Recommendation"> | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFilter<"Recommendation"> | $Enums.RecommendationType
    processDate?: DateTimeNullableFilter<"Recommendation"> | Date | string | null
    fileCode?: StringFilter<"Recommendation"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RecommendationOrderByWithRelationInput = {
    RecommendationId?: SortOrder
    employeeId?: SortOrder
    userId?: SortOrder
    recommendationDate?: SortOrder
    status?: SortOrder
    type?: SortOrder
    processDate?: SortOrderInput | SortOrder
    fileCode?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: RecommendationOrderByRelevanceInput
  }

  export type RecommendationWhereUniqueInput = Prisma.AtLeast<{
    RecommendationId?: number
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    employeeId?: IntFilter<"Recommendation"> | number
    userId?: IntFilter<"Recommendation"> | number
    recommendationDate?: DateTimeFilter<"Recommendation"> | Date | string
    status?: EnumRecommendationStatusFilter<"Recommendation"> | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFilter<"Recommendation"> | $Enums.RecommendationType
    processDate?: DateTimeNullableFilter<"Recommendation"> | Date | string | null
    fileCode?: StringFilter<"Recommendation"> | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "RecommendationId">

  export type RecommendationOrderByWithAggregationInput = {
    RecommendationId?: SortOrder
    employeeId?: SortOrder
    userId?: SortOrder
    recommendationDate?: SortOrder
    status?: SortOrder
    type?: SortOrder
    processDate?: SortOrderInput | SortOrder
    fileCode?: SortOrder
    _count?: RecommendationCountOrderByAggregateInput
    _avg?: RecommendationAvgOrderByAggregateInput
    _max?: RecommendationMaxOrderByAggregateInput
    _min?: RecommendationMinOrderByAggregateInput
    _sum?: RecommendationSumOrderByAggregateInput
  }

  export type RecommendationScalarWhereWithAggregatesInput = {
    AND?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    OR?: RecommendationScalarWhereWithAggregatesInput[]
    NOT?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    RecommendationId?: IntWithAggregatesFilter<"Recommendation"> | number
    employeeId?: IntWithAggregatesFilter<"Recommendation"> | number
    userId?: IntWithAggregatesFilter<"Recommendation"> | number
    recommendationDate?: DateTimeWithAggregatesFilter<"Recommendation"> | Date | string
    status?: EnumRecommendationStatusWithAggregatesFilter<"Recommendation"> | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeWithAggregatesFilter<"Recommendation"> | $Enums.RecommendationType
    processDate?: DateTimeNullableWithAggregatesFilter<"Recommendation"> | Date | string | null
    fileCode?: StringWithAggregatesFilter<"Recommendation"> | string
  }

  export type BranchCreateInput = {
    branchName: string
    placements?: PlacementCreateNestedManyWithoutBranchInput
  }

  export type BranchUncheckedCreateInput = {
    branchId?: number
    branchName: string
    placements?: PlacementUncheckedCreateNestedManyWithoutBranchInput
  }

  export type BranchUpdateInput = {
    branchName?: StringFieldUpdateOperationsInput | string
    placements?: PlacementUpdateManyWithoutBranchNestedInput
  }

  export type BranchUncheckedUpdateInput = {
    branchId?: IntFieldUpdateOperationsInput | number
    branchName?: StringFieldUpdateOperationsInput | string
    placements?: PlacementUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type BranchCreateManyInput = {
    branchId?: number
    branchName: string
  }

  export type BranchUpdateManyMutationInput = {
    branchName?: StringFieldUpdateOperationsInput | string
  }

  export type BranchUncheckedUpdateManyInput = {
    branchId?: IntFieldUpdateOperationsInput | number
    branchName?: StringFieldUpdateOperationsInput | string
  }

  export type UnitCreateInput = {
    unitName: string
    placements?: PlacementCreateNestedManyWithoutUnitInput
  }

  export type UnitUncheckedCreateInput = {
    unitId?: number
    unitName: string
    placements?: PlacementUncheckedCreateNestedManyWithoutUnitInput
  }

  export type UnitUpdateInput = {
    unitName?: StringFieldUpdateOperationsInput | string
    placements?: PlacementUpdateManyWithoutUnitNestedInput
  }

  export type UnitUncheckedUpdateInput = {
    unitId?: IntFieldUpdateOperationsInput | number
    unitName?: StringFieldUpdateOperationsInput | string
    placements?: PlacementUncheckedUpdateManyWithoutUnitNestedInput
  }

  export type UnitCreateManyInput = {
    unitId?: number
    unitName: string
  }

  export type UnitUpdateManyMutationInput = {
    unitName?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUncheckedUpdateManyInput = {
    unitId?: IntFieldUpdateOperationsInput | number
    unitName?: StringFieldUpdateOperationsInput | string
  }

  export type DivisionCreateInput = {
    divisionName: string
    placements?: PlacementCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUncheckedCreateInput = {
    divisionId?: number
    divisionName: string
    placements?: PlacementUncheckedCreateNestedManyWithoutDivisionInput
  }

  export type DivisionUpdateInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
    placements?: PlacementUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionUncheckedUpdateInput = {
    divisionId?: IntFieldUpdateOperationsInput | number
    divisionName?: StringFieldUpdateOperationsInput | string
    placements?: PlacementUncheckedUpdateManyWithoutDivisionNestedInput
  }

  export type DivisionCreateManyInput = {
    divisionId?: number
    divisionName: string
  }

  export type DivisionUpdateManyMutationInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
  }

  export type DivisionUncheckedUpdateManyInput = {
    divisionId?: IntFieldUpdateOperationsInput | number
    divisionName?: StringFieldUpdateOperationsInput | string
  }

  export type EducationCreateInput = {
    level: string
    major: string
    employees?: EmployeeCreateNestedManyWithoutEducationInput
  }

  export type EducationUncheckedCreateInput = {
    educationId?: number
    level: string
    major: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutEducationInput
  }

  export type EducationUpdateInput = {
    level?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    educationId?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutEducationNestedInput
  }

  export type EducationCreateManyInput = {
    educationId?: number
    level: string
    major: string
  }

  export type EducationUpdateManyMutationInput = {
    level?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
  }

  export type EducationUncheckedUpdateManyInput = {
    educationId?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
  }

  export type PositionCreateInput = {
    positionName: string
    employees?: EmployeeCreateNestedManyWithoutPositionInput
  }

  export type PositionUncheckedCreateInput = {
    positionId?: number
    positionName: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutPositionInput
  }

  export type PositionUpdateInput = {
    positionName?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateInput = {
    positionId?: IntFieldUpdateOperationsInput | number
    positionName?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type PositionCreateManyInput = {
    positionId?: number
    positionName: string
  }

  export type PositionUpdateManyMutationInput = {
    positionName?: StringFieldUpdateOperationsInput | string
  }

  export type PositionUncheckedUpdateManyInput = {
    positionId?: IntFieldUpdateOperationsInput | number
    positionName?: StringFieldUpdateOperationsInput | string
  }

  export type BaseSalaryCreateInput = {
    amount: number
    type: string
    yearsOfService?: string | null
    grades?: GradeCreateNestedManyWithoutBaseSalaryInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutBaseSalaryInput
  }

  export type BaseSalaryUncheckedCreateInput = {
    baseSalaryId?: number
    amount: number
    type: string
    yearsOfService?: string | null
    grades?: GradeUncheckedCreateNestedManyWithoutBaseSalaryInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutBaseSalaryInput
  }

  export type BaseSalaryUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    yearsOfService?: NullableStringFieldUpdateOperationsInput | string | null
    grades?: GradeUpdateManyWithoutBaseSalaryNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutBaseSalaryNestedInput
  }

  export type BaseSalaryUncheckedUpdateInput = {
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    yearsOfService?: NullableStringFieldUpdateOperationsInput | string | null
    grades?: GradeUncheckedUpdateManyWithoutBaseSalaryNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutBaseSalaryNestedInput
  }

  export type BaseSalaryCreateManyInput = {
    baseSalaryId?: number
    amount: number
    type: string
    yearsOfService?: string | null
  }

  export type BaseSalaryUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    yearsOfService?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BaseSalaryUncheckedUpdateManyInput = {
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    yearsOfService?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GradeCreateInput = {
    title: string
    grade: string
    baseSalary: BaseSalaryCreateNestedOneWithoutGradesInput
    employees?: EmployeeCreateNestedManyWithoutGradeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutGradeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateInput = {
    gradeId?: number
    baseSalaryId: number
    title: string
    grade: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutGradeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutGradeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    baseSalary?: BaseSalaryUpdateOneRequiredWithoutGradesNestedInput
    employees?: EmployeeUpdateManyWithoutGradeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutGradeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateInput = {
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutGradeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutGradeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type GradeCreateManyInput = {
    gradeId?: number
    baseSalaryId: number
    title: string
    grade: string
  }

  export type GradeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type GradeUncheckedUpdateManyInput = {
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    username: string
    password: string
    email: string
    phoneNumber: string
    role: $Enums.Role
    token?: string | null
    employees?: EmployeeCreateNestedManyWithoutUserInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId?: number
    username: string
    password: string
    email: string
    phoneNumber: string
    role: $Enums.Role
    token?: string | null
    employees?: EmployeeUncheckedCreateNestedManyWithoutUserInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    employees?: EmployeeUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    employees?: EmployeeUncheckedUpdateManyWithoutUserNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId?: number
    username: string
    password: string
    email: string
    phoneNumber: string
    role: $Enums.Role
    token?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeCreateInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
  }

  export type EmployeeUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyMemberCreateInput = {
    nik: string
    name: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    marriageDate?: Date | string | null
    familyStatus: $Enums.EmployeeStatus
    employee: EmployeeCreateNestedOneWithoutFamilyMembersInput
  }

  export type FamilyMemberUncheckedCreateInput = {
    id?: number
    employeeId: number
    nik: string
    name: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    marriageDate?: Date | string | null
    familyStatus: $Enums.EmployeeStatus
  }

  export type FamilyMemberUpdateInput = {
    nik?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    marriageDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    employee?: EmployeeUpdateOneRequiredWithoutFamilyMembersNestedInput
  }

  export type FamilyMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    nik?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    marriageDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
  }

  export type FamilyMemberCreateManyInput = {
    id?: number
    employeeId: number
    nik: string
    name: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    marriageDate?: Date | string | null
    familyStatus: $Enums.EmployeeStatus
  }

  export type FamilyMemberUpdateManyMutationInput = {
    nik?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    marriageDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
  }

  export type FamilyMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    nik?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    marriageDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
  }

  export type InfractionCreateInput = {
    decreeNumber: string
    name: string
    description: string
    employee: EmployeeCreateNestedOneWithoutInfractionsInput
  }

  export type InfractionUncheckedCreateInput = {
    id?: number
    employeeId: number
    decreeNumber: string
    name: string
    description: string
  }

  export type InfractionUpdateInput = {
    decreeNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneRequiredWithoutInfractionsNestedInput
  }

  export type InfractionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    decreeNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InfractionCreateManyInput = {
    id?: number
    employeeId: number
    decreeNumber: string
    name: string
    description: string
  }

  export type InfractionUpdateManyMutationInput = {
    decreeNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InfractionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    decreeNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryHistoryCreateInput = {
    amount: number
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutSalaryHistoriesInput
    grade: GradeCreateNestedOneWithoutSalaryHistoriesInput
    baseSalary: BaseSalaryCreateNestedOneWithoutSalaryHistoriesInput
  }

  export type SalaryHistoryUncheckedCreateInput = {
    id?: number
    employeeId: number
    gradeId: number
    baseSalaryId: number
    amount: number
    effectiveDate: Date | string
  }

  export type SalaryHistoryUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutSalaryHistoriesNestedInput
    grade?: GradeUpdateOneRequiredWithoutSalaryHistoriesNestedInput
    baseSalary?: BaseSalaryUpdateOneRequiredWithoutSalaryHistoriesNestedInput
  }

  export type SalaryHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryHistoryCreateManyInput = {
    id?: number
    employeeId: number
    gradeId: number
    baseSalaryId: number
    amount: number
    effectiveDate: Date | string
  }

  export type SalaryHistoryUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeHistoryCreateInput = {
    rankName: string
    gradeName: string
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutGradeHistoriesInput
    grade: GradeCreateNestedOneWithoutGradeHistoriesInput
  }

  export type GradeHistoryUncheckedCreateInput = {
    gradeHistoryId?: number
    employeeId: number
    gradeId: number
    rankName: string
    gradeName: string
    effectiveDate: Date | string
  }

  export type GradeHistoryUpdateInput = {
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutGradeHistoriesNestedInput
    grade?: GradeUpdateOneRequiredWithoutGradeHistoriesNestedInput
  }

  export type GradeHistoryUncheckedUpdateInput = {
    gradeHistoryId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeHistoryCreateManyInput = {
    gradeHistoryId?: number
    employeeId: number
    gradeId: number
    rankName: string
    gradeName: string
    effectiveDate: Date | string
  }

  export type GradeHistoryUpdateManyMutationInput = {
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeHistoryUncheckedUpdateManyInput = {
    gradeHistoryId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementCreateInput = {
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutPlacementsInput
    branch: BranchCreateNestedOneWithoutPlacementsInput
    unit: UnitCreateNestedOneWithoutPlacementsInput
    division: DivisionCreateNestedOneWithoutPlacementsInput
  }

  export type PlacementUncheckedCreateInput = {
    placementId?: number
    employeeId: number
    branchId: number
    unitId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementUpdateInput = {
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPlacementsNestedInput
    branch?: BranchUpdateOneRequiredWithoutPlacementsNestedInput
    unit?: UnitUpdateOneRequiredWithoutPlacementsNestedInput
    division?: DivisionUpdateOneRequiredWithoutPlacementsNestedInput
  }

  export type PlacementUncheckedUpdateInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    divisionId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementCreateManyInput = {
    placementId?: number
    employeeId: number
    branchId: number
    unitId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementUpdateManyMutationInput = {
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementUncheckedUpdateManyInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    divisionId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationCreateInput = {
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
    employee: EmployeeCreateNestedOneWithoutRecommendationsInput
    user: UserCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateInput = {
    RecommendationId?: number
    employeeId: number
    userId: number
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
  }

  export type RecommendationUpdateInput = {
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneRequiredWithoutRecommendationsNestedInput
    user?: UserUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateInput = {
    RecommendationId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationCreateManyInput = {
    RecommendationId?: number
    employeeId: number
    userId: number
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
  }

  export type RecommendationUpdateManyMutationInput = {
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationUncheckedUpdateManyInput = {
    RecommendationId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PlacementListRelationFilter = {
    every?: PlacementWhereInput
    some?: PlacementWhereInput
    none?: PlacementWhereInput
  }

  export type PlacementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BranchOrderByRelevanceInput = {
    fields: BranchOrderByRelevanceFieldEnum | BranchOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BranchCountOrderByAggregateInput = {
    branchId?: SortOrder
    branchName?: SortOrder
  }

  export type BranchAvgOrderByAggregateInput = {
    branchId?: SortOrder
  }

  export type BranchMaxOrderByAggregateInput = {
    branchId?: SortOrder
    branchName?: SortOrder
  }

  export type BranchMinOrderByAggregateInput = {
    branchId?: SortOrder
    branchName?: SortOrder
  }

  export type BranchSumOrderByAggregateInput = {
    branchId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UnitOrderByRelevanceInput = {
    fields: UnitOrderByRelevanceFieldEnum | UnitOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UnitCountOrderByAggregateInput = {
    unitId?: SortOrder
    unitName?: SortOrder
  }

  export type UnitAvgOrderByAggregateInput = {
    unitId?: SortOrder
  }

  export type UnitMaxOrderByAggregateInput = {
    unitId?: SortOrder
    unitName?: SortOrder
  }

  export type UnitMinOrderByAggregateInput = {
    unitId?: SortOrder
    unitName?: SortOrder
  }

  export type UnitSumOrderByAggregateInput = {
    unitId?: SortOrder
  }

  export type DivisionOrderByRelevanceInput = {
    fields: DivisionOrderByRelevanceFieldEnum | DivisionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DivisionCountOrderByAggregateInput = {
    divisionId?: SortOrder
    divisionName?: SortOrder
  }

  export type DivisionAvgOrderByAggregateInput = {
    divisionId?: SortOrder
  }

  export type DivisionMaxOrderByAggregateInput = {
    divisionId?: SortOrder
    divisionName?: SortOrder
  }

  export type DivisionMinOrderByAggregateInput = {
    divisionId?: SortOrder
    divisionName?: SortOrder
  }

  export type DivisionSumOrderByAggregateInput = {
    divisionId?: SortOrder
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EducationOrderByRelevanceInput = {
    fields: EducationOrderByRelevanceFieldEnum | EducationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EducationCountOrderByAggregateInput = {
    educationId?: SortOrder
    level?: SortOrder
    major?: SortOrder
  }

  export type EducationAvgOrderByAggregateInput = {
    educationId?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    educationId?: SortOrder
    level?: SortOrder
    major?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    educationId?: SortOrder
    level?: SortOrder
    major?: SortOrder
  }

  export type EducationSumOrderByAggregateInput = {
    educationId?: SortOrder
  }

  export type PositionOrderByRelevanceInput = {
    fields: PositionOrderByRelevanceFieldEnum | PositionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PositionCountOrderByAggregateInput = {
    positionId?: SortOrder
    positionName?: SortOrder
  }

  export type PositionAvgOrderByAggregateInput = {
    positionId?: SortOrder
  }

  export type PositionMaxOrderByAggregateInput = {
    positionId?: SortOrder
    positionName?: SortOrder
  }

  export type PositionMinOrderByAggregateInput = {
    positionId?: SortOrder
    positionName?: SortOrder
  }

  export type PositionSumOrderByAggregateInput = {
    positionId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type GradeListRelationFilter = {
    every?: GradeWhereInput
    some?: GradeWhereInput
    none?: GradeWhereInput
  }

  export type SalaryHistoryListRelationFilter = {
    every?: SalaryHistoryWhereInput
    some?: SalaryHistoryWhereInput
    none?: SalaryHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalaryHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BaseSalaryOrderByRelevanceInput = {
    fields: BaseSalaryOrderByRelevanceFieldEnum | BaseSalaryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BaseSalaryCountOrderByAggregateInput = {
    baseSalaryId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    yearsOfService?: SortOrder
  }

  export type BaseSalaryAvgOrderByAggregateInput = {
    baseSalaryId?: SortOrder
    amount?: SortOrder
  }

  export type BaseSalaryMaxOrderByAggregateInput = {
    baseSalaryId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    yearsOfService?: SortOrder
  }

  export type BaseSalaryMinOrderByAggregateInput = {
    baseSalaryId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    yearsOfService?: SortOrder
  }

  export type BaseSalarySumOrderByAggregateInput = {
    baseSalaryId?: SortOrder
    amount?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BaseSalaryScalarRelationFilter = {
    is?: BaseSalaryWhereInput
    isNot?: BaseSalaryWhereInput
  }

  export type GradeHistoryListRelationFilter = {
    every?: GradeHistoryWhereInput
    some?: GradeHistoryWhereInput
    none?: GradeHistoryWhereInput
  }

  export type GradeHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GradeOrderByRelevanceInput = {
    fields: GradeOrderByRelevanceFieldEnum | GradeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GradeCountOrderByAggregateInput = {
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    title?: SortOrder
    grade?: SortOrder
  }

  export type GradeAvgOrderByAggregateInput = {
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
  }

  export type GradeMaxOrderByAggregateInput = {
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    title?: SortOrder
    grade?: SortOrder
  }

  export type GradeMinOrderByAggregateInput = {
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    title?: SortOrder
    grade?: SortOrder
  }

  export type GradeSumOrderByAggregateInput = {
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type RecommendationListRelationFilter = {
    every?: RecommendationWhereInput
    some?: RecommendationWhereInput
    none?: RecommendationWhereInput
  }

  export type RecommendationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    token?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    token?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    token?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type EnumEmployeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[]
    notIn?: $Enums.EmployeeStatus[]
    not?: NestedEnumEmployeeStatusFilter<$PrismaModel> | $Enums.EmployeeStatus
  }

  export type EnumFamilyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FamilyStatus | EnumFamilyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FamilyStatus[]
    notIn?: $Enums.FamilyStatus[]
    not?: NestedEnumFamilyStatusFilter<$PrismaModel> | $Enums.FamilyStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EducationScalarRelationFilter = {
    is?: EducationWhereInput
    isNot?: EducationWhereInput
  }

  export type GradeScalarRelationFilter = {
    is?: GradeWhereInput
    isNot?: GradeWhereInput
  }

  export type PositionScalarRelationFilter = {
    is?: PositionWhereInput
    isNot?: PositionWhereInput
  }

  export type FamilyMemberListRelationFilter = {
    every?: FamilyMemberWhereInput
    some?: FamilyMemberWhereInput
    none?: FamilyMemberWhereInput
  }

  export type InfractionListRelationFilter = {
    every?: InfractionWhereInput
    some?: InfractionWhereInput
    none?: InfractionWhereInput
  }

  export type FamilyMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InfractionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelevanceInput = {
    fields: EmployeeOrderByRelevanceFieldEnum | EmployeeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    educationId?: SortOrder
    gradeId?: SortOrder
    positionId?: SortOrder
    fullName?: SortOrder
    nipp?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    kkNumber?: SortOrder
    nik?: SortOrder
    employeeStatus?: SortOrder
    familyStatus?: SortOrder
    address?: SortOrder
    photoUrl?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    educationId?: SortOrder
    gradeId?: SortOrder
    positionId?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    educationId?: SortOrder
    gradeId?: SortOrder
    positionId?: SortOrder
    fullName?: SortOrder
    nipp?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    kkNumber?: SortOrder
    nik?: SortOrder
    employeeStatus?: SortOrder
    familyStatus?: SortOrder
    address?: SortOrder
    photoUrl?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    educationId?: SortOrder
    gradeId?: SortOrder
    positionId?: SortOrder
    fullName?: SortOrder
    nipp?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    kkNumber?: SortOrder
    nik?: SortOrder
    employeeStatus?: SortOrder
    familyStatus?: SortOrder
    address?: SortOrder
    photoUrl?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    educationId?: SortOrder
    gradeId?: SortOrder
    positionId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type EnumEmployeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[]
    notIn?: $Enums.EmployeeStatus[]
    not?: NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeStatusFilter<$PrismaModel>
    _max?: NestedEnumEmployeeStatusFilter<$PrismaModel>
  }

  export type EnumFamilyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FamilyStatus | EnumFamilyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FamilyStatus[]
    notIn?: $Enums.FamilyStatus[]
    not?: NestedEnumFamilyStatusWithAggregatesFilter<$PrismaModel> | $Enums.FamilyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFamilyStatusFilter<$PrismaModel>
    _max?: NestedEnumFamilyStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EmployeeScalarRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type FamilyMemberOrderByRelevanceInput = {
    fields: FamilyMemberOrderByRelevanceFieldEnum | FamilyMemberOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FamilyMemberCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    nik?: SortOrder
    name?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    marriageDate?: SortOrder
    familyStatus?: SortOrder
  }

  export type FamilyMemberAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type FamilyMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    nik?: SortOrder
    name?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    marriageDate?: SortOrder
    familyStatus?: SortOrder
  }

  export type FamilyMemberMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    nik?: SortOrder
    name?: SortOrder
    birthPlace?: SortOrder
    birthDate?: SortOrder
    gender?: SortOrder
    marriageDate?: SortOrder
    familyStatus?: SortOrder
  }

  export type FamilyMemberSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type InfractionOrderByRelevanceInput = {
    fields: InfractionOrderByRelevanceFieldEnum | InfractionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InfractionCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    decreeNumber?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type InfractionAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type InfractionMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    decreeNumber?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type InfractionMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    decreeNumber?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type InfractionSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type SalaryHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    amount?: SortOrder
    effectiveDate?: SortOrder
  }

  export type SalaryHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    amount?: SortOrder
  }

  export type SalaryHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    amount?: SortOrder
    effectiveDate?: SortOrder
  }

  export type SalaryHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    amount?: SortOrder
    effectiveDate?: SortOrder
  }

  export type SalaryHistorySumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    baseSalaryId?: SortOrder
    amount?: SortOrder
  }

  export type GradeHistoryOrderByRelevanceInput = {
    fields: GradeHistoryOrderByRelevanceFieldEnum | GradeHistoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GradeHistoryCountOrderByAggregateInput = {
    gradeHistoryId?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    rankName?: SortOrder
    gradeName?: SortOrder
    effectiveDate?: SortOrder
  }

  export type GradeHistoryAvgOrderByAggregateInput = {
    gradeHistoryId?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
  }

  export type GradeHistoryMaxOrderByAggregateInput = {
    gradeHistoryId?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    rankName?: SortOrder
    gradeName?: SortOrder
    effectiveDate?: SortOrder
  }

  export type GradeHistoryMinOrderByAggregateInput = {
    gradeHistoryId?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
    rankName?: SortOrder
    gradeName?: SortOrder
    effectiveDate?: SortOrder
  }

  export type GradeHistorySumOrderByAggregateInput = {
    gradeHistoryId?: SortOrder
    employeeId?: SortOrder
    gradeId?: SortOrder
  }

  export type EnumPlacementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlacementType | EnumPlacementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlacementType[]
    notIn?: $Enums.PlacementType[]
    not?: NestedEnumPlacementTypeFilter<$PrismaModel> | $Enums.PlacementType
  }

  export type BranchScalarRelationFilter = {
    is?: BranchWhereInput
    isNot?: BranchWhereInput
  }

  export type UnitScalarRelationFilter = {
    is?: UnitWhereInput
    isNot?: UnitWhereInput
  }

  export type DivisionScalarRelationFilter = {
    is?: DivisionWhereInput
    isNot?: DivisionWhereInput
  }

  export type PlacementCountOrderByAggregateInput = {
    placementId?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    unitId?: SortOrder
    divisionId?: SortOrder
    placementType?: SortOrder
    effectiveDate?: SortOrder
  }

  export type PlacementAvgOrderByAggregateInput = {
    placementId?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    unitId?: SortOrder
    divisionId?: SortOrder
  }

  export type PlacementMaxOrderByAggregateInput = {
    placementId?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    unitId?: SortOrder
    divisionId?: SortOrder
    placementType?: SortOrder
    effectiveDate?: SortOrder
  }

  export type PlacementMinOrderByAggregateInput = {
    placementId?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    unitId?: SortOrder
    divisionId?: SortOrder
    placementType?: SortOrder
    effectiveDate?: SortOrder
  }

  export type PlacementSumOrderByAggregateInput = {
    placementId?: SortOrder
    employeeId?: SortOrder
    branchId?: SortOrder
    unitId?: SortOrder
    divisionId?: SortOrder
  }

  export type EnumPlacementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlacementType | EnumPlacementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlacementType[]
    notIn?: $Enums.PlacementType[]
    not?: NestedEnumPlacementTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlacementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlacementTypeFilter<$PrismaModel>
    _max?: NestedEnumPlacementTypeFilter<$PrismaModel>
  }

  export type EnumRecommendationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationStatus | EnumRecommendationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationStatus[]
    notIn?: $Enums.RecommendationStatus[]
    not?: NestedEnumRecommendationStatusFilter<$PrismaModel> | $Enums.RecommendationStatus
  }

  export type EnumRecommendationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationType | EnumRecommendationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationType[]
    notIn?: $Enums.RecommendationType[]
    not?: NestedEnumRecommendationTypeFilter<$PrismaModel> | $Enums.RecommendationType
  }

  export type RecommendationOrderByRelevanceInput = {
    fields: RecommendationOrderByRelevanceFieldEnum | RecommendationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RecommendationCountOrderByAggregateInput = {
    RecommendationId?: SortOrder
    employeeId?: SortOrder
    userId?: SortOrder
    recommendationDate?: SortOrder
    status?: SortOrder
    type?: SortOrder
    processDate?: SortOrder
    fileCode?: SortOrder
  }

  export type RecommendationAvgOrderByAggregateInput = {
    RecommendationId?: SortOrder
    employeeId?: SortOrder
    userId?: SortOrder
  }

  export type RecommendationMaxOrderByAggregateInput = {
    RecommendationId?: SortOrder
    employeeId?: SortOrder
    userId?: SortOrder
    recommendationDate?: SortOrder
    status?: SortOrder
    type?: SortOrder
    processDate?: SortOrder
    fileCode?: SortOrder
  }

  export type RecommendationMinOrderByAggregateInput = {
    RecommendationId?: SortOrder
    employeeId?: SortOrder
    userId?: SortOrder
    recommendationDate?: SortOrder
    status?: SortOrder
    type?: SortOrder
    processDate?: SortOrder
    fileCode?: SortOrder
  }

  export type RecommendationSumOrderByAggregateInput = {
    RecommendationId?: SortOrder
    employeeId?: SortOrder
    userId?: SortOrder
  }

  export type EnumRecommendationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationStatus | EnumRecommendationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationStatus[]
    notIn?: $Enums.RecommendationStatus[]
    not?: NestedEnumRecommendationStatusWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationStatusFilter<$PrismaModel>
    _max?: NestedEnumRecommendationStatusFilter<$PrismaModel>
  }

  export type EnumRecommendationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationType | EnumRecommendationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationType[]
    notIn?: $Enums.RecommendationType[]
    not?: NestedEnumRecommendationTypeWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationTypeFilter<$PrismaModel>
    _max?: NestedEnumRecommendationTypeFilter<$PrismaModel>
  }

  export type PlacementCreateNestedManyWithoutBranchInput = {
    create?: XOR<PlacementCreateWithoutBranchInput, PlacementUncheckedCreateWithoutBranchInput> | PlacementCreateWithoutBranchInput[] | PlacementUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutBranchInput | PlacementCreateOrConnectWithoutBranchInput[]
    createMany?: PlacementCreateManyBranchInputEnvelope
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
  }

  export type PlacementUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<PlacementCreateWithoutBranchInput, PlacementUncheckedCreateWithoutBranchInput> | PlacementCreateWithoutBranchInput[] | PlacementUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutBranchInput | PlacementCreateOrConnectWithoutBranchInput[]
    createMany?: PlacementCreateManyBranchInputEnvelope
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PlacementUpdateManyWithoutBranchNestedInput = {
    create?: XOR<PlacementCreateWithoutBranchInput, PlacementUncheckedCreateWithoutBranchInput> | PlacementCreateWithoutBranchInput[] | PlacementUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutBranchInput | PlacementCreateOrConnectWithoutBranchInput[]
    upsert?: PlacementUpsertWithWhereUniqueWithoutBranchInput | PlacementUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: PlacementCreateManyBranchInputEnvelope
    set?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    disconnect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    delete?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    update?: PlacementUpdateWithWhereUniqueWithoutBranchInput | PlacementUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: PlacementUpdateManyWithWhereWithoutBranchInput | PlacementUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlacementUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<PlacementCreateWithoutBranchInput, PlacementUncheckedCreateWithoutBranchInput> | PlacementCreateWithoutBranchInput[] | PlacementUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutBranchInput | PlacementCreateOrConnectWithoutBranchInput[]
    upsert?: PlacementUpsertWithWhereUniqueWithoutBranchInput | PlacementUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: PlacementCreateManyBranchInputEnvelope
    set?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    disconnect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    delete?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    update?: PlacementUpdateWithWhereUniqueWithoutBranchInput | PlacementUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: PlacementUpdateManyWithWhereWithoutBranchInput | PlacementUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
  }

  export type PlacementCreateNestedManyWithoutUnitInput = {
    create?: XOR<PlacementCreateWithoutUnitInput, PlacementUncheckedCreateWithoutUnitInput> | PlacementCreateWithoutUnitInput[] | PlacementUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutUnitInput | PlacementCreateOrConnectWithoutUnitInput[]
    createMany?: PlacementCreateManyUnitInputEnvelope
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
  }

  export type PlacementUncheckedCreateNestedManyWithoutUnitInput = {
    create?: XOR<PlacementCreateWithoutUnitInput, PlacementUncheckedCreateWithoutUnitInput> | PlacementCreateWithoutUnitInput[] | PlacementUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutUnitInput | PlacementCreateOrConnectWithoutUnitInput[]
    createMany?: PlacementCreateManyUnitInputEnvelope
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
  }

  export type PlacementUpdateManyWithoutUnitNestedInput = {
    create?: XOR<PlacementCreateWithoutUnitInput, PlacementUncheckedCreateWithoutUnitInput> | PlacementCreateWithoutUnitInput[] | PlacementUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutUnitInput | PlacementCreateOrConnectWithoutUnitInput[]
    upsert?: PlacementUpsertWithWhereUniqueWithoutUnitInput | PlacementUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: PlacementCreateManyUnitInputEnvelope
    set?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    disconnect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    delete?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    update?: PlacementUpdateWithWhereUniqueWithoutUnitInput | PlacementUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: PlacementUpdateManyWithWhereWithoutUnitInput | PlacementUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
  }

  export type PlacementUncheckedUpdateManyWithoutUnitNestedInput = {
    create?: XOR<PlacementCreateWithoutUnitInput, PlacementUncheckedCreateWithoutUnitInput> | PlacementCreateWithoutUnitInput[] | PlacementUncheckedCreateWithoutUnitInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutUnitInput | PlacementCreateOrConnectWithoutUnitInput[]
    upsert?: PlacementUpsertWithWhereUniqueWithoutUnitInput | PlacementUpsertWithWhereUniqueWithoutUnitInput[]
    createMany?: PlacementCreateManyUnitInputEnvelope
    set?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    disconnect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    delete?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    update?: PlacementUpdateWithWhereUniqueWithoutUnitInput | PlacementUpdateWithWhereUniqueWithoutUnitInput[]
    updateMany?: PlacementUpdateManyWithWhereWithoutUnitInput | PlacementUpdateManyWithWhereWithoutUnitInput[]
    deleteMany?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
  }

  export type PlacementCreateNestedManyWithoutDivisionInput = {
    create?: XOR<PlacementCreateWithoutDivisionInput, PlacementUncheckedCreateWithoutDivisionInput> | PlacementCreateWithoutDivisionInput[] | PlacementUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutDivisionInput | PlacementCreateOrConnectWithoutDivisionInput[]
    createMany?: PlacementCreateManyDivisionInputEnvelope
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
  }

  export type PlacementUncheckedCreateNestedManyWithoutDivisionInput = {
    create?: XOR<PlacementCreateWithoutDivisionInput, PlacementUncheckedCreateWithoutDivisionInput> | PlacementCreateWithoutDivisionInput[] | PlacementUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutDivisionInput | PlacementCreateOrConnectWithoutDivisionInput[]
    createMany?: PlacementCreateManyDivisionInputEnvelope
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
  }

  export type PlacementUpdateManyWithoutDivisionNestedInput = {
    create?: XOR<PlacementCreateWithoutDivisionInput, PlacementUncheckedCreateWithoutDivisionInput> | PlacementCreateWithoutDivisionInput[] | PlacementUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutDivisionInput | PlacementCreateOrConnectWithoutDivisionInput[]
    upsert?: PlacementUpsertWithWhereUniqueWithoutDivisionInput | PlacementUpsertWithWhereUniqueWithoutDivisionInput[]
    createMany?: PlacementCreateManyDivisionInputEnvelope
    set?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    disconnect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    delete?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    update?: PlacementUpdateWithWhereUniqueWithoutDivisionInput | PlacementUpdateWithWhereUniqueWithoutDivisionInput[]
    updateMany?: PlacementUpdateManyWithWhereWithoutDivisionInput | PlacementUpdateManyWithWhereWithoutDivisionInput[]
    deleteMany?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
  }

  export type PlacementUncheckedUpdateManyWithoutDivisionNestedInput = {
    create?: XOR<PlacementCreateWithoutDivisionInput, PlacementUncheckedCreateWithoutDivisionInput> | PlacementCreateWithoutDivisionInput[] | PlacementUncheckedCreateWithoutDivisionInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutDivisionInput | PlacementCreateOrConnectWithoutDivisionInput[]
    upsert?: PlacementUpsertWithWhereUniqueWithoutDivisionInput | PlacementUpsertWithWhereUniqueWithoutDivisionInput[]
    createMany?: PlacementCreateManyDivisionInputEnvelope
    set?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    disconnect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    delete?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    update?: PlacementUpdateWithWhereUniqueWithoutDivisionInput | PlacementUpdateWithWhereUniqueWithoutDivisionInput[]
    updateMany?: PlacementUpdateManyWithWhereWithoutDivisionInput | PlacementUpdateManyWithWhereWithoutDivisionInput[]
    deleteMany?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
  }

  export type EmployeeCreateNestedManyWithoutEducationInput = {
    create?: XOR<EmployeeCreateWithoutEducationInput, EmployeeUncheckedCreateWithoutEducationInput> | EmployeeCreateWithoutEducationInput[] | EmployeeUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutEducationInput | EmployeeCreateOrConnectWithoutEducationInput[]
    createMany?: EmployeeCreateManyEducationInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutEducationInput = {
    create?: XOR<EmployeeCreateWithoutEducationInput, EmployeeUncheckedCreateWithoutEducationInput> | EmployeeCreateWithoutEducationInput[] | EmployeeUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutEducationInput | EmployeeCreateOrConnectWithoutEducationInput[]
    createMany?: EmployeeCreateManyEducationInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeUpdateManyWithoutEducationNestedInput = {
    create?: XOR<EmployeeCreateWithoutEducationInput, EmployeeUncheckedCreateWithoutEducationInput> | EmployeeCreateWithoutEducationInput[] | EmployeeUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutEducationInput | EmployeeCreateOrConnectWithoutEducationInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutEducationInput | EmployeeUpsertWithWhereUniqueWithoutEducationInput[]
    createMany?: EmployeeCreateManyEducationInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutEducationInput | EmployeeUpdateWithWhereUniqueWithoutEducationInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutEducationInput | EmployeeUpdateManyWithWhereWithoutEducationInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutEducationNestedInput = {
    create?: XOR<EmployeeCreateWithoutEducationInput, EmployeeUncheckedCreateWithoutEducationInput> | EmployeeCreateWithoutEducationInput[] | EmployeeUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutEducationInput | EmployeeCreateOrConnectWithoutEducationInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutEducationInput | EmployeeUpsertWithWhereUniqueWithoutEducationInput[]
    createMany?: EmployeeCreateManyEducationInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutEducationInput | EmployeeUpdateWithWhereUniqueWithoutEducationInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutEducationInput | EmployeeUpdateManyWithWhereWithoutEducationInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type EmployeeCreateNestedManyWithoutPositionInput = {
    create?: XOR<EmployeeCreateWithoutPositionInput, EmployeeUncheckedCreateWithoutPositionInput> | EmployeeCreateWithoutPositionInput[] | EmployeeUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutPositionInput | EmployeeCreateOrConnectWithoutPositionInput[]
    createMany?: EmployeeCreateManyPositionInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutPositionInput = {
    create?: XOR<EmployeeCreateWithoutPositionInput, EmployeeUncheckedCreateWithoutPositionInput> | EmployeeCreateWithoutPositionInput[] | EmployeeUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutPositionInput | EmployeeCreateOrConnectWithoutPositionInput[]
    createMany?: EmployeeCreateManyPositionInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeUpdateManyWithoutPositionNestedInput = {
    create?: XOR<EmployeeCreateWithoutPositionInput, EmployeeUncheckedCreateWithoutPositionInput> | EmployeeCreateWithoutPositionInput[] | EmployeeUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutPositionInput | EmployeeCreateOrConnectWithoutPositionInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutPositionInput | EmployeeUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: EmployeeCreateManyPositionInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutPositionInput | EmployeeUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutPositionInput | EmployeeUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutPositionNestedInput = {
    create?: XOR<EmployeeCreateWithoutPositionInput, EmployeeUncheckedCreateWithoutPositionInput> | EmployeeCreateWithoutPositionInput[] | EmployeeUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutPositionInput | EmployeeCreateOrConnectWithoutPositionInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutPositionInput | EmployeeUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: EmployeeCreateManyPositionInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutPositionInput | EmployeeUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutPositionInput | EmployeeUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type GradeCreateNestedManyWithoutBaseSalaryInput = {
    create?: XOR<GradeCreateWithoutBaseSalaryInput, GradeUncheckedCreateWithoutBaseSalaryInput> | GradeCreateWithoutBaseSalaryInput[] | GradeUncheckedCreateWithoutBaseSalaryInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutBaseSalaryInput | GradeCreateOrConnectWithoutBaseSalaryInput[]
    createMany?: GradeCreateManyBaseSalaryInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type SalaryHistoryCreateNestedManyWithoutBaseSalaryInput = {
    create?: XOR<SalaryHistoryCreateWithoutBaseSalaryInput, SalaryHistoryUncheckedCreateWithoutBaseSalaryInput> | SalaryHistoryCreateWithoutBaseSalaryInput[] | SalaryHistoryUncheckedCreateWithoutBaseSalaryInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutBaseSalaryInput | SalaryHistoryCreateOrConnectWithoutBaseSalaryInput[]
    createMany?: SalaryHistoryCreateManyBaseSalaryInputEnvelope
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutBaseSalaryInput = {
    create?: XOR<GradeCreateWithoutBaseSalaryInput, GradeUncheckedCreateWithoutBaseSalaryInput> | GradeCreateWithoutBaseSalaryInput[] | GradeUncheckedCreateWithoutBaseSalaryInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutBaseSalaryInput | GradeCreateOrConnectWithoutBaseSalaryInput[]
    createMany?: GradeCreateManyBaseSalaryInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type SalaryHistoryUncheckedCreateNestedManyWithoutBaseSalaryInput = {
    create?: XOR<SalaryHistoryCreateWithoutBaseSalaryInput, SalaryHistoryUncheckedCreateWithoutBaseSalaryInput> | SalaryHistoryCreateWithoutBaseSalaryInput[] | SalaryHistoryUncheckedCreateWithoutBaseSalaryInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutBaseSalaryInput | SalaryHistoryCreateOrConnectWithoutBaseSalaryInput[]
    createMany?: SalaryHistoryCreateManyBaseSalaryInputEnvelope
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GradeUpdateManyWithoutBaseSalaryNestedInput = {
    create?: XOR<GradeCreateWithoutBaseSalaryInput, GradeUncheckedCreateWithoutBaseSalaryInput> | GradeCreateWithoutBaseSalaryInput[] | GradeUncheckedCreateWithoutBaseSalaryInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutBaseSalaryInput | GradeCreateOrConnectWithoutBaseSalaryInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutBaseSalaryInput | GradeUpsertWithWhereUniqueWithoutBaseSalaryInput[]
    createMany?: GradeCreateManyBaseSalaryInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutBaseSalaryInput | GradeUpdateWithWhereUniqueWithoutBaseSalaryInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutBaseSalaryInput | GradeUpdateManyWithWhereWithoutBaseSalaryInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type SalaryHistoryUpdateManyWithoutBaseSalaryNestedInput = {
    create?: XOR<SalaryHistoryCreateWithoutBaseSalaryInput, SalaryHistoryUncheckedCreateWithoutBaseSalaryInput> | SalaryHistoryCreateWithoutBaseSalaryInput[] | SalaryHistoryUncheckedCreateWithoutBaseSalaryInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutBaseSalaryInput | SalaryHistoryCreateOrConnectWithoutBaseSalaryInput[]
    upsert?: SalaryHistoryUpsertWithWhereUniqueWithoutBaseSalaryInput | SalaryHistoryUpsertWithWhereUniqueWithoutBaseSalaryInput[]
    createMany?: SalaryHistoryCreateManyBaseSalaryInputEnvelope
    set?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    disconnect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    delete?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    update?: SalaryHistoryUpdateWithWhereUniqueWithoutBaseSalaryInput | SalaryHistoryUpdateWithWhereUniqueWithoutBaseSalaryInput[]
    updateMany?: SalaryHistoryUpdateManyWithWhereWithoutBaseSalaryInput | SalaryHistoryUpdateManyWithWhereWithoutBaseSalaryInput[]
    deleteMany?: SalaryHistoryScalarWhereInput | SalaryHistoryScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutBaseSalaryNestedInput = {
    create?: XOR<GradeCreateWithoutBaseSalaryInput, GradeUncheckedCreateWithoutBaseSalaryInput> | GradeCreateWithoutBaseSalaryInput[] | GradeUncheckedCreateWithoutBaseSalaryInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutBaseSalaryInput | GradeCreateOrConnectWithoutBaseSalaryInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutBaseSalaryInput | GradeUpsertWithWhereUniqueWithoutBaseSalaryInput[]
    createMany?: GradeCreateManyBaseSalaryInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutBaseSalaryInput | GradeUpdateWithWhereUniqueWithoutBaseSalaryInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutBaseSalaryInput | GradeUpdateManyWithWhereWithoutBaseSalaryInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type SalaryHistoryUncheckedUpdateManyWithoutBaseSalaryNestedInput = {
    create?: XOR<SalaryHistoryCreateWithoutBaseSalaryInput, SalaryHistoryUncheckedCreateWithoutBaseSalaryInput> | SalaryHistoryCreateWithoutBaseSalaryInput[] | SalaryHistoryUncheckedCreateWithoutBaseSalaryInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutBaseSalaryInput | SalaryHistoryCreateOrConnectWithoutBaseSalaryInput[]
    upsert?: SalaryHistoryUpsertWithWhereUniqueWithoutBaseSalaryInput | SalaryHistoryUpsertWithWhereUniqueWithoutBaseSalaryInput[]
    createMany?: SalaryHistoryCreateManyBaseSalaryInputEnvelope
    set?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    disconnect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    delete?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    update?: SalaryHistoryUpdateWithWhereUniqueWithoutBaseSalaryInput | SalaryHistoryUpdateWithWhereUniqueWithoutBaseSalaryInput[]
    updateMany?: SalaryHistoryUpdateManyWithWhereWithoutBaseSalaryInput | SalaryHistoryUpdateManyWithWhereWithoutBaseSalaryInput[]
    deleteMany?: SalaryHistoryScalarWhereInput | SalaryHistoryScalarWhereInput[]
  }

  export type BaseSalaryCreateNestedOneWithoutGradesInput = {
    create?: XOR<BaseSalaryCreateWithoutGradesInput, BaseSalaryUncheckedCreateWithoutGradesInput>
    connectOrCreate?: BaseSalaryCreateOrConnectWithoutGradesInput
    connect?: BaseSalaryWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutGradeInput = {
    create?: XOR<EmployeeCreateWithoutGradeInput, EmployeeUncheckedCreateWithoutGradeInput> | EmployeeCreateWithoutGradeInput[] | EmployeeUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutGradeInput | EmployeeCreateOrConnectWithoutGradeInput[]
    createMany?: EmployeeCreateManyGradeInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type GradeHistoryCreateNestedManyWithoutGradeInput = {
    create?: XOR<GradeHistoryCreateWithoutGradeInput, GradeHistoryUncheckedCreateWithoutGradeInput> | GradeHistoryCreateWithoutGradeInput[] | GradeHistoryUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: GradeHistoryCreateOrConnectWithoutGradeInput | GradeHistoryCreateOrConnectWithoutGradeInput[]
    createMany?: GradeHistoryCreateManyGradeInputEnvelope
    connect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
  }

  export type SalaryHistoryCreateNestedManyWithoutGradeInput = {
    create?: XOR<SalaryHistoryCreateWithoutGradeInput, SalaryHistoryUncheckedCreateWithoutGradeInput> | SalaryHistoryCreateWithoutGradeInput[] | SalaryHistoryUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutGradeInput | SalaryHistoryCreateOrConnectWithoutGradeInput[]
    createMany?: SalaryHistoryCreateManyGradeInputEnvelope
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<EmployeeCreateWithoutGradeInput, EmployeeUncheckedCreateWithoutGradeInput> | EmployeeCreateWithoutGradeInput[] | EmployeeUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutGradeInput | EmployeeCreateOrConnectWithoutGradeInput[]
    createMany?: EmployeeCreateManyGradeInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type GradeHistoryUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<GradeHistoryCreateWithoutGradeInput, GradeHistoryUncheckedCreateWithoutGradeInput> | GradeHistoryCreateWithoutGradeInput[] | GradeHistoryUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: GradeHistoryCreateOrConnectWithoutGradeInput | GradeHistoryCreateOrConnectWithoutGradeInput[]
    createMany?: GradeHistoryCreateManyGradeInputEnvelope
    connect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
  }

  export type SalaryHistoryUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<SalaryHistoryCreateWithoutGradeInput, SalaryHistoryUncheckedCreateWithoutGradeInput> | SalaryHistoryCreateWithoutGradeInput[] | SalaryHistoryUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutGradeInput | SalaryHistoryCreateOrConnectWithoutGradeInput[]
    createMany?: SalaryHistoryCreateManyGradeInputEnvelope
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
  }

  export type BaseSalaryUpdateOneRequiredWithoutGradesNestedInput = {
    create?: XOR<BaseSalaryCreateWithoutGradesInput, BaseSalaryUncheckedCreateWithoutGradesInput>
    connectOrCreate?: BaseSalaryCreateOrConnectWithoutGradesInput
    upsert?: BaseSalaryUpsertWithoutGradesInput
    connect?: BaseSalaryWhereUniqueInput
    update?: XOR<XOR<BaseSalaryUpdateToOneWithWhereWithoutGradesInput, BaseSalaryUpdateWithoutGradesInput>, BaseSalaryUncheckedUpdateWithoutGradesInput>
  }

  export type EmployeeUpdateManyWithoutGradeNestedInput = {
    create?: XOR<EmployeeCreateWithoutGradeInput, EmployeeUncheckedCreateWithoutGradeInput> | EmployeeCreateWithoutGradeInput[] | EmployeeUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutGradeInput | EmployeeCreateOrConnectWithoutGradeInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutGradeInput | EmployeeUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: EmployeeCreateManyGradeInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutGradeInput | EmployeeUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutGradeInput | EmployeeUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type GradeHistoryUpdateManyWithoutGradeNestedInput = {
    create?: XOR<GradeHistoryCreateWithoutGradeInput, GradeHistoryUncheckedCreateWithoutGradeInput> | GradeHistoryCreateWithoutGradeInput[] | GradeHistoryUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: GradeHistoryCreateOrConnectWithoutGradeInput | GradeHistoryCreateOrConnectWithoutGradeInput[]
    upsert?: GradeHistoryUpsertWithWhereUniqueWithoutGradeInput | GradeHistoryUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: GradeHistoryCreateManyGradeInputEnvelope
    set?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    disconnect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    delete?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    connect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    update?: GradeHistoryUpdateWithWhereUniqueWithoutGradeInput | GradeHistoryUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: GradeHistoryUpdateManyWithWhereWithoutGradeInput | GradeHistoryUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: GradeHistoryScalarWhereInput | GradeHistoryScalarWhereInput[]
  }

  export type SalaryHistoryUpdateManyWithoutGradeNestedInput = {
    create?: XOR<SalaryHistoryCreateWithoutGradeInput, SalaryHistoryUncheckedCreateWithoutGradeInput> | SalaryHistoryCreateWithoutGradeInput[] | SalaryHistoryUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutGradeInput | SalaryHistoryCreateOrConnectWithoutGradeInput[]
    upsert?: SalaryHistoryUpsertWithWhereUniqueWithoutGradeInput | SalaryHistoryUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: SalaryHistoryCreateManyGradeInputEnvelope
    set?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    disconnect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    delete?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    update?: SalaryHistoryUpdateWithWhereUniqueWithoutGradeInput | SalaryHistoryUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: SalaryHistoryUpdateManyWithWhereWithoutGradeInput | SalaryHistoryUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: SalaryHistoryScalarWhereInput | SalaryHistoryScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<EmployeeCreateWithoutGradeInput, EmployeeUncheckedCreateWithoutGradeInput> | EmployeeCreateWithoutGradeInput[] | EmployeeUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutGradeInput | EmployeeCreateOrConnectWithoutGradeInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutGradeInput | EmployeeUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: EmployeeCreateManyGradeInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutGradeInput | EmployeeUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutGradeInput | EmployeeUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type GradeHistoryUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<GradeHistoryCreateWithoutGradeInput, GradeHistoryUncheckedCreateWithoutGradeInput> | GradeHistoryCreateWithoutGradeInput[] | GradeHistoryUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: GradeHistoryCreateOrConnectWithoutGradeInput | GradeHistoryCreateOrConnectWithoutGradeInput[]
    upsert?: GradeHistoryUpsertWithWhereUniqueWithoutGradeInput | GradeHistoryUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: GradeHistoryCreateManyGradeInputEnvelope
    set?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    disconnect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    delete?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    connect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    update?: GradeHistoryUpdateWithWhereUniqueWithoutGradeInput | GradeHistoryUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: GradeHistoryUpdateManyWithWhereWithoutGradeInput | GradeHistoryUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: GradeHistoryScalarWhereInput | GradeHistoryScalarWhereInput[]
  }

  export type SalaryHistoryUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<SalaryHistoryCreateWithoutGradeInput, SalaryHistoryUncheckedCreateWithoutGradeInput> | SalaryHistoryCreateWithoutGradeInput[] | SalaryHistoryUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutGradeInput | SalaryHistoryCreateOrConnectWithoutGradeInput[]
    upsert?: SalaryHistoryUpsertWithWhereUniqueWithoutGradeInput | SalaryHistoryUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: SalaryHistoryCreateManyGradeInputEnvelope
    set?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    disconnect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    delete?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    update?: SalaryHistoryUpdateWithWhereUniqueWithoutGradeInput | SalaryHistoryUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: SalaryHistoryUpdateManyWithWhereWithoutGradeInput | SalaryHistoryUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: SalaryHistoryScalarWhereInput | SalaryHistoryScalarWhereInput[]
  }

  export type EmployeeCreateNestedManyWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput> | EmployeeCreateWithoutUserInput[] | EmployeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput | EmployeeCreateOrConnectWithoutUserInput[]
    createMany?: EmployeeCreateManyUserInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type RecommendationCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput> | EmployeeCreateWithoutUserInput[] | EmployeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput | EmployeeCreateOrConnectWithoutUserInput[]
    createMany?: EmployeeCreateManyUserInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type EmployeeUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput> | EmployeeCreateWithoutUserInput[] | EmployeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput | EmployeeCreateOrConnectWithoutUserInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutUserInput | EmployeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmployeeCreateManyUserInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutUserInput | EmployeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutUserInput | EmployeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type RecommendationUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserInput | RecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserInput | RecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserInput | RecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput> | EmployeeCreateWithoutUserInput[] | EmployeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput | EmployeeCreateOrConnectWithoutUserInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutUserInput | EmployeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmployeeCreateManyUserInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutUserInput | EmployeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutUserInput | EmployeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserInput | RecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserInput | RecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserInput | RecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<UserCreateWithoutEmployeesInput, UserUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeesInput
    connect?: UserWhereUniqueInput
  }

  export type EducationCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<EducationCreateWithoutEmployeesInput, EducationUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: EducationCreateOrConnectWithoutEmployeesInput
    connect?: EducationWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<GradeCreateWithoutEmployeesInput, GradeUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: GradeCreateOrConnectWithoutEmployeesInput
    connect?: GradeWhereUniqueInput
  }

  export type PositionCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<PositionCreateWithoutEmployeesInput, PositionUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: PositionCreateOrConnectWithoutEmployeesInput
    connect?: PositionWhereUniqueInput
  }

  export type FamilyMemberCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<FamilyMemberCreateWithoutEmployeeInput, FamilyMemberUncheckedCreateWithoutEmployeeInput> | FamilyMemberCreateWithoutEmployeeInput[] | FamilyMemberUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: FamilyMemberCreateOrConnectWithoutEmployeeInput | FamilyMemberCreateOrConnectWithoutEmployeeInput[]
    createMany?: FamilyMemberCreateManyEmployeeInputEnvelope
    connect?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
  }

  export type InfractionCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<InfractionCreateWithoutEmployeeInput, InfractionUncheckedCreateWithoutEmployeeInput> | InfractionCreateWithoutEmployeeInput[] | InfractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InfractionCreateOrConnectWithoutEmployeeInput | InfractionCreateOrConnectWithoutEmployeeInput[]
    createMany?: InfractionCreateManyEmployeeInputEnvelope
    connect?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
  }

  export type GradeHistoryCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<GradeHistoryCreateWithoutEmployeeInput, GradeHistoryUncheckedCreateWithoutEmployeeInput> | GradeHistoryCreateWithoutEmployeeInput[] | GradeHistoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: GradeHistoryCreateOrConnectWithoutEmployeeInput | GradeHistoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: GradeHistoryCreateManyEmployeeInputEnvelope
    connect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
  }

  export type SalaryHistoryCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<SalaryHistoryCreateWithoutEmployeeInput, SalaryHistoryUncheckedCreateWithoutEmployeeInput> | SalaryHistoryCreateWithoutEmployeeInput[] | SalaryHistoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutEmployeeInput | SalaryHistoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: SalaryHistoryCreateManyEmployeeInputEnvelope
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
  }

  export type PlacementCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PlacementCreateWithoutEmployeeInput, PlacementUncheckedCreateWithoutEmployeeInput> | PlacementCreateWithoutEmployeeInput[] | PlacementUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutEmployeeInput | PlacementCreateOrConnectWithoutEmployeeInput[]
    createMany?: PlacementCreateManyEmployeeInputEnvelope
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
  }

  export type RecommendationCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<RecommendationCreateWithoutEmployeeInput, RecommendationUncheckedCreateWithoutEmployeeInput> | RecommendationCreateWithoutEmployeeInput[] | RecommendationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutEmployeeInput | RecommendationCreateOrConnectWithoutEmployeeInput[]
    createMany?: RecommendationCreateManyEmployeeInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<FamilyMemberCreateWithoutEmployeeInput, FamilyMemberUncheckedCreateWithoutEmployeeInput> | FamilyMemberCreateWithoutEmployeeInput[] | FamilyMemberUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: FamilyMemberCreateOrConnectWithoutEmployeeInput | FamilyMemberCreateOrConnectWithoutEmployeeInput[]
    createMany?: FamilyMemberCreateManyEmployeeInputEnvelope
    connect?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
  }

  export type InfractionUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<InfractionCreateWithoutEmployeeInput, InfractionUncheckedCreateWithoutEmployeeInput> | InfractionCreateWithoutEmployeeInput[] | InfractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InfractionCreateOrConnectWithoutEmployeeInput | InfractionCreateOrConnectWithoutEmployeeInput[]
    createMany?: InfractionCreateManyEmployeeInputEnvelope
    connect?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
  }

  export type GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<GradeHistoryCreateWithoutEmployeeInput, GradeHistoryUncheckedCreateWithoutEmployeeInput> | GradeHistoryCreateWithoutEmployeeInput[] | GradeHistoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: GradeHistoryCreateOrConnectWithoutEmployeeInput | GradeHistoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: GradeHistoryCreateManyEmployeeInputEnvelope
    connect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
  }

  export type SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<SalaryHistoryCreateWithoutEmployeeInput, SalaryHistoryUncheckedCreateWithoutEmployeeInput> | SalaryHistoryCreateWithoutEmployeeInput[] | SalaryHistoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutEmployeeInput | SalaryHistoryCreateOrConnectWithoutEmployeeInput[]
    createMany?: SalaryHistoryCreateManyEmployeeInputEnvelope
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
  }

  export type PlacementUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PlacementCreateWithoutEmployeeInput, PlacementUncheckedCreateWithoutEmployeeInput> | PlacementCreateWithoutEmployeeInput[] | PlacementUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutEmployeeInput | PlacementCreateOrConnectWithoutEmployeeInput[]
    createMany?: PlacementCreateManyEmployeeInputEnvelope
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<RecommendationCreateWithoutEmployeeInput, RecommendationUncheckedCreateWithoutEmployeeInput> | RecommendationCreateWithoutEmployeeInput[] | RecommendationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutEmployeeInput | RecommendationCreateOrConnectWithoutEmployeeInput[]
    createMany?: RecommendationCreateManyEmployeeInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type EnumEmployeeStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmployeeStatus
  }

  export type EnumFamilyStatusFieldUpdateOperationsInput = {
    set?: $Enums.FamilyStatus
  }

  export type UserUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<UserCreateWithoutEmployeesInput, UserUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeesInput
    upsert?: UserUpsertWithoutEmployeesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeesInput, UserUpdateWithoutEmployeesInput>, UserUncheckedUpdateWithoutEmployeesInput>
  }

  export type EducationUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<EducationCreateWithoutEmployeesInput, EducationUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: EducationCreateOrConnectWithoutEmployeesInput
    upsert?: EducationUpsertWithoutEmployeesInput
    connect?: EducationWhereUniqueInput
    update?: XOR<XOR<EducationUpdateToOneWithWhereWithoutEmployeesInput, EducationUpdateWithoutEmployeesInput>, EducationUncheckedUpdateWithoutEmployeesInput>
  }

  export type GradeUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<GradeCreateWithoutEmployeesInput, GradeUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: GradeCreateOrConnectWithoutEmployeesInput
    upsert?: GradeUpsertWithoutEmployeesInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutEmployeesInput, GradeUpdateWithoutEmployeesInput>, GradeUncheckedUpdateWithoutEmployeesInput>
  }

  export type PositionUpdateOneRequiredWithoutEmployeesNestedInput = {
    create?: XOR<PositionCreateWithoutEmployeesInput, PositionUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: PositionCreateOrConnectWithoutEmployeesInput
    upsert?: PositionUpsertWithoutEmployeesInput
    connect?: PositionWhereUniqueInput
    update?: XOR<XOR<PositionUpdateToOneWithWhereWithoutEmployeesInput, PositionUpdateWithoutEmployeesInput>, PositionUncheckedUpdateWithoutEmployeesInput>
  }

  export type FamilyMemberUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<FamilyMemberCreateWithoutEmployeeInput, FamilyMemberUncheckedCreateWithoutEmployeeInput> | FamilyMemberCreateWithoutEmployeeInput[] | FamilyMemberUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: FamilyMemberCreateOrConnectWithoutEmployeeInput | FamilyMemberCreateOrConnectWithoutEmployeeInput[]
    upsert?: FamilyMemberUpsertWithWhereUniqueWithoutEmployeeInput | FamilyMemberUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: FamilyMemberCreateManyEmployeeInputEnvelope
    set?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
    disconnect?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
    delete?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
    connect?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
    update?: FamilyMemberUpdateWithWhereUniqueWithoutEmployeeInput | FamilyMemberUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: FamilyMemberUpdateManyWithWhereWithoutEmployeeInput | FamilyMemberUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: FamilyMemberScalarWhereInput | FamilyMemberScalarWhereInput[]
  }

  export type InfractionUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<InfractionCreateWithoutEmployeeInput, InfractionUncheckedCreateWithoutEmployeeInput> | InfractionCreateWithoutEmployeeInput[] | InfractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InfractionCreateOrConnectWithoutEmployeeInput | InfractionCreateOrConnectWithoutEmployeeInput[]
    upsert?: InfractionUpsertWithWhereUniqueWithoutEmployeeInput | InfractionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: InfractionCreateManyEmployeeInputEnvelope
    set?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
    disconnect?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
    delete?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
    connect?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
    update?: InfractionUpdateWithWhereUniqueWithoutEmployeeInput | InfractionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: InfractionUpdateManyWithWhereWithoutEmployeeInput | InfractionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: InfractionScalarWhereInput | InfractionScalarWhereInput[]
  }

  export type GradeHistoryUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<GradeHistoryCreateWithoutEmployeeInput, GradeHistoryUncheckedCreateWithoutEmployeeInput> | GradeHistoryCreateWithoutEmployeeInput[] | GradeHistoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: GradeHistoryCreateOrConnectWithoutEmployeeInput | GradeHistoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: GradeHistoryUpsertWithWhereUniqueWithoutEmployeeInput | GradeHistoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: GradeHistoryCreateManyEmployeeInputEnvelope
    set?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    disconnect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    delete?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    connect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    update?: GradeHistoryUpdateWithWhereUniqueWithoutEmployeeInput | GradeHistoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: GradeHistoryUpdateManyWithWhereWithoutEmployeeInput | GradeHistoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: GradeHistoryScalarWhereInput | GradeHistoryScalarWhereInput[]
  }

  export type SalaryHistoryUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<SalaryHistoryCreateWithoutEmployeeInput, SalaryHistoryUncheckedCreateWithoutEmployeeInput> | SalaryHistoryCreateWithoutEmployeeInput[] | SalaryHistoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutEmployeeInput | SalaryHistoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: SalaryHistoryUpsertWithWhereUniqueWithoutEmployeeInput | SalaryHistoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: SalaryHistoryCreateManyEmployeeInputEnvelope
    set?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    disconnect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    delete?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    update?: SalaryHistoryUpdateWithWhereUniqueWithoutEmployeeInput | SalaryHistoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: SalaryHistoryUpdateManyWithWhereWithoutEmployeeInput | SalaryHistoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: SalaryHistoryScalarWhereInput | SalaryHistoryScalarWhereInput[]
  }

  export type PlacementUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PlacementCreateWithoutEmployeeInput, PlacementUncheckedCreateWithoutEmployeeInput> | PlacementCreateWithoutEmployeeInput[] | PlacementUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutEmployeeInput | PlacementCreateOrConnectWithoutEmployeeInput[]
    upsert?: PlacementUpsertWithWhereUniqueWithoutEmployeeInput | PlacementUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PlacementCreateManyEmployeeInputEnvelope
    set?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    disconnect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    delete?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    update?: PlacementUpdateWithWhereUniqueWithoutEmployeeInput | PlacementUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PlacementUpdateManyWithWhereWithoutEmployeeInput | PlacementUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
  }

  export type RecommendationUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<RecommendationCreateWithoutEmployeeInput, RecommendationUncheckedCreateWithoutEmployeeInput> | RecommendationCreateWithoutEmployeeInput[] | RecommendationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutEmployeeInput | RecommendationCreateOrConnectWithoutEmployeeInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutEmployeeInput | RecommendationUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: RecommendationCreateManyEmployeeInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutEmployeeInput | RecommendationUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutEmployeeInput | RecommendationUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<FamilyMemberCreateWithoutEmployeeInput, FamilyMemberUncheckedCreateWithoutEmployeeInput> | FamilyMemberCreateWithoutEmployeeInput[] | FamilyMemberUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: FamilyMemberCreateOrConnectWithoutEmployeeInput | FamilyMemberCreateOrConnectWithoutEmployeeInput[]
    upsert?: FamilyMemberUpsertWithWhereUniqueWithoutEmployeeInput | FamilyMemberUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: FamilyMemberCreateManyEmployeeInputEnvelope
    set?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
    disconnect?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
    delete?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
    connect?: FamilyMemberWhereUniqueInput | FamilyMemberWhereUniqueInput[]
    update?: FamilyMemberUpdateWithWhereUniqueWithoutEmployeeInput | FamilyMemberUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: FamilyMemberUpdateManyWithWhereWithoutEmployeeInput | FamilyMemberUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: FamilyMemberScalarWhereInput | FamilyMemberScalarWhereInput[]
  }

  export type InfractionUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<InfractionCreateWithoutEmployeeInput, InfractionUncheckedCreateWithoutEmployeeInput> | InfractionCreateWithoutEmployeeInput[] | InfractionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InfractionCreateOrConnectWithoutEmployeeInput | InfractionCreateOrConnectWithoutEmployeeInput[]
    upsert?: InfractionUpsertWithWhereUniqueWithoutEmployeeInput | InfractionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: InfractionCreateManyEmployeeInputEnvelope
    set?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
    disconnect?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
    delete?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
    connect?: InfractionWhereUniqueInput | InfractionWhereUniqueInput[]
    update?: InfractionUpdateWithWhereUniqueWithoutEmployeeInput | InfractionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: InfractionUpdateManyWithWhereWithoutEmployeeInput | InfractionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: InfractionScalarWhereInput | InfractionScalarWhereInput[]
  }

  export type GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<GradeHistoryCreateWithoutEmployeeInput, GradeHistoryUncheckedCreateWithoutEmployeeInput> | GradeHistoryCreateWithoutEmployeeInput[] | GradeHistoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: GradeHistoryCreateOrConnectWithoutEmployeeInput | GradeHistoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: GradeHistoryUpsertWithWhereUniqueWithoutEmployeeInput | GradeHistoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: GradeHistoryCreateManyEmployeeInputEnvelope
    set?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    disconnect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    delete?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    connect?: GradeHistoryWhereUniqueInput | GradeHistoryWhereUniqueInput[]
    update?: GradeHistoryUpdateWithWhereUniqueWithoutEmployeeInput | GradeHistoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: GradeHistoryUpdateManyWithWhereWithoutEmployeeInput | GradeHistoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: GradeHistoryScalarWhereInput | GradeHistoryScalarWhereInput[]
  }

  export type SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<SalaryHistoryCreateWithoutEmployeeInput, SalaryHistoryUncheckedCreateWithoutEmployeeInput> | SalaryHistoryCreateWithoutEmployeeInput[] | SalaryHistoryUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: SalaryHistoryCreateOrConnectWithoutEmployeeInput | SalaryHistoryCreateOrConnectWithoutEmployeeInput[]
    upsert?: SalaryHistoryUpsertWithWhereUniqueWithoutEmployeeInput | SalaryHistoryUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: SalaryHistoryCreateManyEmployeeInputEnvelope
    set?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    disconnect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    delete?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    connect?: SalaryHistoryWhereUniqueInput | SalaryHistoryWhereUniqueInput[]
    update?: SalaryHistoryUpdateWithWhereUniqueWithoutEmployeeInput | SalaryHistoryUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: SalaryHistoryUpdateManyWithWhereWithoutEmployeeInput | SalaryHistoryUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: SalaryHistoryScalarWhereInput | SalaryHistoryScalarWhereInput[]
  }

  export type PlacementUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PlacementCreateWithoutEmployeeInput, PlacementUncheckedCreateWithoutEmployeeInput> | PlacementCreateWithoutEmployeeInput[] | PlacementUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PlacementCreateOrConnectWithoutEmployeeInput | PlacementCreateOrConnectWithoutEmployeeInput[]
    upsert?: PlacementUpsertWithWhereUniqueWithoutEmployeeInput | PlacementUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PlacementCreateManyEmployeeInputEnvelope
    set?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    disconnect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    delete?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    connect?: PlacementWhereUniqueInput | PlacementWhereUniqueInput[]
    update?: PlacementUpdateWithWhereUniqueWithoutEmployeeInput | PlacementUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PlacementUpdateManyWithWhereWithoutEmployeeInput | PlacementUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<RecommendationCreateWithoutEmployeeInput, RecommendationUncheckedCreateWithoutEmployeeInput> | RecommendationCreateWithoutEmployeeInput[] | RecommendationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutEmployeeInput | RecommendationCreateOrConnectWithoutEmployeeInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutEmployeeInput | RecommendationUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: RecommendationCreateManyEmployeeInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutEmployeeInput | RecommendationUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutEmployeeInput | RecommendationUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutFamilyMembersInput = {
    create?: XOR<EmployeeCreateWithoutFamilyMembersInput, EmployeeUncheckedCreateWithoutFamilyMembersInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutFamilyMembersInput
    connect?: EmployeeWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EmployeeUpdateOneRequiredWithoutFamilyMembersNestedInput = {
    create?: XOR<EmployeeCreateWithoutFamilyMembersInput, EmployeeUncheckedCreateWithoutFamilyMembersInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutFamilyMembersInput
    upsert?: EmployeeUpsertWithoutFamilyMembersInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutFamilyMembersInput, EmployeeUpdateWithoutFamilyMembersInput>, EmployeeUncheckedUpdateWithoutFamilyMembersInput>
  }

  export type EmployeeCreateNestedOneWithoutInfractionsInput = {
    create?: XOR<EmployeeCreateWithoutInfractionsInput, EmployeeUncheckedCreateWithoutInfractionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutInfractionsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutInfractionsNestedInput = {
    create?: XOR<EmployeeCreateWithoutInfractionsInput, EmployeeUncheckedCreateWithoutInfractionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutInfractionsInput
    upsert?: EmployeeUpsertWithoutInfractionsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutInfractionsInput, EmployeeUpdateWithoutInfractionsInput>, EmployeeUncheckedUpdateWithoutInfractionsInput>
  }

  export type EmployeeCreateNestedOneWithoutSalaryHistoriesInput = {
    create?: XOR<EmployeeCreateWithoutSalaryHistoriesInput, EmployeeUncheckedCreateWithoutSalaryHistoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSalaryHistoriesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutSalaryHistoriesInput = {
    create?: XOR<GradeCreateWithoutSalaryHistoriesInput, GradeUncheckedCreateWithoutSalaryHistoriesInput>
    connectOrCreate?: GradeCreateOrConnectWithoutSalaryHistoriesInput
    connect?: GradeWhereUniqueInput
  }

  export type BaseSalaryCreateNestedOneWithoutSalaryHistoriesInput = {
    create?: XOR<BaseSalaryCreateWithoutSalaryHistoriesInput, BaseSalaryUncheckedCreateWithoutSalaryHistoriesInput>
    connectOrCreate?: BaseSalaryCreateOrConnectWithoutSalaryHistoriesInput
    connect?: BaseSalaryWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutSalaryHistoriesNestedInput = {
    create?: XOR<EmployeeCreateWithoutSalaryHistoriesInput, EmployeeUncheckedCreateWithoutSalaryHistoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSalaryHistoriesInput
    upsert?: EmployeeUpsertWithoutSalaryHistoriesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutSalaryHistoriesInput, EmployeeUpdateWithoutSalaryHistoriesInput>, EmployeeUncheckedUpdateWithoutSalaryHistoriesInput>
  }

  export type GradeUpdateOneRequiredWithoutSalaryHistoriesNestedInput = {
    create?: XOR<GradeCreateWithoutSalaryHistoriesInput, GradeUncheckedCreateWithoutSalaryHistoriesInput>
    connectOrCreate?: GradeCreateOrConnectWithoutSalaryHistoriesInput
    upsert?: GradeUpsertWithoutSalaryHistoriesInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutSalaryHistoriesInput, GradeUpdateWithoutSalaryHistoriesInput>, GradeUncheckedUpdateWithoutSalaryHistoriesInput>
  }

  export type BaseSalaryUpdateOneRequiredWithoutSalaryHistoriesNestedInput = {
    create?: XOR<BaseSalaryCreateWithoutSalaryHistoriesInput, BaseSalaryUncheckedCreateWithoutSalaryHistoriesInput>
    connectOrCreate?: BaseSalaryCreateOrConnectWithoutSalaryHistoriesInput
    upsert?: BaseSalaryUpsertWithoutSalaryHistoriesInput
    connect?: BaseSalaryWhereUniqueInput
    update?: XOR<XOR<BaseSalaryUpdateToOneWithWhereWithoutSalaryHistoriesInput, BaseSalaryUpdateWithoutSalaryHistoriesInput>, BaseSalaryUncheckedUpdateWithoutSalaryHistoriesInput>
  }

  export type EmployeeCreateNestedOneWithoutGradeHistoriesInput = {
    create?: XOR<EmployeeCreateWithoutGradeHistoriesInput, EmployeeUncheckedCreateWithoutGradeHistoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutGradeHistoriesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutGradeHistoriesInput = {
    create?: XOR<GradeCreateWithoutGradeHistoriesInput, GradeUncheckedCreateWithoutGradeHistoriesInput>
    connectOrCreate?: GradeCreateOrConnectWithoutGradeHistoriesInput
    connect?: GradeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutGradeHistoriesNestedInput = {
    create?: XOR<EmployeeCreateWithoutGradeHistoriesInput, EmployeeUncheckedCreateWithoutGradeHistoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutGradeHistoriesInput
    upsert?: EmployeeUpsertWithoutGradeHistoriesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutGradeHistoriesInput, EmployeeUpdateWithoutGradeHistoriesInput>, EmployeeUncheckedUpdateWithoutGradeHistoriesInput>
  }

  export type GradeUpdateOneRequiredWithoutGradeHistoriesNestedInput = {
    create?: XOR<GradeCreateWithoutGradeHistoriesInput, GradeUncheckedCreateWithoutGradeHistoriesInput>
    connectOrCreate?: GradeCreateOrConnectWithoutGradeHistoriesInput
    upsert?: GradeUpsertWithoutGradeHistoriesInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutGradeHistoriesInput, GradeUpdateWithoutGradeHistoriesInput>, GradeUncheckedUpdateWithoutGradeHistoriesInput>
  }

  export type EmployeeCreateNestedOneWithoutPlacementsInput = {
    create?: XOR<EmployeeCreateWithoutPlacementsInput, EmployeeUncheckedCreateWithoutPlacementsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPlacementsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type BranchCreateNestedOneWithoutPlacementsInput = {
    create?: XOR<BranchCreateWithoutPlacementsInput, BranchUncheckedCreateWithoutPlacementsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutPlacementsInput
    connect?: BranchWhereUniqueInput
  }

  export type UnitCreateNestedOneWithoutPlacementsInput = {
    create?: XOR<UnitCreateWithoutPlacementsInput, UnitUncheckedCreateWithoutPlacementsInput>
    connectOrCreate?: UnitCreateOrConnectWithoutPlacementsInput
    connect?: UnitWhereUniqueInput
  }

  export type DivisionCreateNestedOneWithoutPlacementsInput = {
    create?: XOR<DivisionCreateWithoutPlacementsInput, DivisionUncheckedCreateWithoutPlacementsInput>
    connectOrCreate?: DivisionCreateOrConnectWithoutPlacementsInput
    connect?: DivisionWhereUniqueInput
  }

  export type EnumPlacementTypeFieldUpdateOperationsInput = {
    set?: $Enums.PlacementType
  }

  export type EmployeeUpdateOneRequiredWithoutPlacementsNestedInput = {
    create?: XOR<EmployeeCreateWithoutPlacementsInput, EmployeeUncheckedCreateWithoutPlacementsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPlacementsInput
    upsert?: EmployeeUpsertWithoutPlacementsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPlacementsInput, EmployeeUpdateWithoutPlacementsInput>, EmployeeUncheckedUpdateWithoutPlacementsInput>
  }

  export type BranchUpdateOneRequiredWithoutPlacementsNestedInput = {
    create?: XOR<BranchCreateWithoutPlacementsInput, BranchUncheckedCreateWithoutPlacementsInput>
    connectOrCreate?: BranchCreateOrConnectWithoutPlacementsInput
    upsert?: BranchUpsertWithoutPlacementsInput
    connect?: BranchWhereUniqueInput
    update?: XOR<XOR<BranchUpdateToOneWithWhereWithoutPlacementsInput, BranchUpdateWithoutPlacementsInput>, BranchUncheckedUpdateWithoutPlacementsInput>
  }

  export type UnitUpdateOneRequiredWithoutPlacementsNestedInput = {
    create?: XOR<UnitCreateWithoutPlacementsInput, UnitUncheckedCreateWithoutPlacementsInput>
    connectOrCreate?: UnitCreateOrConnectWithoutPlacementsInput
    upsert?: UnitUpsertWithoutPlacementsInput
    connect?: UnitWhereUniqueInput
    update?: XOR<XOR<UnitUpdateToOneWithWhereWithoutPlacementsInput, UnitUpdateWithoutPlacementsInput>, UnitUncheckedUpdateWithoutPlacementsInput>
  }

  export type DivisionUpdateOneRequiredWithoutPlacementsNestedInput = {
    create?: XOR<DivisionCreateWithoutPlacementsInput, DivisionUncheckedCreateWithoutPlacementsInput>
    connectOrCreate?: DivisionCreateOrConnectWithoutPlacementsInput
    upsert?: DivisionUpsertWithoutPlacementsInput
    connect?: DivisionWhereUniqueInput
    update?: XOR<XOR<DivisionUpdateToOneWithWhereWithoutPlacementsInput, DivisionUpdateWithoutPlacementsInput>, DivisionUncheckedUpdateWithoutPlacementsInput>
  }

  export type EmployeeCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<EmployeeCreateWithoutRecommendationsInput, EmployeeUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutRecommendationsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRecommendationStatusFieldUpdateOperationsInput = {
    set?: $Enums.RecommendationStatus
  }

  export type EnumRecommendationTypeFieldUpdateOperationsInput = {
    set?: $Enums.RecommendationType
  }

  export type EmployeeUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<EmployeeCreateWithoutRecommendationsInput, EmployeeUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutRecommendationsInput
    upsert?: EmployeeUpsertWithoutRecommendationsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutRecommendationsInput, EmployeeUpdateWithoutRecommendationsInput>, EmployeeUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationsInput
    upsert?: UserUpsertWithoutRecommendationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecommendationsInput, UserUpdateWithoutRecommendationsInput>, UserUncheckedUpdateWithoutRecommendationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedEnumEmployeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[]
    notIn?: $Enums.EmployeeStatus[]
    not?: NestedEnumEmployeeStatusFilter<$PrismaModel> | $Enums.EmployeeStatus
  }

  export type NestedEnumFamilyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FamilyStatus | EnumFamilyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FamilyStatus[]
    notIn?: $Enums.FamilyStatus[]
    not?: NestedEnumFamilyStatusFilter<$PrismaModel> | $Enums.FamilyStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmployeeStatus | EnumEmployeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmployeeStatus[]
    notIn?: $Enums.EmployeeStatus[]
    not?: NestedEnumEmployeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmployeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmployeeStatusFilter<$PrismaModel>
    _max?: NestedEnumEmployeeStatusFilter<$PrismaModel>
  }

  export type NestedEnumFamilyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FamilyStatus | EnumFamilyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FamilyStatus[]
    notIn?: $Enums.FamilyStatus[]
    not?: NestedEnumFamilyStatusWithAggregatesFilter<$PrismaModel> | $Enums.FamilyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFamilyStatusFilter<$PrismaModel>
    _max?: NestedEnumFamilyStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPlacementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlacementType | EnumPlacementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlacementType[]
    notIn?: $Enums.PlacementType[]
    not?: NestedEnumPlacementTypeFilter<$PrismaModel> | $Enums.PlacementType
  }

  export type NestedEnumPlacementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlacementType | EnumPlacementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlacementType[]
    notIn?: $Enums.PlacementType[]
    not?: NestedEnumPlacementTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlacementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlacementTypeFilter<$PrismaModel>
    _max?: NestedEnumPlacementTypeFilter<$PrismaModel>
  }

  export type NestedEnumRecommendationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationStatus | EnumRecommendationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationStatus[]
    notIn?: $Enums.RecommendationStatus[]
    not?: NestedEnumRecommendationStatusFilter<$PrismaModel> | $Enums.RecommendationStatus
  }

  export type NestedEnumRecommendationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationType | EnumRecommendationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationType[]
    notIn?: $Enums.RecommendationType[]
    not?: NestedEnumRecommendationTypeFilter<$PrismaModel> | $Enums.RecommendationType
  }

  export type NestedEnumRecommendationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationStatus | EnumRecommendationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationStatus[]
    notIn?: $Enums.RecommendationStatus[]
    not?: NestedEnumRecommendationStatusWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationStatusFilter<$PrismaModel>
    _max?: NestedEnumRecommendationStatusFilter<$PrismaModel>
  }

  export type NestedEnumRecommendationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationType | EnumRecommendationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationType[]
    notIn?: $Enums.RecommendationType[]
    not?: NestedEnumRecommendationTypeWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationTypeFilter<$PrismaModel>
    _max?: NestedEnumRecommendationTypeFilter<$PrismaModel>
  }

  export type PlacementCreateWithoutBranchInput = {
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutPlacementsInput
    unit: UnitCreateNestedOneWithoutPlacementsInput
    division: DivisionCreateNestedOneWithoutPlacementsInput
  }

  export type PlacementUncheckedCreateWithoutBranchInput = {
    placementId?: number
    employeeId: number
    unitId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementCreateOrConnectWithoutBranchInput = {
    where: PlacementWhereUniqueInput
    create: XOR<PlacementCreateWithoutBranchInput, PlacementUncheckedCreateWithoutBranchInput>
  }

  export type PlacementCreateManyBranchInputEnvelope = {
    data: PlacementCreateManyBranchInput | PlacementCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type PlacementUpsertWithWhereUniqueWithoutBranchInput = {
    where: PlacementWhereUniqueInput
    update: XOR<PlacementUpdateWithoutBranchInput, PlacementUncheckedUpdateWithoutBranchInput>
    create: XOR<PlacementCreateWithoutBranchInput, PlacementUncheckedCreateWithoutBranchInput>
  }

  export type PlacementUpdateWithWhereUniqueWithoutBranchInput = {
    where: PlacementWhereUniqueInput
    data: XOR<PlacementUpdateWithoutBranchInput, PlacementUncheckedUpdateWithoutBranchInput>
  }

  export type PlacementUpdateManyWithWhereWithoutBranchInput = {
    where: PlacementScalarWhereInput
    data: XOR<PlacementUpdateManyMutationInput, PlacementUncheckedUpdateManyWithoutBranchInput>
  }

  export type PlacementScalarWhereInput = {
    AND?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
    OR?: PlacementScalarWhereInput[]
    NOT?: PlacementScalarWhereInput | PlacementScalarWhereInput[]
    placementId?: IntFilter<"Placement"> | number
    employeeId?: IntFilter<"Placement"> | number
    branchId?: IntFilter<"Placement"> | number
    unitId?: IntFilter<"Placement"> | number
    divisionId?: IntFilter<"Placement"> | number
    placementType?: EnumPlacementTypeFilter<"Placement"> | $Enums.PlacementType
    effectiveDate?: DateTimeFilter<"Placement"> | Date | string
  }

  export type PlacementCreateWithoutUnitInput = {
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutPlacementsInput
    branch: BranchCreateNestedOneWithoutPlacementsInput
    division: DivisionCreateNestedOneWithoutPlacementsInput
  }

  export type PlacementUncheckedCreateWithoutUnitInput = {
    placementId?: number
    employeeId: number
    branchId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementCreateOrConnectWithoutUnitInput = {
    where: PlacementWhereUniqueInput
    create: XOR<PlacementCreateWithoutUnitInput, PlacementUncheckedCreateWithoutUnitInput>
  }

  export type PlacementCreateManyUnitInputEnvelope = {
    data: PlacementCreateManyUnitInput | PlacementCreateManyUnitInput[]
    skipDuplicates?: boolean
  }

  export type PlacementUpsertWithWhereUniqueWithoutUnitInput = {
    where: PlacementWhereUniqueInput
    update: XOR<PlacementUpdateWithoutUnitInput, PlacementUncheckedUpdateWithoutUnitInput>
    create: XOR<PlacementCreateWithoutUnitInput, PlacementUncheckedCreateWithoutUnitInput>
  }

  export type PlacementUpdateWithWhereUniqueWithoutUnitInput = {
    where: PlacementWhereUniqueInput
    data: XOR<PlacementUpdateWithoutUnitInput, PlacementUncheckedUpdateWithoutUnitInput>
  }

  export type PlacementUpdateManyWithWhereWithoutUnitInput = {
    where: PlacementScalarWhereInput
    data: XOR<PlacementUpdateManyMutationInput, PlacementUncheckedUpdateManyWithoutUnitInput>
  }

  export type PlacementCreateWithoutDivisionInput = {
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutPlacementsInput
    branch: BranchCreateNestedOneWithoutPlacementsInput
    unit: UnitCreateNestedOneWithoutPlacementsInput
  }

  export type PlacementUncheckedCreateWithoutDivisionInput = {
    placementId?: number
    employeeId: number
    branchId: number
    unitId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementCreateOrConnectWithoutDivisionInput = {
    where: PlacementWhereUniqueInput
    create: XOR<PlacementCreateWithoutDivisionInput, PlacementUncheckedCreateWithoutDivisionInput>
  }

  export type PlacementCreateManyDivisionInputEnvelope = {
    data: PlacementCreateManyDivisionInput | PlacementCreateManyDivisionInput[]
    skipDuplicates?: boolean
  }

  export type PlacementUpsertWithWhereUniqueWithoutDivisionInput = {
    where: PlacementWhereUniqueInput
    update: XOR<PlacementUpdateWithoutDivisionInput, PlacementUncheckedUpdateWithoutDivisionInput>
    create: XOR<PlacementCreateWithoutDivisionInput, PlacementUncheckedCreateWithoutDivisionInput>
  }

  export type PlacementUpdateWithWhereUniqueWithoutDivisionInput = {
    where: PlacementWhereUniqueInput
    data: XOR<PlacementUpdateWithoutDivisionInput, PlacementUncheckedUpdateWithoutDivisionInput>
  }

  export type PlacementUpdateManyWithWhereWithoutDivisionInput = {
    where: PlacementScalarWhereInput
    data: XOR<PlacementUpdateManyMutationInput, PlacementUncheckedUpdateManyWithoutDivisionInput>
  }

  export type EmployeeCreateWithoutEducationInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutEducationInput = {
    id?: number
    userId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutEducationInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutEducationInput, EmployeeUncheckedCreateWithoutEducationInput>
  }

  export type EmployeeCreateManyEducationInputEnvelope = {
    data: EmployeeCreateManyEducationInput | EmployeeCreateManyEducationInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithWhereUniqueWithoutEducationInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutEducationInput, EmployeeUncheckedUpdateWithoutEducationInput>
    create: XOR<EmployeeCreateWithoutEducationInput, EmployeeUncheckedCreateWithoutEducationInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutEducationInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutEducationInput, EmployeeUncheckedUpdateWithoutEducationInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutEducationInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutEducationInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: IntFilter<"Employee"> | number
    userId?: IntFilter<"Employee"> | number
    educationId?: IntFilter<"Employee"> | number
    gradeId?: IntFilter<"Employee"> | number
    positionId?: IntFilter<"Employee"> | number
    fullName?: StringFilter<"Employee"> | string
    nipp?: StringFilter<"Employee"> | string
    birthPlace?: StringFilter<"Employee"> | string
    birthDate?: DateTimeFilter<"Employee"> | Date | string
    gender?: EnumGenderFilter<"Employee"> | $Enums.Gender
    kkNumber?: StringFilter<"Employee"> | string
    nik?: StringFilter<"Employee"> | string
    employeeStatus?: EnumEmployeeStatusFilter<"Employee"> | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFilter<"Employee"> | $Enums.FamilyStatus
    address?: StringFilter<"Employee"> | string
    photoUrl?: StringFilter<"Employee"> | string
  }

  export type EmployeeCreateWithoutPositionInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPositionInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPositionInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPositionInput, EmployeeUncheckedCreateWithoutPositionInput>
  }

  export type EmployeeCreateManyPositionInputEnvelope = {
    data: EmployeeCreateManyPositionInput | EmployeeCreateManyPositionInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithWhereUniqueWithoutPositionInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutPositionInput, EmployeeUncheckedUpdateWithoutPositionInput>
    create: XOR<EmployeeCreateWithoutPositionInput, EmployeeUncheckedCreateWithoutPositionInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutPositionInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutPositionInput, EmployeeUncheckedUpdateWithoutPositionInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutPositionInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutPositionInput>
  }

  export type GradeCreateWithoutBaseSalaryInput = {
    title: string
    grade: string
    employees?: EmployeeCreateNestedManyWithoutGradeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutGradeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutBaseSalaryInput = {
    gradeId?: number
    title: string
    grade: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutGradeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutGradeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutBaseSalaryInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutBaseSalaryInput, GradeUncheckedCreateWithoutBaseSalaryInput>
  }

  export type GradeCreateManyBaseSalaryInputEnvelope = {
    data: GradeCreateManyBaseSalaryInput | GradeCreateManyBaseSalaryInput[]
    skipDuplicates?: boolean
  }

  export type SalaryHistoryCreateWithoutBaseSalaryInput = {
    amount: number
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutSalaryHistoriesInput
    grade: GradeCreateNestedOneWithoutSalaryHistoriesInput
  }

  export type SalaryHistoryUncheckedCreateWithoutBaseSalaryInput = {
    id?: number
    employeeId: number
    gradeId: number
    amount: number
    effectiveDate: Date | string
  }

  export type SalaryHistoryCreateOrConnectWithoutBaseSalaryInput = {
    where: SalaryHistoryWhereUniqueInput
    create: XOR<SalaryHistoryCreateWithoutBaseSalaryInput, SalaryHistoryUncheckedCreateWithoutBaseSalaryInput>
  }

  export type SalaryHistoryCreateManyBaseSalaryInputEnvelope = {
    data: SalaryHistoryCreateManyBaseSalaryInput | SalaryHistoryCreateManyBaseSalaryInput[]
    skipDuplicates?: boolean
  }

  export type GradeUpsertWithWhereUniqueWithoutBaseSalaryInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutBaseSalaryInput, GradeUncheckedUpdateWithoutBaseSalaryInput>
    create: XOR<GradeCreateWithoutBaseSalaryInput, GradeUncheckedCreateWithoutBaseSalaryInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutBaseSalaryInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutBaseSalaryInput, GradeUncheckedUpdateWithoutBaseSalaryInput>
  }

  export type GradeUpdateManyWithWhereWithoutBaseSalaryInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutBaseSalaryInput>
  }

  export type GradeScalarWhereInput = {
    AND?: GradeScalarWhereInput | GradeScalarWhereInput[]
    OR?: GradeScalarWhereInput[]
    NOT?: GradeScalarWhereInput | GradeScalarWhereInput[]
    gradeId?: IntFilter<"Grade"> | number
    baseSalaryId?: IntFilter<"Grade"> | number
    title?: StringFilter<"Grade"> | string
    grade?: StringFilter<"Grade"> | string
  }

  export type SalaryHistoryUpsertWithWhereUniqueWithoutBaseSalaryInput = {
    where: SalaryHistoryWhereUniqueInput
    update: XOR<SalaryHistoryUpdateWithoutBaseSalaryInput, SalaryHistoryUncheckedUpdateWithoutBaseSalaryInput>
    create: XOR<SalaryHistoryCreateWithoutBaseSalaryInput, SalaryHistoryUncheckedCreateWithoutBaseSalaryInput>
  }

  export type SalaryHistoryUpdateWithWhereUniqueWithoutBaseSalaryInput = {
    where: SalaryHistoryWhereUniqueInput
    data: XOR<SalaryHistoryUpdateWithoutBaseSalaryInput, SalaryHistoryUncheckedUpdateWithoutBaseSalaryInput>
  }

  export type SalaryHistoryUpdateManyWithWhereWithoutBaseSalaryInput = {
    where: SalaryHistoryScalarWhereInput
    data: XOR<SalaryHistoryUpdateManyMutationInput, SalaryHistoryUncheckedUpdateManyWithoutBaseSalaryInput>
  }

  export type SalaryHistoryScalarWhereInput = {
    AND?: SalaryHistoryScalarWhereInput | SalaryHistoryScalarWhereInput[]
    OR?: SalaryHistoryScalarWhereInput[]
    NOT?: SalaryHistoryScalarWhereInput | SalaryHistoryScalarWhereInput[]
    id?: IntFilter<"SalaryHistory"> | number
    employeeId?: IntFilter<"SalaryHistory"> | number
    gradeId?: IntFilter<"SalaryHistory"> | number
    baseSalaryId?: IntFilter<"SalaryHistory"> | number
    amount?: IntFilter<"SalaryHistory"> | number
    effectiveDate?: DateTimeFilter<"SalaryHistory"> | Date | string
  }

  export type BaseSalaryCreateWithoutGradesInput = {
    amount: number
    type: string
    yearsOfService?: string | null
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutBaseSalaryInput
  }

  export type BaseSalaryUncheckedCreateWithoutGradesInput = {
    baseSalaryId?: number
    amount: number
    type: string
    yearsOfService?: string | null
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutBaseSalaryInput
  }

  export type BaseSalaryCreateOrConnectWithoutGradesInput = {
    where: BaseSalaryWhereUniqueInput
    create: XOR<BaseSalaryCreateWithoutGradesInput, BaseSalaryUncheckedCreateWithoutGradesInput>
  }

  export type EmployeeCreateWithoutGradeInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutGradeInput = {
    id?: number
    userId: number
    educationId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutGradeInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutGradeInput, EmployeeUncheckedCreateWithoutGradeInput>
  }

  export type EmployeeCreateManyGradeInputEnvelope = {
    data: EmployeeCreateManyGradeInput | EmployeeCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type GradeHistoryCreateWithoutGradeInput = {
    rankName: string
    gradeName: string
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutGradeHistoriesInput
  }

  export type GradeHistoryUncheckedCreateWithoutGradeInput = {
    gradeHistoryId?: number
    employeeId: number
    rankName: string
    gradeName: string
    effectiveDate: Date | string
  }

  export type GradeHistoryCreateOrConnectWithoutGradeInput = {
    where: GradeHistoryWhereUniqueInput
    create: XOR<GradeHistoryCreateWithoutGradeInput, GradeHistoryUncheckedCreateWithoutGradeInput>
  }

  export type GradeHistoryCreateManyGradeInputEnvelope = {
    data: GradeHistoryCreateManyGradeInput | GradeHistoryCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type SalaryHistoryCreateWithoutGradeInput = {
    amount: number
    effectiveDate: Date | string
    employee: EmployeeCreateNestedOneWithoutSalaryHistoriesInput
    baseSalary: BaseSalaryCreateNestedOneWithoutSalaryHistoriesInput
  }

  export type SalaryHistoryUncheckedCreateWithoutGradeInput = {
    id?: number
    employeeId: number
    baseSalaryId: number
    amount: number
    effectiveDate: Date | string
  }

  export type SalaryHistoryCreateOrConnectWithoutGradeInput = {
    where: SalaryHistoryWhereUniqueInput
    create: XOR<SalaryHistoryCreateWithoutGradeInput, SalaryHistoryUncheckedCreateWithoutGradeInput>
  }

  export type SalaryHistoryCreateManyGradeInputEnvelope = {
    data: SalaryHistoryCreateManyGradeInput | SalaryHistoryCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type BaseSalaryUpsertWithoutGradesInput = {
    update: XOR<BaseSalaryUpdateWithoutGradesInput, BaseSalaryUncheckedUpdateWithoutGradesInput>
    create: XOR<BaseSalaryCreateWithoutGradesInput, BaseSalaryUncheckedCreateWithoutGradesInput>
    where?: BaseSalaryWhereInput
  }

  export type BaseSalaryUpdateToOneWithWhereWithoutGradesInput = {
    where?: BaseSalaryWhereInput
    data: XOR<BaseSalaryUpdateWithoutGradesInput, BaseSalaryUncheckedUpdateWithoutGradesInput>
  }

  export type BaseSalaryUpdateWithoutGradesInput = {
    amount?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    yearsOfService?: NullableStringFieldUpdateOperationsInput | string | null
    salaryHistories?: SalaryHistoryUpdateManyWithoutBaseSalaryNestedInput
  }

  export type BaseSalaryUncheckedUpdateWithoutGradesInput = {
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    yearsOfService?: NullableStringFieldUpdateOperationsInput | string | null
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutBaseSalaryNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutGradeInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutGradeInput, EmployeeUncheckedUpdateWithoutGradeInput>
    create: XOR<EmployeeCreateWithoutGradeInput, EmployeeUncheckedCreateWithoutGradeInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutGradeInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutGradeInput, EmployeeUncheckedUpdateWithoutGradeInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutGradeInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutGradeInput>
  }

  export type GradeHistoryUpsertWithWhereUniqueWithoutGradeInput = {
    where: GradeHistoryWhereUniqueInput
    update: XOR<GradeHistoryUpdateWithoutGradeInput, GradeHistoryUncheckedUpdateWithoutGradeInput>
    create: XOR<GradeHistoryCreateWithoutGradeInput, GradeHistoryUncheckedCreateWithoutGradeInput>
  }

  export type GradeHistoryUpdateWithWhereUniqueWithoutGradeInput = {
    where: GradeHistoryWhereUniqueInput
    data: XOR<GradeHistoryUpdateWithoutGradeInput, GradeHistoryUncheckedUpdateWithoutGradeInput>
  }

  export type GradeHistoryUpdateManyWithWhereWithoutGradeInput = {
    where: GradeHistoryScalarWhereInput
    data: XOR<GradeHistoryUpdateManyMutationInput, GradeHistoryUncheckedUpdateManyWithoutGradeInput>
  }

  export type GradeHistoryScalarWhereInput = {
    AND?: GradeHistoryScalarWhereInput | GradeHistoryScalarWhereInput[]
    OR?: GradeHistoryScalarWhereInput[]
    NOT?: GradeHistoryScalarWhereInput | GradeHistoryScalarWhereInput[]
    gradeHistoryId?: IntFilter<"GradeHistory"> | number
    employeeId?: IntFilter<"GradeHistory"> | number
    gradeId?: IntFilter<"GradeHistory"> | number
    rankName?: StringFilter<"GradeHistory"> | string
    gradeName?: StringFilter<"GradeHistory"> | string
    effectiveDate?: DateTimeFilter<"GradeHistory"> | Date | string
  }

  export type SalaryHistoryUpsertWithWhereUniqueWithoutGradeInput = {
    where: SalaryHistoryWhereUniqueInput
    update: XOR<SalaryHistoryUpdateWithoutGradeInput, SalaryHistoryUncheckedUpdateWithoutGradeInput>
    create: XOR<SalaryHistoryCreateWithoutGradeInput, SalaryHistoryUncheckedCreateWithoutGradeInput>
  }

  export type SalaryHistoryUpdateWithWhereUniqueWithoutGradeInput = {
    where: SalaryHistoryWhereUniqueInput
    data: XOR<SalaryHistoryUpdateWithoutGradeInput, SalaryHistoryUncheckedUpdateWithoutGradeInput>
  }

  export type SalaryHistoryUpdateManyWithWhereWithoutGradeInput = {
    where: SalaryHistoryScalarWhereInput
    data: XOR<SalaryHistoryUpdateManyMutationInput, SalaryHistoryUncheckedUpdateManyWithoutGradeInput>
  }

  export type EmployeeCreateWithoutUserInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutUserInput = {
    id?: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type EmployeeCreateManyUserInputEnvelope = {
    data: EmployeeCreateManyUserInput | EmployeeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecommendationCreateWithoutUserInput = {
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
    employee: EmployeeCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateWithoutUserInput = {
    RecommendationId?: number
    employeeId: number
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
  }

  export type RecommendationCreateOrConnectWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput>
  }

  export type RecommendationCreateManyUserInputEnvelope = {
    data: RecommendationCreateManyUserInput | RecommendationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithWhereUniqueWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutUserInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutUserInput>
  }

  export type RecommendationUpsertWithWhereUniqueWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutUserInput, RecommendationUncheckedUpdateWithoutUserInput>
    create: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutUserInput, RecommendationUncheckedUpdateWithoutUserInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutUserInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutUserInput>
  }

  export type RecommendationScalarWhereInput = {
    AND?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    OR?: RecommendationScalarWhereInput[]
    NOT?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    RecommendationId?: IntFilter<"Recommendation"> | number
    employeeId?: IntFilter<"Recommendation"> | number
    userId?: IntFilter<"Recommendation"> | number
    recommendationDate?: DateTimeFilter<"Recommendation"> | Date | string
    status?: EnumRecommendationStatusFilter<"Recommendation"> | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFilter<"Recommendation"> | $Enums.RecommendationType
    processDate?: DateTimeNullableFilter<"Recommendation"> | Date | string | null
    fileCode?: StringFilter<"Recommendation"> | string
  }

  export type UserCreateWithoutEmployeesInput = {
    username: string
    password: string
    email: string
    phoneNumber: string
    role: $Enums.Role
    token?: string | null
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployeesInput = {
    userId?: number
    username: string
    password: string
    email: string
    phoneNumber: string
    role: $Enums.Role
    token?: string | null
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployeesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeesInput, UserUncheckedCreateWithoutEmployeesInput>
  }

  export type EducationCreateWithoutEmployeesInput = {
    level: string
    major: string
  }

  export type EducationUncheckedCreateWithoutEmployeesInput = {
    educationId?: number
    level: string
    major: string
  }

  export type EducationCreateOrConnectWithoutEmployeesInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutEmployeesInput, EducationUncheckedCreateWithoutEmployeesInput>
  }

  export type GradeCreateWithoutEmployeesInput = {
    title: string
    grade: string
    baseSalary: BaseSalaryCreateNestedOneWithoutGradesInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutGradeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutEmployeesInput = {
    gradeId?: number
    baseSalaryId: number
    title: string
    grade: string
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutGradeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutEmployeesInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutEmployeesInput, GradeUncheckedCreateWithoutEmployeesInput>
  }

  export type PositionCreateWithoutEmployeesInput = {
    positionName: string
  }

  export type PositionUncheckedCreateWithoutEmployeesInput = {
    positionId?: number
    positionName: string
  }

  export type PositionCreateOrConnectWithoutEmployeesInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutEmployeesInput, PositionUncheckedCreateWithoutEmployeesInput>
  }

  export type FamilyMemberCreateWithoutEmployeeInput = {
    nik: string
    name: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    marriageDate?: Date | string | null
    familyStatus: $Enums.EmployeeStatus
  }

  export type FamilyMemberUncheckedCreateWithoutEmployeeInput = {
    id?: number
    nik: string
    name: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    marriageDate?: Date | string | null
    familyStatus: $Enums.EmployeeStatus
  }

  export type FamilyMemberCreateOrConnectWithoutEmployeeInput = {
    where: FamilyMemberWhereUniqueInput
    create: XOR<FamilyMemberCreateWithoutEmployeeInput, FamilyMemberUncheckedCreateWithoutEmployeeInput>
  }

  export type FamilyMemberCreateManyEmployeeInputEnvelope = {
    data: FamilyMemberCreateManyEmployeeInput | FamilyMemberCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type InfractionCreateWithoutEmployeeInput = {
    decreeNumber: string
    name: string
    description: string
  }

  export type InfractionUncheckedCreateWithoutEmployeeInput = {
    id?: number
    decreeNumber: string
    name: string
    description: string
  }

  export type InfractionCreateOrConnectWithoutEmployeeInput = {
    where: InfractionWhereUniqueInput
    create: XOR<InfractionCreateWithoutEmployeeInput, InfractionUncheckedCreateWithoutEmployeeInput>
  }

  export type InfractionCreateManyEmployeeInputEnvelope = {
    data: InfractionCreateManyEmployeeInput | InfractionCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type GradeHistoryCreateWithoutEmployeeInput = {
    rankName: string
    gradeName: string
    effectiveDate: Date | string
    grade: GradeCreateNestedOneWithoutGradeHistoriesInput
  }

  export type GradeHistoryUncheckedCreateWithoutEmployeeInput = {
    gradeHistoryId?: number
    gradeId: number
    rankName: string
    gradeName: string
    effectiveDate: Date | string
  }

  export type GradeHistoryCreateOrConnectWithoutEmployeeInput = {
    where: GradeHistoryWhereUniqueInput
    create: XOR<GradeHistoryCreateWithoutEmployeeInput, GradeHistoryUncheckedCreateWithoutEmployeeInput>
  }

  export type GradeHistoryCreateManyEmployeeInputEnvelope = {
    data: GradeHistoryCreateManyEmployeeInput | GradeHistoryCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type SalaryHistoryCreateWithoutEmployeeInput = {
    amount: number
    effectiveDate: Date | string
    grade: GradeCreateNestedOneWithoutSalaryHistoriesInput
    baseSalary: BaseSalaryCreateNestedOneWithoutSalaryHistoriesInput
  }

  export type SalaryHistoryUncheckedCreateWithoutEmployeeInput = {
    id?: number
    gradeId: number
    baseSalaryId: number
    amount: number
    effectiveDate: Date | string
  }

  export type SalaryHistoryCreateOrConnectWithoutEmployeeInput = {
    where: SalaryHistoryWhereUniqueInput
    create: XOR<SalaryHistoryCreateWithoutEmployeeInput, SalaryHistoryUncheckedCreateWithoutEmployeeInput>
  }

  export type SalaryHistoryCreateManyEmployeeInputEnvelope = {
    data: SalaryHistoryCreateManyEmployeeInput | SalaryHistoryCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type PlacementCreateWithoutEmployeeInput = {
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
    branch: BranchCreateNestedOneWithoutPlacementsInput
    unit: UnitCreateNestedOneWithoutPlacementsInput
    division: DivisionCreateNestedOneWithoutPlacementsInput
  }

  export type PlacementUncheckedCreateWithoutEmployeeInput = {
    placementId?: number
    branchId: number
    unitId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementCreateOrConnectWithoutEmployeeInput = {
    where: PlacementWhereUniqueInput
    create: XOR<PlacementCreateWithoutEmployeeInput, PlacementUncheckedCreateWithoutEmployeeInput>
  }

  export type PlacementCreateManyEmployeeInputEnvelope = {
    data: PlacementCreateManyEmployeeInput | PlacementCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type RecommendationCreateWithoutEmployeeInput = {
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
    user: UserCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateWithoutEmployeeInput = {
    RecommendationId?: number
    userId: number
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
  }

  export type RecommendationCreateOrConnectWithoutEmployeeInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutEmployeeInput, RecommendationUncheckedCreateWithoutEmployeeInput>
  }

  export type RecommendationCreateManyEmployeeInputEnvelope = {
    data: RecommendationCreateManyEmployeeInput | RecommendationCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEmployeesInput = {
    update: XOR<UserUpdateWithoutEmployeesInput, UserUncheckedUpdateWithoutEmployeesInput>
    create: XOR<UserCreateWithoutEmployeesInput, UserUncheckedCreateWithoutEmployeesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeesInput, UserUncheckedUpdateWithoutEmployeesInput>
  }

  export type UserUpdateWithoutEmployeesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EducationUpsertWithoutEmployeesInput = {
    update: XOR<EducationUpdateWithoutEmployeesInput, EducationUncheckedUpdateWithoutEmployeesInput>
    create: XOR<EducationCreateWithoutEmployeesInput, EducationUncheckedCreateWithoutEmployeesInput>
    where?: EducationWhereInput
  }

  export type EducationUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: EducationWhereInput
    data: XOR<EducationUpdateWithoutEmployeesInput, EducationUncheckedUpdateWithoutEmployeesInput>
  }

  export type EducationUpdateWithoutEmployeesInput = {
    level?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
  }

  export type EducationUncheckedUpdateWithoutEmployeesInput = {
    educationId?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    major?: StringFieldUpdateOperationsInput | string
  }

  export type GradeUpsertWithoutEmployeesInput = {
    update: XOR<GradeUpdateWithoutEmployeesInput, GradeUncheckedUpdateWithoutEmployeesInput>
    create: XOR<GradeCreateWithoutEmployeesInput, GradeUncheckedCreateWithoutEmployeesInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutEmployeesInput, GradeUncheckedUpdateWithoutEmployeesInput>
  }

  export type GradeUpdateWithoutEmployeesInput = {
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    baseSalary?: BaseSalaryUpdateOneRequiredWithoutGradesNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutGradeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutEmployeesInput = {
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutGradeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type PositionUpsertWithoutEmployeesInput = {
    update: XOR<PositionUpdateWithoutEmployeesInput, PositionUncheckedUpdateWithoutEmployeesInput>
    create: XOR<PositionCreateWithoutEmployeesInput, PositionUncheckedCreateWithoutEmployeesInput>
    where?: PositionWhereInput
  }

  export type PositionUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: PositionWhereInput
    data: XOR<PositionUpdateWithoutEmployeesInput, PositionUncheckedUpdateWithoutEmployeesInput>
  }

  export type PositionUpdateWithoutEmployeesInput = {
    positionName?: StringFieldUpdateOperationsInput | string
  }

  export type PositionUncheckedUpdateWithoutEmployeesInput = {
    positionId?: IntFieldUpdateOperationsInput | number
    positionName?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyMemberUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: FamilyMemberWhereUniqueInput
    update: XOR<FamilyMemberUpdateWithoutEmployeeInput, FamilyMemberUncheckedUpdateWithoutEmployeeInput>
    create: XOR<FamilyMemberCreateWithoutEmployeeInput, FamilyMemberUncheckedCreateWithoutEmployeeInput>
  }

  export type FamilyMemberUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: FamilyMemberWhereUniqueInput
    data: XOR<FamilyMemberUpdateWithoutEmployeeInput, FamilyMemberUncheckedUpdateWithoutEmployeeInput>
  }

  export type FamilyMemberUpdateManyWithWhereWithoutEmployeeInput = {
    where: FamilyMemberScalarWhereInput
    data: XOR<FamilyMemberUpdateManyMutationInput, FamilyMemberUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type FamilyMemberScalarWhereInput = {
    AND?: FamilyMemberScalarWhereInput | FamilyMemberScalarWhereInput[]
    OR?: FamilyMemberScalarWhereInput[]
    NOT?: FamilyMemberScalarWhereInput | FamilyMemberScalarWhereInput[]
    id?: IntFilter<"FamilyMember"> | number
    employeeId?: IntFilter<"FamilyMember"> | number
    nik?: StringFilter<"FamilyMember"> | string
    name?: StringFilter<"FamilyMember"> | string
    birthPlace?: StringFilter<"FamilyMember"> | string
    birthDate?: DateTimeFilter<"FamilyMember"> | Date | string
    gender?: EnumGenderFilter<"FamilyMember"> | $Enums.Gender
    marriageDate?: DateTimeNullableFilter<"FamilyMember"> | Date | string | null
    familyStatus?: EnumEmployeeStatusFilter<"FamilyMember"> | $Enums.EmployeeStatus
  }

  export type InfractionUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: InfractionWhereUniqueInput
    update: XOR<InfractionUpdateWithoutEmployeeInput, InfractionUncheckedUpdateWithoutEmployeeInput>
    create: XOR<InfractionCreateWithoutEmployeeInput, InfractionUncheckedCreateWithoutEmployeeInput>
  }

  export type InfractionUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: InfractionWhereUniqueInput
    data: XOR<InfractionUpdateWithoutEmployeeInput, InfractionUncheckedUpdateWithoutEmployeeInput>
  }

  export type InfractionUpdateManyWithWhereWithoutEmployeeInput = {
    where: InfractionScalarWhereInput
    data: XOR<InfractionUpdateManyMutationInput, InfractionUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type InfractionScalarWhereInput = {
    AND?: InfractionScalarWhereInput | InfractionScalarWhereInput[]
    OR?: InfractionScalarWhereInput[]
    NOT?: InfractionScalarWhereInput | InfractionScalarWhereInput[]
    id?: IntFilter<"Infraction"> | number
    employeeId?: IntFilter<"Infraction"> | number
    decreeNumber?: StringFilter<"Infraction"> | string
    name?: StringFilter<"Infraction"> | string
    description?: StringFilter<"Infraction"> | string
  }

  export type GradeHistoryUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: GradeHistoryWhereUniqueInput
    update: XOR<GradeHistoryUpdateWithoutEmployeeInput, GradeHistoryUncheckedUpdateWithoutEmployeeInput>
    create: XOR<GradeHistoryCreateWithoutEmployeeInput, GradeHistoryUncheckedCreateWithoutEmployeeInput>
  }

  export type GradeHistoryUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: GradeHistoryWhereUniqueInput
    data: XOR<GradeHistoryUpdateWithoutEmployeeInput, GradeHistoryUncheckedUpdateWithoutEmployeeInput>
  }

  export type GradeHistoryUpdateManyWithWhereWithoutEmployeeInput = {
    where: GradeHistoryScalarWhereInput
    data: XOR<GradeHistoryUpdateManyMutationInput, GradeHistoryUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type SalaryHistoryUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: SalaryHistoryWhereUniqueInput
    update: XOR<SalaryHistoryUpdateWithoutEmployeeInput, SalaryHistoryUncheckedUpdateWithoutEmployeeInput>
    create: XOR<SalaryHistoryCreateWithoutEmployeeInput, SalaryHistoryUncheckedCreateWithoutEmployeeInput>
  }

  export type SalaryHistoryUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: SalaryHistoryWhereUniqueInput
    data: XOR<SalaryHistoryUpdateWithoutEmployeeInput, SalaryHistoryUncheckedUpdateWithoutEmployeeInput>
  }

  export type SalaryHistoryUpdateManyWithWhereWithoutEmployeeInput = {
    where: SalaryHistoryScalarWhereInput
    data: XOR<SalaryHistoryUpdateManyMutationInput, SalaryHistoryUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PlacementUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PlacementWhereUniqueInput
    update: XOR<PlacementUpdateWithoutEmployeeInput, PlacementUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PlacementCreateWithoutEmployeeInput, PlacementUncheckedCreateWithoutEmployeeInput>
  }

  export type PlacementUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PlacementWhereUniqueInput
    data: XOR<PlacementUpdateWithoutEmployeeInput, PlacementUncheckedUpdateWithoutEmployeeInput>
  }

  export type PlacementUpdateManyWithWhereWithoutEmployeeInput = {
    where: PlacementScalarWhereInput
    data: XOR<PlacementUpdateManyMutationInput, PlacementUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type RecommendationUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutEmployeeInput, RecommendationUncheckedUpdateWithoutEmployeeInput>
    create: XOR<RecommendationCreateWithoutEmployeeInput, RecommendationUncheckedCreateWithoutEmployeeInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutEmployeeInput, RecommendationUncheckedUpdateWithoutEmployeeInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutEmployeeInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type EmployeeCreateWithoutFamilyMembersInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutFamilyMembersInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutFamilyMembersInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutFamilyMembersInput, EmployeeUncheckedCreateWithoutFamilyMembersInput>
  }

  export type EmployeeUpsertWithoutFamilyMembersInput = {
    update: XOR<EmployeeUpdateWithoutFamilyMembersInput, EmployeeUncheckedUpdateWithoutFamilyMembersInput>
    create: XOR<EmployeeCreateWithoutFamilyMembersInput, EmployeeUncheckedCreateWithoutFamilyMembersInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutFamilyMembersInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutFamilyMembersInput, EmployeeUncheckedUpdateWithoutFamilyMembersInput>
  }

  export type EmployeeUpdateWithoutFamilyMembersInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutFamilyMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutInfractionsInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutInfractionsInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutInfractionsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutInfractionsInput, EmployeeUncheckedCreateWithoutInfractionsInput>
  }

  export type EmployeeUpsertWithoutInfractionsInput = {
    update: XOR<EmployeeUpdateWithoutInfractionsInput, EmployeeUncheckedUpdateWithoutInfractionsInput>
    create: XOR<EmployeeCreateWithoutInfractionsInput, EmployeeUncheckedCreateWithoutInfractionsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutInfractionsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutInfractionsInput, EmployeeUncheckedUpdateWithoutInfractionsInput>
  }

  export type EmployeeUpdateWithoutInfractionsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutInfractionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutSalaryHistoriesInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutSalaryHistoriesInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutSalaryHistoriesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutSalaryHistoriesInput, EmployeeUncheckedCreateWithoutSalaryHistoriesInput>
  }

  export type GradeCreateWithoutSalaryHistoriesInput = {
    title: string
    grade: string
    baseSalary: BaseSalaryCreateNestedOneWithoutGradesInput
    employees?: EmployeeCreateNestedManyWithoutGradeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutSalaryHistoriesInput = {
    gradeId?: number
    baseSalaryId: number
    title: string
    grade: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutGradeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutSalaryHistoriesInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutSalaryHistoriesInput, GradeUncheckedCreateWithoutSalaryHistoriesInput>
  }

  export type BaseSalaryCreateWithoutSalaryHistoriesInput = {
    amount: number
    type: string
    yearsOfService?: string | null
    grades?: GradeCreateNestedManyWithoutBaseSalaryInput
  }

  export type BaseSalaryUncheckedCreateWithoutSalaryHistoriesInput = {
    baseSalaryId?: number
    amount: number
    type: string
    yearsOfService?: string | null
    grades?: GradeUncheckedCreateNestedManyWithoutBaseSalaryInput
  }

  export type BaseSalaryCreateOrConnectWithoutSalaryHistoriesInput = {
    where: BaseSalaryWhereUniqueInput
    create: XOR<BaseSalaryCreateWithoutSalaryHistoriesInput, BaseSalaryUncheckedCreateWithoutSalaryHistoriesInput>
  }

  export type EmployeeUpsertWithoutSalaryHistoriesInput = {
    update: XOR<EmployeeUpdateWithoutSalaryHistoriesInput, EmployeeUncheckedUpdateWithoutSalaryHistoriesInput>
    create: XOR<EmployeeCreateWithoutSalaryHistoriesInput, EmployeeUncheckedCreateWithoutSalaryHistoriesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutSalaryHistoriesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutSalaryHistoriesInput, EmployeeUncheckedUpdateWithoutSalaryHistoriesInput>
  }

  export type EmployeeUpdateWithoutSalaryHistoriesInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutSalaryHistoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type GradeUpsertWithoutSalaryHistoriesInput = {
    update: XOR<GradeUpdateWithoutSalaryHistoriesInput, GradeUncheckedUpdateWithoutSalaryHistoriesInput>
    create: XOR<GradeCreateWithoutSalaryHistoriesInput, GradeUncheckedCreateWithoutSalaryHistoriesInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutSalaryHistoriesInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutSalaryHistoriesInput, GradeUncheckedUpdateWithoutSalaryHistoriesInput>
  }

  export type GradeUpdateWithoutSalaryHistoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    baseSalary?: BaseSalaryUpdateOneRequiredWithoutGradesNestedInput
    employees?: EmployeeUpdateManyWithoutGradeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutSalaryHistoriesInput = {
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutGradeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type BaseSalaryUpsertWithoutSalaryHistoriesInput = {
    update: XOR<BaseSalaryUpdateWithoutSalaryHistoriesInput, BaseSalaryUncheckedUpdateWithoutSalaryHistoriesInput>
    create: XOR<BaseSalaryCreateWithoutSalaryHistoriesInput, BaseSalaryUncheckedCreateWithoutSalaryHistoriesInput>
    where?: BaseSalaryWhereInput
  }

  export type BaseSalaryUpdateToOneWithWhereWithoutSalaryHistoriesInput = {
    where?: BaseSalaryWhereInput
    data: XOR<BaseSalaryUpdateWithoutSalaryHistoriesInput, BaseSalaryUncheckedUpdateWithoutSalaryHistoriesInput>
  }

  export type BaseSalaryUpdateWithoutSalaryHistoriesInput = {
    amount?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    yearsOfService?: NullableStringFieldUpdateOperationsInput | string | null
    grades?: GradeUpdateManyWithoutBaseSalaryNestedInput
  }

  export type BaseSalaryUncheckedUpdateWithoutSalaryHistoriesInput = {
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    yearsOfService?: NullableStringFieldUpdateOperationsInput | string | null
    grades?: GradeUncheckedUpdateManyWithoutBaseSalaryNestedInput
  }

  export type EmployeeCreateWithoutGradeHistoriesInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutGradeHistoriesInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutGradeHistoriesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutGradeHistoriesInput, EmployeeUncheckedCreateWithoutGradeHistoriesInput>
  }

  export type GradeCreateWithoutGradeHistoriesInput = {
    title: string
    grade: string
    baseSalary: BaseSalaryCreateNestedOneWithoutGradesInput
    employees?: EmployeeCreateNestedManyWithoutGradeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutGradeHistoriesInput = {
    gradeId?: number
    baseSalaryId: number
    title: string
    grade: string
    employees?: EmployeeUncheckedCreateNestedManyWithoutGradeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutGradeHistoriesInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutGradeHistoriesInput, GradeUncheckedCreateWithoutGradeHistoriesInput>
  }

  export type EmployeeUpsertWithoutGradeHistoriesInput = {
    update: XOR<EmployeeUpdateWithoutGradeHistoriesInput, EmployeeUncheckedUpdateWithoutGradeHistoriesInput>
    create: XOR<EmployeeCreateWithoutGradeHistoriesInput, EmployeeUncheckedCreateWithoutGradeHistoriesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutGradeHistoriesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutGradeHistoriesInput, EmployeeUncheckedUpdateWithoutGradeHistoriesInput>
  }

  export type EmployeeUpdateWithoutGradeHistoriesInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutGradeHistoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type GradeUpsertWithoutGradeHistoriesInput = {
    update: XOR<GradeUpdateWithoutGradeHistoriesInput, GradeUncheckedUpdateWithoutGradeHistoriesInput>
    create: XOR<GradeCreateWithoutGradeHistoriesInput, GradeUncheckedCreateWithoutGradeHistoriesInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutGradeHistoriesInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutGradeHistoriesInput, GradeUncheckedUpdateWithoutGradeHistoriesInput>
  }

  export type GradeUpdateWithoutGradeHistoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    baseSalary?: BaseSalaryUpdateOneRequiredWithoutGradesNestedInput
    employees?: EmployeeUpdateManyWithoutGradeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutGradeHistoriesInput = {
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutGradeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type EmployeeCreateWithoutPlacementsInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPlacementsInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPlacementsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPlacementsInput, EmployeeUncheckedCreateWithoutPlacementsInput>
  }

  export type BranchCreateWithoutPlacementsInput = {
    branchName: string
  }

  export type BranchUncheckedCreateWithoutPlacementsInput = {
    branchId?: number
    branchName: string
  }

  export type BranchCreateOrConnectWithoutPlacementsInput = {
    where: BranchWhereUniqueInput
    create: XOR<BranchCreateWithoutPlacementsInput, BranchUncheckedCreateWithoutPlacementsInput>
  }

  export type UnitCreateWithoutPlacementsInput = {
    unitName: string
  }

  export type UnitUncheckedCreateWithoutPlacementsInput = {
    unitId?: number
    unitName: string
  }

  export type UnitCreateOrConnectWithoutPlacementsInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutPlacementsInput, UnitUncheckedCreateWithoutPlacementsInput>
  }

  export type DivisionCreateWithoutPlacementsInput = {
    divisionName: string
  }

  export type DivisionUncheckedCreateWithoutPlacementsInput = {
    divisionId?: number
    divisionName: string
  }

  export type DivisionCreateOrConnectWithoutPlacementsInput = {
    where: DivisionWhereUniqueInput
    create: XOR<DivisionCreateWithoutPlacementsInput, DivisionUncheckedCreateWithoutPlacementsInput>
  }

  export type EmployeeUpsertWithoutPlacementsInput = {
    update: XOR<EmployeeUpdateWithoutPlacementsInput, EmployeeUncheckedUpdateWithoutPlacementsInput>
    create: XOR<EmployeeCreateWithoutPlacementsInput, EmployeeUncheckedCreateWithoutPlacementsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPlacementsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPlacementsInput, EmployeeUncheckedUpdateWithoutPlacementsInput>
  }

  export type EmployeeUpdateWithoutPlacementsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPlacementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type BranchUpsertWithoutPlacementsInput = {
    update: XOR<BranchUpdateWithoutPlacementsInput, BranchUncheckedUpdateWithoutPlacementsInput>
    create: XOR<BranchCreateWithoutPlacementsInput, BranchUncheckedCreateWithoutPlacementsInput>
    where?: BranchWhereInput
  }

  export type BranchUpdateToOneWithWhereWithoutPlacementsInput = {
    where?: BranchWhereInput
    data: XOR<BranchUpdateWithoutPlacementsInput, BranchUncheckedUpdateWithoutPlacementsInput>
  }

  export type BranchUpdateWithoutPlacementsInput = {
    branchName?: StringFieldUpdateOperationsInput | string
  }

  export type BranchUncheckedUpdateWithoutPlacementsInput = {
    branchId?: IntFieldUpdateOperationsInput | number
    branchName?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUpsertWithoutPlacementsInput = {
    update: XOR<UnitUpdateWithoutPlacementsInput, UnitUncheckedUpdateWithoutPlacementsInput>
    create: XOR<UnitCreateWithoutPlacementsInput, UnitUncheckedCreateWithoutPlacementsInput>
    where?: UnitWhereInput
  }

  export type UnitUpdateToOneWithWhereWithoutPlacementsInput = {
    where?: UnitWhereInput
    data: XOR<UnitUpdateWithoutPlacementsInput, UnitUncheckedUpdateWithoutPlacementsInput>
  }

  export type UnitUpdateWithoutPlacementsInput = {
    unitName?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUncheckedUpdateWithoutPlacementsInput = {
    unitId?: IntFieldUpdateOperationsInput | number
    unitName?: StringFieldUpdateOperationsInput | string
  }

  export type DivisionUpsertWithoutPlacementsInput = {
    update: XOR<DivisionUpdateWithoutPlacementsInput, DivisionUncheckedUpdateWithoutPlacementsInput>
    create: XOR<DivisionCreateWithoutPlacementsInput, DivisionUncheckedCreateWithoutPlacementsInput>
    where?: DivisionWhereInput
  }

  export type DivisionUpdateToOneWithWhereWithoutPlacementsInput = {
    where?: DivisionWhereInput
    data: XOR<DivisionUpdateWithoutPlacementsInput, DivisionUncheckedUpdateWithoutPlacementsInput>
  }

  export type DivisionUpdateWithoutPlacementsInput = {
    divisionName?: StringFieldUpdateOperationsInput | string
  }

  export type DivisionUncheckedUpdateWithoutPlacementsInput = {
    divisionId?: IntFieldUpdateOperationsInput | number
    divisionName?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeCreateWithoutRecommendationsInput = {
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    user: UserCreateNestedOneWithoutEmployeesInput
    education: EducationCreateNestedOneWithoutEmployeesInput
    grade: GradeCreateNestedOneWithoutEmployeesInput
    position: PositionCreateNestedOneWithoutEmployeesInput
    familyMembers?: FamilyMemberCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryCreateNestedManyWithoutEmployeeInput
    placements?: PlacementCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutRecommendationsInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
    familyMembers?: FamilyMemberUncheckedCreateNestedManyWithoutEmployeeInput
    infractions?: InfractionUncheckedCreateNestedManyWithoutEmployeeInput
    gradeHistories?: GradeHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    salaryHistories?: SalaryHistoryUncheckedCreateNestedManyWithoutEmployeeInput
    placements?: PlacementUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutRecommendationsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutRecommendationsInput, EmployeeUncheckedCreateWithoutRecommendationsInput>
  }

  export type UserCreateWithoutRecommendationsInput = {
    username: string
    password: string
    email: string
    phoneNumber: string
    role: $Enums.Role
    token?: string | null
    employees?: EmployeeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecommendationsInput = {
    userId?: number
    username: string
    password: string
    email: string
    phoneNumber: string
    role: $Enums.Role
    token?: string | null
    employees?: EmployeeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecommendationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
  }

  export type EmployeeUpsertWithoutRecommendationsInput = {
    update: XOR<EmployeeUpdateWithoutRecommendationsInput, EmployeeUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<EmployeeCreateWithoutRecommendationsInput, EmployeeUncheckedCreateWithoutRecommendationsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutRecommendationsInput, EmployeeUncheckedUpdateWithoutRecommendationsInput>
  }

  export type EmployeeUpdateWithoutRecommendationsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutRecommendationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type UserUpsertWithoutRecommendationsInput = {
    update: XOR<UserUpdateWithoutRecommendationsInput, UserUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecommendationsInput, UserUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserUpdateWithoutRecommendationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    employees?: EmployeeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecommendationsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    token?: NullableStringFieldUpdateOperationsInput | string | null
    employees?: EmployeeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PlacementCreateManyBranchInput = {
    placementId?: number
    employeeId: number
    unitId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementUpdateWithoutBranchInput = {
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPlacementsNestedInput
    unit?: UnitUpdateOneRequiredWithoutPlacementsNestedInput
    division?: DivisionUpdateOneRequiredWithoutPlacementsNestedInput
  }

  export type PlacementUncheckedUpdateWithoutBranchInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    divisionId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementUncheckedUpdateManyWithoutBranchInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    divisionId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementCreateManyUnitInput = {
    placementId?: number
    employeeId: number
    branchId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementUpdateWithoutUnitInput = {
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPlacementsNestedInput
    branch?: BranchUpdateOneRequiredWithoutPlacementsNestedInput
    division?: DivisionUpdateOneRequiredWithoutPlacementsNestedInput
  }

  export type PlacementUncheckedUpdateWithoutUnitInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    divisionId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementUncheckedUpdateManyWithoutUnitInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    divisionId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementCreateManyDivisionInput = {
    placementId?: number
    employeeId: number
    branchId: number
    unitId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type PlacementUpdateWithoutDivisionInput = {
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutPlacementsNestedInput
    branch?: BranchUpdateOneRequiredWithoutPlacementsNestedInput
    unit?: UnitUpdateOneRequiredWithoutPlacementsNestedInput
  }

  export type PlacementUncheckedUpdateWithoutDivisionInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementUncheckedUpdateManyWithoutDivisionInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyEducationInput = {
    id?: number
    userId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
  }

  export type EmployeeUpdateWithoutEducationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
  }

  export type EmployeeCreateManyPositionInput = {
    id?: number
    userId: number
    educationId: number
    gradeId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
  }

  export type EmployeeUpdateWithoutPositionInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutPositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
  }

  export type GradeCreateManyBaseSalaryInput = {
    gradeId?: number
    title: string
    grade: string
  }

  export type SalaryHistoryCreateManyBaseSalaryInput = {
    id?: number
    employeeId: number
    gradeId: number
    amount: number
    effectiveDate: Date | string
  }

  export type GradeUpdateWithoutBaseSalaryInput = {
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUpdateManyWithoutGradeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutGradeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutBaseSalaryInput = {
    gradeId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    employees?: EmployeeUncheckedUpdateManyWithoutGradeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutGradeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateManyWithoutBaseSalaryInput = {
    gradeId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
  }

  export type SalaryHistoryUpdateWithoutBaseSalaryInput = {
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutSalaryHistoriesNestedInput
    grade?: GradeUpdateOneRequiredWithoutSalaryHistoriesNestedInput
  }

  export type SalaryHistoryUncheckedUpdateWithoutBaseSalaryInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryHistoryUncheckedUpdateManyWithoutBaseSalaryInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyGradeInput = {
    id?: number
    userId: number
    educationId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
  }

  export type GradeHistoryCreateManyGradeInput = {
    gradeHistoryId?: number
    employeeId: number
    rankName: string
    gradeName: string
    effectiveDate: Date | string
  }

  export type SalaryHistoryCreateManyGradeInput = {
    id?: number
    employeeId: number
    baseSalaryId: number
    amount: number
    effectiveDate: Date | string
  }

  export type EmployeeUpdateWithoutGradeInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployeesNestedInput
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
  }

  export type GradeHistoryUpdateWithoutGradeInput = {
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutGradeHistoriesNestedInput
  }

  export type GradeHistoryUncheckedUpdateWithoutGradeInput = {
    gradeHistoryId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeHistoryUncheckedUpdateManyWithoutGradeInput = {
    gradeHistoryId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryHistoryUpdateWithoutGradeInput = {
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutSalaryHistoriesNestedInput
    baseSalary?: BaseSalaryUpdateOneRequiredWithoutSalaryHistoriesNestedInput
  }

  export type SalaryHistoryUncheckedUpdateWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryHistoryUncheckedUpdateManyWithoutGradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyUserInput = {
    id?: number
    educationId: number
    gradeId: number
    positionId: number
    fullName: string
    nipp: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    kkNumber: string
    nik: string
    employeeStatus: $Enums.EmployeeStatus
    familyStatus: $Enums.FamilyStatus
    address: string
    photoUrl: string
  }

  export type RecommendationCreateManyUserInput = {
    RecommendationId?: number
    employeeId: number
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
  }

  export type EmployeeUpdateWithoutUserInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    education?: EducationUpdateOneRequiredWithoutEmployeesNestedInput
    grade?: GradeUpdateOneRequiredWithoutEmployeesNestedInput
    position?: PositionUpdateOneRequiredWithoutEmployeesNestedInput
    familyMembers?: FamilyMemberUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
    familyMembers?: FamilyMemberUncheckedUpdateManyWithoutEmployeeNestedInput
    infractions?: InfractionUncheckedUpdateManyWithoutEmployeeNestedInput
    gradeHistories?: GradeHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    salaryHistories?: SalaryHistoryUncheckedUpdateManyWithoutEmployeeNestedInput
    placements?: PlacementUncheckedUpdateManyWithoutEmployeeNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    educationId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    positionId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nipp?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    kkNumber?: StringFieldUpdateOperationsInput | string
    nik?: StringFieldUpdateOperationsInput | string
    employeeStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
    familyStatus?: EnumFamilyStatusFieldUpdateOperationsInput | $Enums.FamilyStatus
    address?: StringFieldUpdateOperationsInput | string
    photoUrl?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationUpdateWithoutUserInput = {
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
    employee?: EmployeeUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateWithoutUserInput = {
    RecommendationId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationUncheckedUpdateManyWithoutUserInput = {
    RecommendationId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
  }

  export type FamilyMemberCreateManyEmployeeInput = {
    id?: number
    nik: string
    name: string
    birthPlace: string
    birthDate: Date | string
    gender: $Enums.Gender
    marriageDate?: Date | string | null
    familyStatus: $Enums.EmployeeStatus
  }

  export type InfractionCreateManyEmployeeInput = {
    id?: number
    decreeNumber: string
    name: string
    description: string
  }

  export type GradeHistoryCreateManyEmployeeInput = {
    gradeHistoryId?: number
    gradeId: number
    rankName: string
    gradeName: string
    effectiveDate: Date | string
  }

  export type SalaryHistoryCreateManyEmployeeInput = {
    id?: number
    gradeId: number
    baseSalaryId: number
    amount: number
    effectiveDate: Date | string
  }

  export type PlacementCreateManyEmployeeInput = {
    placementId?: number
    branchId: number
    unitId: number
    divisionId: number
    placementType: $Enums.PlacementType
    effectiveDate: Date | string
  }

  export type RecommendationCreateManyEmployeeInput = {
    RecommendationId?: number
    userId: number
    recommendationDate: Date | string
    status: $Enums.RecommendationStatus
    type: $Enums.RecommendationType
    processDate?: Date | string | null
    fileCode: string
  }

  export type FamilyMemberUpdateWithoutEmployeeInput = {
    nik?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    marriageDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
  }

  export type FamilyMemberUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nik?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    marriageDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
  }

  export type FamilyMemberUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    nik?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    birthPlace?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    marriageDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyStatus?: EnumEmployeeStatusFieldUpdateOperationsInput | $Enums.EmployeeStatus
  }

  export type InfractionUpdateWithoutEmployeeInput = {
    decreeNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InfractionUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    decreeNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type InfractionUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    decreeNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GradeHistoryUpdateWithoutEmployeeInput = {
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    grade?: GradeUpdateOneRequiredWithoutGradeHistoriesNestedInput
  }

  export type GradeHistoryUncheckedUpdateWithoutEmployeeInput = {
    gradeHistoryId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeHistoryUncheckedUpdateManyWithoutEmployeeInput = {
    gradeHistoryId?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    rankName?: StringFieldUpdateOperationsInput | string
    gradeName?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryHistoryUpdateWithoutEmployeeInput = {
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    grade?: GradeUpdateOneRequiredWithoutSalaryHistoriesNestedInput
    baseSalary?: BaseSalaryUpdateOneRequiredWithoutSalaryHistoriesNestedInput
  }

  export type SalaryHistoryUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalaryHistoryUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    gradeId?: IntFieldUpdateOperationsInput | number
    baseSalaryId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementUpdateWithoutEmployeeInput = {
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    branch?: BranchUpdateOneRequiredWithoutPlacementsNestedInput
    unit?: UnitUpdateOneRequiredWithoutPlacementsNestedInput
    division?: DivisionUpdateOneRequiredWithoutPlacementsNestedInput
  }

  export type PlacementUncheckedUpdateWithoutEmployeeInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    divisionId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlacementUncheckedUpdateManyWithoutEmployeeInput = {
    placementId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    unitId?: IntFieldUpdateOperationsInput | number
    divisionId?: IntFieldUpdateOperationsInput | number
    placementType?: EnumPlacementTypeFieldUpdateOperationsInput | $Enums.PlacementType
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUpdateWithoutEmployeeInput = {
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateWithoutEmployeeInput = {
    RecommendationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationUncheckedUpdateManyWithoutEmployeeInput = {
    RecommendationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    recommendationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumRecommendationStatusFieldUpdateOperationsInput | $Enums.RecommendationStatus
    type?: EnumRecommendationTypeFieldUpdateOperationsInput | $Enums.RecommendationType
    processDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fileCode?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}