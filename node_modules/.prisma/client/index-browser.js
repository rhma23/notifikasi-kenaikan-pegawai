
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BranchScalarFieldEnum = {
  branchId: 'branchId',
  branchName: 'branchName'
};

exports.Prisma.UnitScalarFieldEnum = {
  unitId: 'unitId',
  unitName: 'unitName'
};

exports.Prisma.DivisionScalarFieldEnum = {
  divisionId: 'divisionId',
  divisionName: 'divisionName'
};

exports.Prisma.EducationScalarFieldEnum = {
  educationId: 'educationId',
  level: 'level',
  major: 'major'
};

exports.Prisma.PositionScalarFieldEnum = {
  positionId: 'positionId',
  positionName: 'positionName'
};

exports.Prisma.BaseSalaryScalarFieldEnum = {
  baseSalaryId: 'baseSalaryId',
  amount: 'amount',
  type: 'type',
  yearsOfService: 'yearsOfService'
};

exports.Prisma.GradeScalarFieldEnum = {
  gradeId: 'gradeId',
  baseSalaryId: 'baseSalaryId',
  gradeName: 'gradeName',
  type: 'type'
};

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  username: 'username',
  password: 'password',
  email: 'email',
  phoneNumber: 'phoneNumber',
  role: 'role',
  token: 'token'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  educationId: 'educationId',
  gradeId: 'gradeId',
  positionId: 'positionId',
  fullName: 'fullName',
  nipp: 'nipp',
  birthPlace: 'birthPlace',
  birthDate: 'birthDate',
  gender: 'gender',
  kkNumber: 'kkNumber',
  nik: 'nik',
  employeeStatus: 'employeeStatus',
  familyStatus: 'familyStatus',
  address: 'address',
  photoUrl: 'photoUrl'
};

exports.Prisma.FamilyMemberScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  nik: 'nik',
  name: 'name',
  birthPlace: 'birthPlace',
  birthDate: 'birthDate',
  gender: 'gender',
  marriageDate: 'marriageDate',
  familyStatus: 'familyStatus'
};

exports.Prisma.InfractionScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  decreeNumber: 'decreeNumber',
  name: 'name',
  description: 'description'
};

exports.Prisma.SalaryHistoryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  gradeId: 'gradeId',
  baseSalaryId: 'baseSalaryId',
  amount: 'amount',
  effectiveDate: 'effectiveDate'
};

exports.Prisma.GradeHistoryScalarFieldEnum = {
  gradeHistoryId: 'gradeHistoryId',
  employeeId: 'employeeId',
  gradeId: 'gradeId',
  rankName: 'rankName',
  gradeName: 'gradeName',
  effectiveDate: 'effectiveDate'
};

exports.Prisma.PlacementScalarFieldEnum = {
  placementId: 'placementId',
  employeeId: 'employeeId',
  branchId: 'branchId',
  unitId: 'unitId',
  divisionId: 'divisionId',
  placementType: 'placementType',
  effectiveDate: 'effectiveDate'
};

exports.Prisma.RecommendationScalarFieldEnum = {
  RecommendationId: 'RecommendationId',
  employeeId: 'employeeId',
  userId: 'userId',
  recommendationDate: 'recommendationDate',
  status: 'status',
  type: 'type',
  processDate: 'processDate',
  fileCode: 'fileCode'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.BranchOrderByRelevanceFieldEnum = {
  branchName: 'branchName'
};

exports.Prisma.UnitOrderByRelevanceFieldEnum = {
  unitName: 'unitName'
};

exports.Prisma.DivisionOrderByRelevanceFieldEnum = {
  divisionName: 'divisionName'
};

exports.Prisma.EducationOrderByRelevanceFieldEnum = {
  level: 'level',
  major: 'major'
};

exports.Prisma.PositionOrderByRelevanceFieldEnum = {
  positionName: 'positionName'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.BaseSalaryOrderByRelevanceFieldEnum = {
  type: 'type',
  yearsOfService: 'yearsOfService'
};

exports.Prisma.GradeOrderByRelevanceFieldEnum = {
  gradeName: 'gradeName',
  type: 'type'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password',
  email: 'email',
  phoneNumber: 'phoneNumber',
  token: 'token'
};

exports.Prisma.EmployeeOrderByRelevanceFieldEnum = {
  fullName: 'fullName',
  nipp: 'nipp',
  birthPlace: 'birthPlace',
  kkNumber: 'kkNumber',
  nik: 'nik',
  address: 'address',
  photoUrl: 'photoUrl'
};

exports.Prisma.FamilyMemberOrderByRelevanceFieldEnum = {
  nik: 'nik',
  name: 'name',
  birthPlace: 'birthPlace'
};

exports.Prisma.InfractionOrderByRelevanceFieldEnum = {
  decreeNumber: 'decreeNumber',
  name: 'name',
  description: 'description'
};

exports.Prisma.GradeHistoryOrderByRelevanceFieldEnum = {
  rankName: 'rankName',
  gradeName: 'gradeName'
};

exports.Prisma.RecommendationOrderByRelevanceFieldEnum = {
  fileCode: 'fileCode'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  manager: 'manager',
  director: 'director',
  employee: 'employee'
};

exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female'
};

exports.EmployeeStatus = exports.$Enums.EmployeeStatus = {
  sukan: 'sukan',
  contract: 'contract',
  honorary: 'honorary',
  trainee: 'trainee',
  permanent_honorer: 'permanent_honorer',
  permanent_employee: 'permanent_employee'
};

exports.FamilyStatus = exports.$Enums.FamilyStatus = {
  child: 'child',
  wife: 'wife',
  husband: 'husband'
};

exports.PlacementType = exports.$Enums.PlacementType = {
  branch: 'branch',
  center: 'center',
  unit: 'unit'
};

exports.RecommendationStatus = exports.$Enums.RecommendationStatus = {
  received: 'received',
  delayed: 'delayed',
  approved: 'approved',
  completed: 'completed'
};

exports.RecommendationType = exports.$Enums.RecommendationType = {
  salary: 'salary',
  rank: 'rank'
};

exports.Prisma.ModelName = {
  Branch: 'Branch',
  Unit: 'Unit',
  Division: 'Division',
  Education: 'Education',
  Position: 'Position',
  BaseSalary: 'BaseSalary',
  Grade: 'Grade',
  User: 'User',
  Employee: 'Employee',
  FamilyMember: 'FamilyMember',
  Infraction: 'Infraction',
  SalaryHistory: 'SalaryHistory',
  GradeHistory: 'GradeHistory',
  Placement: 'Placement',
  Recommendation: 'Recommendation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
